var t={d:(r,e)=>{for(var o in e)t.o(e,o)&&!t.o(r,o)&&Object.defineProperty(r,o,{enumerable:!0,get:e[o]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{Z:()=>g});class e{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(t,r){return[2/t,0,0,0,2/r,0,-1,-1,1]}translationMatrix(t,r){return[1,0,0,0,1,0,t,r,1]}rotationMatrix(t){const r=t/180*Math.PI,e=Math.sin(r),o=Math.cos(r);return[o,-e,0,e,o,0,0,0,1]}scaleMatrix(t,r){return[t,0,0,0,r,0,0,0,1]}arrayToMatrix(t,r){const e=[];for(let o=0;o<t.length;o+=r)e.push(t.slice(o,o+r));return e}multiplyMatrices(t,r){if(t.length===r.length&&[1,4,9,16].includes(t.length)){const e=Math.sqrt(t.length),o=this.arrayToMatrix(t,e),a=this.arrayToMatrix(r,e);return o.map(((t,r)=>a[0].map(((e,n)=>t.reduce(((t,e,i)=>t+o[r][i]*a[i][n]),0))))).flat(1)}}}function o(t,r,e){const o=function(t,r,e){const o=t.createProgram();if(t.attachShader(o,r),t.attachShader(o,e),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS))return o;console.log(t.getProgramInfoLog(o)),t.deleteProgram(o)}(t,i(t,t.VERTEX_SHADER,r),i(t,t.FRAGMENT_SHADER,e));return o}function a(t){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)}function n(t){const r=new e,o=r.identityMatrix(),a=r.projectionMatrix(t.canvas.width,t.canvas.height),n=r.translationMatrix(0,0),i=r.rotationMatrix(0),s=r.scaleMatrix(1,1);let c=r.multiplyMatrices(o,a);return c=r.multiplyMatrices(c,n),c=r.multiplyMatrices(c,i),c=r.multiplyMatrices(c,s),c}function i(t,r,e){const o=t.createShader(r);if(t.shaderSource(o,e),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS))return o;console.log(t.getShaderInfoLog(o)),t.deleteShader(o)}const s="attribute vec2 a_position;\r\nuniform mat3 u_matrix;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n}",c="precision mediump float;\r\nuniform vec4 u_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = u_color;\r\n}";class l{getTickInfo(t,r){const e=t/r,o=Math.pow(10,Math.floor(Math.log10(e))),a=e/o,n=(a<10?[1,1.5,2,3,5,7,10].find((t=>t>a)):10)*o;return{tickHeight:n,tickCount:Math.ceil(t/n)}}drawLines(t,r){const e=o(t,s,c),i=t.getAttribLocation(e,"a_position"),l=t.getUniformLocation(e,"u_color"),u=t.getUniformLocation(e,"u_matrix"),f=n(t),h=Math.max(...r.map(Math.abs)),m=this.getTickInfo(h,8),g=t.canvas.width,d=t.canvas.height,A=Math.floor(Math.min(g,d)/100),_=(d-2*A)/7,v=[],R=A,b=g-A;for(let t=1;t<=m.tickCount;t++){const r=t*_;v.push(R,r,b,r)}console.log(v);const p=t.createBuffer();return t.bindBuffer(t.ARRAY_BUFFER,p),t.bufferData(t.ARRAY_BUFFER,new Int16Array(v),t.STATIC_DRAW),a(t),t.useProgram(e),t.uniform4f(l,.7,.7,.7,1),t.uniformMatrix3fv(u,!1,f),t.useProgram(e),t.enableVertexAttribArray(i),t.bindBuffer(t.ARRAY_BUFFER,p),t.vertexAttribPointer(i,2,t.SHORT,!1,0,0),t.drawArrays(t.LINES,0,v.length/2),m.tickCount*m.tickHeight}drawBars(t,r,e){const a=o(t,s,c),i=t.getAttribLocation(a,"a_position"),l=t.getUniformLocation(a,"u_color"),u=t.getUniformLocation(a,"u_matrix"),f=n(t),h=t.canvas.width,m=t.canvas.height,g=Math.floor(Math.min(h,m)/100),d=h-2*g,A=(m-2*g)/e,_=[],v=r.length,R=d/v;for(let t=0;t<v;t++){const e=g+r[t]*A,o=g+R*t+R/5,a=g+R*(t+1)-R/5;_.push(o,g,o,e,a,e),_.push(o,g,a,g,a,e)}const b=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,b),t.bufferData(t.ARRAY_BUFFER,new Float32Array(_),t.STATIC_DRAW),t.useProgram(a),t.uniformMatrix3fv(u,!1,f),t.enableVertexAttribArray(i),t.bindBuffer(t.ARRAY_BUFFER,b);for(let r=0;r<v;r++)t.uniform4f(l,Math.random(),Math.random(),Math.random(),1),t.vertexAttribPointer(i,2,t.FLOAT,!1,0,12*r*Float32Array.BYTES_PER_ELEMENT),t.drawArrays(t.TRIANGLES,0,12)}drawRect(t){const r=o(t,"attribute vec2 a_position;\r\nuniform vec4 u_color;\r\nuniform mat3 u_matrix;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = u_color;\r\n}","precision mediump float;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}"),e=t.getAttribLocation(r,"a_position"),i=t.getUniformLocation(r,"u_color"),s=t.getUniformLocation(r,"u_matrix"),c=n(t),l=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,l),t.bufferData(t.ARRAY_BUFFER,new Int16Array([0,0,0,50,50,50,0,0,50,0,50,50]),t.STATIC_DRAW),a(t),t.useProgram(r),t.uniformMatrix3fv(s,!1,c),t.enableVertexAttribArray(e),t.uniform4f(i,.5,.5,.5,1),t.bindBuffer(t.ARRAY_BUFFER,l),t.vertexAttribPointer(e,2,t.SHORT,!1,0,0),t.drawArrays(t.TRIANGLES,0,3),t.enableVertexAttribArray(e),t.uniform4f(i,.1,.5,.9,1),t.bindBuffer(t.ARRAY_BUFFER,l),t.vertexAttribPointer(e,2,t.SHORT,!1,0,6*Int16Array.BYTES_PER_ELEMENT),t.drawArrays(t.TRIANGLES,0,3)}drawF(t){const r=o(t,"attribute vec2 a_position;\r\nvarying vec4 v_color;\r\nuniform mat3 u_matrix;\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = gl_Position;\r\n}","precision mediump float;\r\nvarying vec4 v_color;\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}");t.useProgram(r);const e=t.getAttribLocation(r,"a_position"),i=t.getUniformLocation(r,"u_matrix");a(t);const s=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,s),this.setGeometry(t),t.enableVertexAttribArray(e);const c=t.FLOAT;t.vertexAttribPointer(e,2,c,!1,0,0);const l=n(t);t.uniformMatrix3fv(i,!1,l);const u=t.TRIANGLES;t.drawArrays(u,0,18)}setGeometry(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,30,0,0,150,0,150,30,0,30,150,30,0,100,0,30,30,30,30,100,0,100,30,30,60,67,60,30,90,30,90,67,60,67,90]),t.STATIC_DRAW)}}const u=class{static sliceOrFill(t,r,e){if(t.length===r)return t;if(t.length>r)return t.slice(0,r);if(t.length<r)for(;t.length!==r;)t.push(null!=e?e:0);return t}static mergeRight(t,r){const e=Object.keys(r);Object.entries(t).forEach((t=>{const o=t[0];if(e.includes(o)){const e=t[1];r[o]=e}}))}};class f{constructor(t){let r=t;if("string"==typeof r&&(r=document.getElementById(r.replace("/^#/",""))),r instanceof HTMLCanvasElement)this.context=r.getContext("webgl");else{if(!(r instanceof WebGLRenderingContext))throw Error("Argument must be valid ID, HTMLCanvasElement or WebGLRenderingContext");this.context=r}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1},this.seriesData=[]}setChartOptions(t){u.mergeRight(t,this.chartOptions)}setSerieOptions(t,r){r?r.forEach((r=>{const e=this.seriesData.find((t=>t.name==r));e?u.mergeRight(t,e.options):console.warn(`Serie with name ${r} not found.`)})):this.seriesData.forEach((r=>u.mergeRight(t,r.options)))}}class h extends f{constructor(t){super(t)}set X(t){this.dataLabels=t}set Y(t){const{length:r}=this.dataLabels;if(!r)throw Error('Values on "X" axis must be specified before setting "Y" values.');const e=t.map((t=>u.sliceOrFill(t,r)));this.seriesData=e.map(((t,r)=>this.getDefaultSerieObject(t,r)))}getDefaultSerieObject(t,r){return{values:t,name:`serie${r}`,options:{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){const t=new l,r=t.drawLines(this.context,this.seriesData[0].values);t.drawBars(this.context,this.seriesData[0].values,r)}}class m extends f{constructor(t){super(t)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(t){const{length:r}=this.seriesData;if(!r)throw Error('Values on "X" axis must be specified before setting "Y" values.');const e=u.sliceOrFill(t,r);this.seriesData.map(((t,r)=>{t.value=e[r]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){throw Error("Not implemented yet")}}function g(t,r){switch(t.toLowerCase().trim()){case"pie":return new m(r);case"bar":return new h(r);default:throw new Error(`${t} chart is not defined.`)}}var d=r.Z;export{d as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,