var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{Z:()=>l});class r{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(t,e){return[2/t,0,0,0,-2/e,0,-1,1,1]}translationMatrix(t,e){return[1,0,0,0,1,0,t,e,1]}rotationMatrix(t){const e=t/180*Math.PI,r=Math.sin(e),o=Math.cos(e);return[o,-r,0,r,o,0,0,0,1]}scaleMatrix(t,e){return[t,0,0,0,e,0,0,0,1]}arrayToMatrix(t,e){const r=[];for(let o=0;o<t.length;o+=e)r.push(t.slice(o,o+e));return r}multiplyMatrices(t,e){if(t.length===e.length&&[1,4,9,16].includes(t.length)){const r=Math.sqrt(t.length),o=this.arrayToMatrix(t,r),a=this.arrayToMatrix(e,r);return o.map(((t,e)=>a[0].map(((r,i)=>t.reduce(((t,r,n)=>t+o[e][n]*a[n][i]),0))))).flat(1)}}}function o(t,e,r){const o=function(t,e,r){const o=t.createProgram();if(t.attachShader(o,e),t.attachShader(o,r),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS))return o;console.log(t.getProgramInfoLog(o)),t.deleteProgram(o)}(t,n(t,t.VERTEX_SHADER,e),n(t,t.FRAGMENT_SHADER,r));return o}function a(t){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)}function i(t){const e=new r,o=e.identityMatrix(),a=e.projectionMatrix(t.canvas.width,t.canvas.height),i=e.translationMatrix(0,0),n=e.rotationMatrix(0),s=e.scaleMatrix(1,1);let c=e.multiplyMatrices(o,a);return c=e.multiplyMatrices(c,i),c=e.multiplyMatrices(c,n),c=e.multiplyMatrices(c,s),c}function n(t,e,r){const o=t.createShader(e);if(t.shaderSource(o,r),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS))return o;console.log(t.getShaderInfoLog(o)),t.deleteShader(o)}class s{drawRect(t){const e=o(t,"attribute vec2 a_position;\r\nuniform vec4 u_color;\r\nuniform mat3 u_matrix;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = u_color;\r\n}","precision mediump float;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}");t.useProgram(e);const r=t.getAttribLocation(e,"a_position"),n=t.getUniformLocation(e,"u_color"),s=t.getUniformLocation(e,"u_matrix"),c=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,c),t.bufferData(t.ARRAY_BUFFER,new Int16Array([0,0,0,50,50,50,0,0,50,0,50,50]),t.STATIC_DRAW),t.enableVertexAttribArray(r),a(t);const l=i(t);t.uniformMatrix3fv(s,!1,l),t.vertexAttribPointer(r,2,t.SHORT,!1,0,0),t.uniform4f(n,.5,.5,.5,1),t.drawArrays(t.TRIANGLES,0,3),t.uniform4f(n,.1,.5,.9,1),t.vertexAttribPointer(r,2,t.SHORT,!1,0,6*Int16Array.BYTES_PER_ELEMENT),t.drawArrays(t.TRIANGLES,0,3)}drawF(t){const e=o(t,"attribute vec2 a_position;\r\nvarying vec4 v_color;\r\nuniform mat3 u_matrix;\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = gl_Position;\r\n}","precision mediump float;\r\nvarying vec4 v_color;\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}");t.useProgram(e);const r=t.getAttribLocation(e,"a_position"),n=t.getUniformLocation(e,"u_matrix");a(t);const s=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,s),this.setGeometry(t),t.enableVertexAttribArray(r);const c=t.FLOAT;t.vertexAttribPointer(r,2,c,!1,0,0);const l=i(t);t.uniformMatrix3fv(n,!1,l);const h=t.TRIANGLES;t.drawArrays(h,0,18)}setGeometry(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,30,0,0,150,0,150,30,0,30,150,30,0,100,0,30,30,30,30,100,0,100,30,30,60,67,60,30,90,30,90,67,60,67,90]),t.STATIC_DRAW)}}class c extends class{constructor(t){let e=t;if("string"==typeof e&&(e=document.getElementById(e.replace("/^#/",""))),e instanceof HTMLCanvasElement)this.context=e.getContext("webgl");else{if(!(e instanceof WebGLRenderingContext))throw Error("Argument must be valid ID, HTMLCanvasElement or WebGLRenderingContext");this.context=e}this.initializeCanvas()}initializeCanvas(){this.resizeObserver=new ResizeObserver((t=>this.onResizeCallback(t)));const{canvas:t}=this.context;try{this.resizeObserver.observe(t,{box:"device-pixel-content-box"})}catch(e){this.resizeObserver.observe(t,{box:"content-box"})}}onResizeCallback(t){t.forEach((t=>{const e=t.devicePixelContentBoxSize?1:window.devicePixelRatio,{inlineSize:r,blockSize:o}=this.getWidthAndHeight(t);this.setNewCanvasSize(r,o,e)}))}getWidthAndHeight(t){return t.devicePixelContentBoxSize?t.devicePixelContentBoxSize[0]:t.contentBoxSize?t.contentBoxSize[0]:{inlineSize:t.contentRect.width,blockSize:t.contentRect.height}}setNewCanvasSize(t,e,r){const o=Math.round(t*r),a=Math.round(e*r);this.displayWidth=o,this.displayHeight=a}}{constructor(t){super(t),this.options={boldEdges:!1,showValues:!0,valueType:"fixed",showLegend:!0,legendPlaement:"bottom"},this.data=[],this.deleteMe=new s}draw(){this.data.length||(this.fillWithExampleData(),console.warn("No data for chart set. Drawing with example data."))}fillWithExampleData(){this.data=Array(5).map(((t,e)=>({key:`element${e}`,value:Math.floor(10*Math.random()),color:{r:Math.floor(256*Math.random()),g:Math.floor(256*Math.random()),b:Math.floor(256*Math.random()),a:255}})))}set X(t){this.data=this.mapArrayToEntries(t)}set Y(t){if(!this.data)throw Error('Values on "X" axis must be specified before setting "Y" values.');if(this.data.length!==t.length)throw Error('Passed array differs in length from values on "X" axis count.');this.data.forEach(((e,r)=>e.value=t[r]))}set configuration(t){Object.entries(t).forEach((t=>{Object.assign(this.options,{[t[0]]:t[1]})}))}set colors(t){if(!this.data)throw Error('Values on "X" axis must be specified before setting "color" values.');if(this.data.length!==t.length)throw Error('Passed array differs in length from values on "X" axis count.');this.data.forEach(((e,r)=>e.color=t[r]))}setSerieColor(t,e){const r=this.data.find((e=>e.key===t));if(null==r)throw new Error(`Serie with name ${t} doesnt exist.`);r.color=e}mapArrayToEntries(t){return t.map((t=>({key:t,value:0})))}}function l(t,e){if("pie"===t.toLowerCase().trim())return new c(e);throw new Error(`${t} chart is not defined.`)}var h=e.Z;export{h as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixLQUFLcUgsS0FBS3RCLFNBQVEsQ0FBQ0MsRUFBT3dDLElBQVV4QyxFQUFNNEIsTUFBUVMsRUFBT0csS0FHbERDLGtCQUFjQyxHQUNyQnRMLE9BQU9zSSxRQUFRZ0QsR0FBUTNDLFNBQVE0QyxJQUMzQnZMLE9BQU93TCxPQUFPNUksS0FBSytHLFFBQVMsQ0FBRSxDQUFDNEIsRUFBSyxJQUFLQSxFQUFLLFFBSTNDRSxXQUFPQSxHQUNkLElBQUs3SSxLQUFLcUgsS0FBTSxNQUFNL0IsTUFBTSx1RUFDNUIsR0FBSXRGLEtBQUtxSCxLQUFLL0gsU0FBV3VKLEVBQU92SixPQUFRLE1BQU1nRyxNQUFNLGlFQUNwRHRGLEtBQUtxSCxLQUFLdEIsU0FBUSxDQUFDQyxFQUFPd0MsSUFBVXhDLEVBQU0rQixNQUFRYyxFQUFPTCxLQUd0RE0sY0FBY0MsRUFBZWhCLEdBQ2hDLE1BQU0vQixFQUFRaEcsS0FBS3FILEtBQUsyQixNQUFLaEQsR0FBU0EsRUFBTTlJLE1BQVE2TCxJQUNwRCxHQUFhRSxNQUFUakQsRUFBb0IsTUFBTSxJQUFJVixNQUFNLG1CQUFtQnlELG1CQUMzRC9DLEVBQU0rQixNQUFRQSxFQUdWTyxrQkFBa0JZLEdBQ3RCLE9BQU9BLEVBQU1oSixLQUFLaEQsSUFDUCxDQUNIQSxJQUFLQSxFQUNMMEssTUFBTyxPRXhGUixTQUFTdUIsRUFBVzdHLEVBQWNDLEdBQzdDLEdBQ1MsUUFEREQsRUFBSzhHLGNBQWNDLE9BRW5CLE9BQU8sSUFBSXpFLEVBQVNyQyxHQUVwQixNQUFNLElBQUkrQyxNQUFNLEdBQUdoRCwyQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bicnovd2ViZ2wtY2hhcnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQGJyei93ZWJnbC1jaGFydC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQGJyei93ZWJnbC1jaGFydC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0Bicnovd2ViZ2wtY2hhcnQvLi9zcmMvcGxvdC1sb2dpYy9NYXRoVXRpbHMudHMiLCJ3ZWJwYWNrOi8vQGJyei93ZWJnbC1jaGFydC8uL3NyYy9wbG90LWxvZ2ljL1Bsb3RVdGlscy50cyIsIndlYnBhY2s6Ly9AYnJ6L3dlYmdsLWNoYXJ0Ly4vc3JjL3Bsb3QtbG9naWMvRHJhdy50cyIsIndlYnBhY2s6Ly9AYnJ6L3dlYmdsLWNoYXJ0Ly4vc3JjL3NoYWRlcnMvZXhhbXBsZVR3b1JlY3RhbmdsZXMvdmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vQGJyei93ZWJnbC1jaGFydC8uL3NyYy9zaGFkZXJzL2V4YW1wbGVUd29SZWN0YW5nbGVzL2ZyYWdtZW50U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vQGJyei93ZWJnbC1jaGFydC8uL3NyYy9zaGFkZXJzL3ZlcnRleFNoYWRlci5nbHNsIiwid2VicGFjazovL0Bicnovd2ViZ2wtY2hhcnQvLi9zcmMvc2hhZGVycy9mcmFnbWVudFNoYWRlci5nbHNsIiwid2VicGFjazovL0Bicnovd2ViZ2wtY2hhcnQvLi9zcmMvY29tcG9uZW50cy9QaWVDaGFydC50cyIsIndlYnBhY2s6Ly9AYnJ6L3dlYmdsLWNoYXJ0Ly4vc3JjL2NvbXBvbmVudHMvQ2hhcnQudHMiLCJ3ZWJwYWNrOi8vQGJyei93ZWJnbC1jaGFydC8uL3NyYy9jb21wb25lbnRzL0NoYXJ0U2VydmFudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhVdGlscyB7XHJcbiAgICBpZGVudGl0eU1hdHJpeCgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgMSwgMCwgMCxcclxuICAgICAgICAgICAgMCwgMSwgMCxcclxuICAgICAgICAgICAgMCwgMCwgMSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgcHJvamVjdGlvbk1hdHJpeCh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAyIC8gd2lkdGgsIDAsIDAsXHJcbiAgICAgICAgICAgIDAsIC0yIC8gaGVpZ2h0LCAwLFxyXG4gICAgICAgICAgICAtMSwgMSwgMVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICB0cmFuc2xhdGlvbk1hdHJpeCh0eDogbnVtYmVyLCB0eTogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIDEsIDAsIDAsXHJcbiAgICAgICAgICAgIDAsIDEsIDAsXHJcbiAgICAgICAgICAgIHR4LCB0eSwgMSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgcm90YXRpb25NYXRyaXgoZGVncmVlczogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGNvbnN0IHJhZGlhbnMgPSBkZWdyZWVzIC8gMTgwICogTWF0aC5QSTtcclxuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4ocmFkaWFucyk7XHJcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKHJhZGlhbnMpO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGMsIC1zLCAwLFxyXG4gICAgICAgICAgICBzLCBjLCAwLFxyXG4gICAgICAgICAgICAwLCAwLCAxLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBzY2FsZU1hdHJpeChzeDogbnVtYmVyLCBzeTogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHN4LCAwLCAwLFxyXG4gICAgICAgICAgICAwLCBzeSwgMCxcclxuICAgICAgICAgICAgMCwgMCwgMSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXJyYXlUb01hdHJpeChhcnI6IG51bWJlcltdLCBzaXplOiBudW1iZXIpOiBudW1iZXJbXVtdIHtcclxuICAgICAgICBjb25zdCByZXM6IG51bWJlcltdW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gc2l6ZSlcclxuICAgICAgICAgICAgcmVzLnB1c2goYXJyLnNsaWNlKGksIGkgKyBzaXplKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvLyB1c2UgbWF0aC5qcyBpZiBuZWVkZWQgLSBjb2RlIGJ5IEphbiBUdXJvxYhcclxuICAgIG11bHRpcGx5TWF0cmljZXMoRjogbnVtYmVyW10sIFM6IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGlmIChGLmxlbmd0aCA9PT0gUy5sZW5ndGggJiYgWzEsIDQsIDksIDE2XS5pbmNsdWRlcyhGLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgY29uc3QgcG93ID0gTWF0aC5zcXJ0KEYubGVuZ3RoKTtcclxuICAgICAgICAgICAgY29uc3QgQSA9IHRoaXMuYXJyYXlUb01hdHJpeChGLCBwb3cpO1xyXG4gICAgICAgICAgICBjb25zdCBCID0gdGhpcy5hcnJheVRvTWF0cml4KFMsIHBvdyk7XHJcbiAgICAgICAgICAgIHJldHVybiBBLm1hcCgocm93LCBpKSA9PlxyXG4gICAgICAgICAgICAgICAgQlswXS5tYXAoKF8sIGopID0+XHJcbiAgICAgICAgICAgICAgICAgICAgcm93LnJlZHVjZSgoYWNjLCBfLCBuKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2MgKyBBW2ldW25dICogQltuXVtqXSwgMFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKS5mbGF0KDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCBNYXRoVXRpbHMgZnJvbSAnLi9NYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW1Gcm9tU2NyaXB0cyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2czogc3RyaW5nLCBmczogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBjcmVhdGVTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHZzKTtcclxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZzKTtcclxuICAgIGNvbnN0IHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKTtcclxuICAgIHJldHVybiBwcm9ncmFtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVZpZXcoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgZ2wudmlld3BvcnQoMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0KTtcclxuICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XHJcbiAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBudW1iZXJbXSB7XHJcbiAgICBjb25zdCBkcmF3VXRpbHM6IE1hdGhVdGlscyA9IG5ldyBNYXRoVXRpbHMoKTtcclxuICAgIGNvbnN0IHRyYW5zbGF0aW9uWCA9IDA7XHJcbiAgICBjb25zdCB0cmFuc2xhdGlvblkgPSAwO1xyXG4gICAgY29uc3Qgcm90YXRpb25JbkRlZ3JlZXMgPSAwO1xyXG4gICAgY29uc3Qgc2NhbGVYID0gMTtcclxuICAgIGNvbnN0IHNjYWxlWSA9IDE7XHJcblxyXG4gICAgY29uc3QgaWRlbnRpdHlNYXRyaXggPSBkcmF3VXRpbHMuaWRlbnRpdHlNYXRyaXgoKTtcclxuICAgIGNvbnN0IHByb2plY3Rpb25NYXRyaXggPSBkcmF3VXRpbHMucHJvamVjdGlvbk1hdHJpeChnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgY29uc3QgdHJhbnNsYXRpb25NYXRyaXggPSBkcmF3VXRpbHMudHJhbnNsYXRpb25NYXRyaXgodHJhbnNsYXRpb25YLCB0cmFuc2xhdGlvblkpO1xyXG4gICAgY29uc3Qgcm90YXRpb25NYXRyaXggPSBkcmF3VXRpbHMucm90YXRpb25NYXRyaXgocm90YXRpb25JbkRlZ3JlZXMpO1xyXG4gICAgY29uc3Qgc2NhbGVNYXRyaXggPSBkcmF3VXRpbHMuc2NhbGVNYXRyaXgoc2NhbGVYLCBzY2FsZVkpO1xyXG5cclxuICAgIGxldCBtYXRyaXggPSBkcmF3VXRpbHMubXVsdGlwbHlNYXRyaWNlcyhpZGVudGl0eU1hdHJpeCwgcHJvamVjdGlvbk1hdHJpeCk7XHJcbiAgICBtYXRyaXggPSBkcmF3VXRpbHMubXVsdGlwbHlNYXRyaWNlcyhtYXRyaXgsIHRyYW5zbGF0aW9uTWF0cml4KTtcclxuICAgIG1hdHJpeCA9IGRyYXdVdGlscy5tdWx0aXBseU1hdHJpY2VzKG1hdHJpeCwgcm90YXRpb25NYXRyaXgpO1xyXG4gICAgbWF0cml4ID0gZHJhd1V0aWxzLm11bHRpcGx5TWF0cmljZXMobWF0cml4LCBzY2FsZU1hdHJpeCk7XHJcbiAgICByZXR1cm4gbWF0cml4O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTaGFkZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdHlwZTogbnVtYmVyLCBzb3VyY2U6IHN0cmluZyk6IFdlYkdMU2hhZGVyIHtcclxuICAgIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcblxyXG4gICAgY29uc3Qgc3VjY2VzcyA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcclxuICAgIGlmIChzdWNjZXNzKSByZXR1cm4gc2hhZGVyO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKSk7XHJcbiAgICBnbC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUHJvZ3JhbShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2ZXJ0ZXhTaGFkZXI6IFdlYkdMU2hhZGVyLCBmcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXIpOiBXZWJHTFByb2dyYW0gfCBudWxsIHtcclxuICAgIGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgICBjb25zdCBzdWNjZXNzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7XHJcbiAgICBpZiAoc3VjY2VzcykgcmV0dXJuIHByb2dyYW07XHJcblxyXG4gICAgY29uc29sZS5sb2coZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkpO1xyXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcclxufSIsImltcG9ydCB7IGNyZWF0ZVByb2dyYW1Gcm9tU2NyaXB0cywgZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgsIHByZXBhcmVWaWV3IH0gZnJvbSBcIi4vUGxvdFV0aWxzXCI7XHJcbmltcG9ydCB2ZXJ0ZXhTaGFkZXJTdHJpbmcgZnJvbSAnLi4vc2hhZGVycy92ZXJ0ZXhTaGFkZXIuZ2xzbCc7XHJcbmltcG9ydCBmcmFnbWVudFNoYWRlclN0cmluZyBmcm9tICcuLi9zaGFkZXJzL2ZyYWdtZW50U2hhZGVyLmdsc2wnO1xyXG5pbXBvcnQgZXhhbXBsZVR3b1JlY3RhbmdsZXNWU2hhZGVyU3RyaW5nIGZyb20gJy4uL3NoYWRlcnMvZXhhbXBsZVR3b1JlY3RhbmdsZXMvdmVydGV4U2hhZGVyLmdsc2wnO1xyXG5pbXBvcnQgZXhhbXBsZVR3b1JlY3RhbmdsZXNGU2hhZGVyU3RyaW5nIGZyb20gJy4uL3NoYWRlcnMvZXhhbXBsZVR3b1JlY3RhbmdsZXMvZnJhZ21lbnRTaGFkZXIuZ2xzbCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmF3IHtcclxuICAgIGRyYXdSZWN0KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBwcm9ncmFtID0gY3JlYXRlUHJvZ3JhbUZyb21TY3JpcHRzKGdsLCBleGFtcGxlVHdvUmVjdGFuZ2xlc1ZTaGFkZXJTdHJpbmcsIGV4YW1wbGVUd29SZWN0YW5nbGVzRlNoYWRlclN0cmluZyk7XHJcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICdhX3Bvc2l0aW9uJyk7XHJcbiAgICAgICAgY29uc3QgY29sb3JVbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VfY29sb3InKTtcclxuICAgICAgICBjb25zdCBtYXRyaXhVbmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VfbWF0cml4Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgZGF0YUJ1ZmZlcik7XHJcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBJbnQxNkFycmF5KFswLCAwLCAwLCA1MCwgNTAsIDUwLCAwLCAwLCA1MCwgMCwgNTAsIDUwXSksIGdsLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbik7XHJcblxyXG4gICAgICAgIHByZXBhcmVWaWV3KGdsKTtcclxuICAgICAgICBjb25zdCBtYXRyaXggPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChnbCk7XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdihtYXRyaXhVbmlmb3JtTG9jYXRpb24sIGZhbHNlLCBtYXRyaXgpO1xyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiwgMiwgZ2wuU0hPUlQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICBnbC51bmlmb3JtNGYoY29sb3JVbmlmb3JtTG9jYXRpb24sIDAuNSwgMC41LCAwLjUsIDEpO1xyXG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCAzKTtcclxuXHJcbiAgICAgICAgZ2wudW5pZm9ybTRmKGNvbG9yVW5pZm9ybUxvY2F0aW9uLCAwLjEsIDAuNSwgMC45LCAxKTtcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24sIDIsIGdsLlNIT1JULCBmYWxzZSwgMCwgNiAqIEludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCAzKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3RihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IGNyZWF0ZVByb2dyYW1Gcm9tU2NyaXB0cyhnbCwgdmVydGV4U2hhZGVyU3RyaW5nLCBmcmFnbWVudFNoYWRlclN0cmluZyk7XHJcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICdhX3Bvc2l0aW9uJyk7XHJcbiAgICAgICAgY29uc3QgbWF0cml4VW5pZm9ybUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1X21hdHJpeCcpXHJcblxyXG4gICAgICAgIHByZXBhcmVWaWV3KGdsKTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25CdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcG9zaXRpb25CdWZmZXIpO1xyXG4gICAgICAgIHRoaXMuc2V0R2VvbWV0cnkoZ2wpO1xyXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24pO1xyXG5cclxuICAgICAgICBjb25zdCBzaXplID0gMjsgICAgICAgICAgICAgLy8gMiBjb21wb25lbnRzIHBlciBpdGVyYXRpb25cclxuICAgICAgICBjb25zdCB0eXBlID0gZ2wuRkxPQVQ7ICAgICAgLy8gdHlwZSBvZiBjb21wb25lbnQgKDMyYml0IGZsb2F0KVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZSA9IGZhbHNlOyAgICAvLyBkb24ndCBub3JtYWxpemUgZGF0YVxyXG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IDAgICAgICAgICAgICAvLyBtb3ZlIHNpemUgKiBzaXplb2YodHlwZSkgYml0cyB0byBnZXQgbmV4dCBwb3NpdGlvblxyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDAgICAgICAgICAgICAvLyBzdGFydHMgYXQgdGhhdCBiaXRcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc2l0aW9uQXR0cmlidXRlTG9jYXRpb24sIHNpemUsIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xyXG5cclxuICAgICAgICBjb25zdCBtYXRyaXggPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChnbCk7XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdihtYXRyaXhVbmlmb3JtTG9jYXRpb24sIGZhbHNlLCBtYXRyaXgpO1xyXG5cclxuICAgICAgICBjb25zdCBwcmltaXRpdmVUeXBlID0gZ2wuVFJJQU5HTEVTO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gMTg7XHJcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIGNvdW50KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBzZXRHZW9tZXRyeShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShcclxuICAgICAgICAgICAgZ2wuQVJSQVlfQlVGRkVSLFxyXG4gICAgICAgICAgICBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICAgICAgICAgICAgIC8vIGxlZnQgY29sdW1uXHJcbiAgICAgICAgICAgICAgICAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMzAsIDAsXHJcbiAgICAgICAgICAgICAgICAwLCAxNTAsXHJcbiAgICAgICAgICAgICAgICAwLCAxNTAsXHJcbiAgICAgICAgICAgICAgICAzMCwgMCxcclxuICAgICAgICAgICAgICAgIDMwLCAxNTAsXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdG9wIHJ1bmdcclxuICAgICAgICAgICAgICAgIDMwLCAwLFxyXG4gICAgICAgICAgICAgICAgMTAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMzAsIDMwLFxyXG4gICAgICAgICAgICAgICAgMzAsIDMwLFxyXG4gICAgICAgICAgICAgICAgMTAwLCAwLFxyXG4gICAgICAgICAgICAgICAgMTAwLCAzMCxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtaWRkbGUgcnVuZ1xyXG4gICAgICAgICAgICAgICAgMzAsIDYwLFxyXG4gICAgICAgICAgICAgICAgNjcsIDYwLFxyXG4gICAgICAgICAgICAgICAgMzAsIDkwLFxyXG4gICAgICAgICAgICAgICAgMzAsIDkwLFxyXG4gICAgICAgICAgICAgICAgNjcsIDYwLFxyXG4gICAgICAgICAgICAgICAgNjcsIDkwLFxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgXCJhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcclxcbnVuaWZvcm0gdmVjNCB1X2NvbG9yO1xcclxcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXHJcXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXHJcXG5cXHJcXG52b2lkIG1haW4oKSB7XFxyXFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNCgodV9tYXRyaXggKiB2ZWMzKGFfcG9zaXRpb24sIDEpKS54eSwgMCwgMSk7XFxyXFxuICAgIHZfY29sb3IgPSB1X2NvbG9yO1xcclxcbn1cIiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxyXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICBnbF9GcmFnQ29sb3IgPSB2X2NvbG9yO1xcclxcbn1cIiIsImV4cG9ydCBkZWZhdWx0IFwiYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcXHJcXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXHJcXG51bmlmb3JtIG1hdDMgdV9tYXRyaXg7XFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHVfbWF0cml4ICogdmVjMyhhX3Bvc2l0aW9uLCAxKSkueHksIDAsIDEpO1xcclxcbiAgICB2X2NvbG9yID0gZ2xfUG9zaXRpb247XFxyXFxufVwiIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXHJcXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXHJcXG52b2lkIG1haW4oKSB7XFxyXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZfY29sb3I7XFxyXFxufVwiIiwiaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiLi9DaGFydFwiO1xyXG5pbXBvcnQgRHJhdyBmcm9tIFwiLi4vcGxvdC1sb2dpYy9EcmF3XCI7XHJcbmltcG9ydCB7IENvbG9yLCBDb250ZXh0U291cmNlIH0gZnJvbSBcIi4uL21vZGVsc1wiO1xyXG5cclxuaW50ZXJmYWNlIEVudHJ5IHtcclxuICAgIGtleTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxuICAgIGNvbG9yPzogQ29sb3I7XHJcbn1cclxuXHJcbmludGVyZmFjZSBDaGFydE9wdGlvbnMge1xyXG4gICAgYm9sZEVkZ2VzOiBib29sZWFuO1xyXG4gICAgc2hvd1ZhbHVlczogYm9vbGVhbjtcclxuICAgIHZhbHVlVHlwZTogJ2ZpeGVkJyB8ICdwcmVjZW50YWdlJztcclxuICAgIHNob3dMZWdlbmQ6IGJvb2xlYW47XHJcbiAgICBsZWdlbmRQbGFlbWVudDogJ3RvcCcgfCAnYm90dG9tJyB8ICdsZWZ0JyB8ICdyaWdodCc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQaWVDaGFydCBleHRlbmRzIENoYXJ0IHtcclxuXHJcbiAgICBwdWJsaWMgZGVsZXRlTWU7XHJcblxyXG4gICAgcHJpdmF0ZSBkYXRhOiBFbnRyeVtdO1xyXG5cclxuICAgIHByaXZhdGUgb3B0aW9uczogQ2hhcnRPcHRpb25zO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQ29udGV4dFNvdXJjZSkge1xyXG4gICAgICAgIHN1cGVyKHNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICBib2xkRWRnZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaG93VmFsdWVzOiB0cnVlLFxyXG4gICAgICAgICAgICB2YWx1ZVR5cGU6ICdmaXhlZCcsXHJcbiAgICAgICAgICAgIHNob3dMZWdlbmQ6IHRydWUsXHJcbiAgICAgICAgICAgIGxlZ2VuZFBsYWVtZW50OiAnYm90dG9tJ1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgICAgICB0aGlzLmRlbGV0ZU1lID0gbmV3IERyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxsV2l0aEV4YW1wbGVEYXRhKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTm8gZGF0YSBmb3IgY2hhcnQgc2V0LiBEcmF3aW5nIHdpdGggZXhhbXBsZSBkYXRhLicpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsbFdpdGhFeGFtcGxlRGF0YSgpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBBcnJheSg1KS5tYXAoKGUsIGkpID0+ICh7XHJcbiAgICAgICAgICAgIGtleTogYGVsZW1lbnQke2l9YCxcclxuICAgICAgICAgICAgdmFsdWU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSxcclxuICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgIHI6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NiksXHJcbiAgICAgICAgICAgICAgICBnOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpLFxyXG4gICAgICAgICAgICAgICAgYjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSxcclxuICAgICAgICAgICAgICAgIGE6IDI1NVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgWCh2YWx1ZXM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5tYXBBcnJheVRvRW50cmllcyh2YWx1ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgWSh2YWx1ZXM6IG51bWJlcltdKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHRocm93IEVycm9yKCdWYWx1ZXMgb24gXCJYXCIgYXhpcyBtdXN0IGJlIHNwZWNpZmllZCBiZWZvcmUgc2V0dGluZyBcIllcIiB2YWx1ZXMuJylcclxuICAgICAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCAhPT0gdmFsdWVzLmxlbmd0aCkgdGhyb3cgRXJyb3IoJ1Bhc3NlZCBhcnJheSBkaWZmZXJzIGluIGxlbmd0aCBmcm9tIHZhbHVlcyBvbiBcIlhcIiBheGlzIGNvdW50LicpXHJcbiAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKGVudHJ5LCBpbmRleCkgPT4gZW50cnkudmFsdWUgPSB2YWx1ZXNbaW5kZXhdKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY29uZmlndXJhdGlvbihjb25maWc6IFBhcnRpYWw8Q2hhcnRPcHRpb25zPikge1xyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZm9yRWFjaChwYWlyID0+IHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIHsgW3BhaXJbMF1dOiBwYWlyWzFdIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjb2xvcnMoY29sb3JzOiBDb2xvcltdKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHRocm93IEVycm9yKCdWYWx1ZXMgb24gXCJYXCIgYXhpcyBtdXN0IGJlIHNwZWNpZmllZCBiZWZvcmUgc2V0dGluZyBcImNvbG9yXCIgdmFsdWVzLicpXHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggIT09IGNvbG9ycy5sZW5ndGgpIHRocm93IEVycm9yKCdQYXNzZWQgYXJyYXkgZGlmZmVycyBpbiBsZW5ndGggZnJvbSB2YWx1ZXMgb24gXCJYXCIgYXhpcyBjb3VudC4nKVxyXG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKChlbnRyeSwgaW5kZXgpID0+IGVudHJ5LmNvbG9yID0gY29sb3JzW2luZGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlcmllQ29sb3Ioc2VyaWU6IHN0cmluZywgY29sb3I6IENvbG9yKSB7XHJcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmRhdGEuZmluZChlbnRyeSA9PiBlbnRyeS5rZXkgPT09IHNlcmllKTtcclxuICAgICAgICBpZiAoZW50cnkgPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoYFNlcmllIHdpdGggbmFtZSAke3NlcmllfSBkb2VzbnQgZXhpc3QuYCk7XHJcbiAgICAgICAgZW50cnkuY29sb3IgPSBjb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1hcEFycmF5VG9FbnRyaWVzKGFycmF5OiBzdHJpbmdbXSk6IEVudHJ5W10ge1xyXG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoKGtleSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbnRleHRTb3VyY2UsIFJlc2l6ZU9ic2VydmVyRW50cnlVcGRhdGVkIH0gZnJvbSBcIi4uL21vZGVsc1wiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENoYXJ0IHtcclxuXHJcbiAgICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcblxyXG4gICAgcmVzaXplT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xyXG5cclxuICAgIC8vIGV2ZXJ5IHRpbWUgc2V0IHZpZXdwb3J0IHRvIHRob3NlIHZhbHVlcy5cclxuICAgIGRpc3BsYXlXaWR0aDogbnVtYmVyO1xyXG4gICAgZGlzcGxheUhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQ29udGV4dFNvdXJjZSkge1xyXG4gICAgICAgIGxldCBhbmFseXplZEVsZW1lbnQgPSBzb3VyY2U7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhbmFseXplZEVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGFuYWx5emVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFuYWx5emVkRWxlbWVudC5yZXBsYWNlKCcvXiMvJywgJycpKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFuYWx5emVkRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IGFuYWx5emVkRWxlbWVudC5nZXRDb250ZXh0KCd3ZWJnbCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhbmFseXplZEVsZW1lbnQgaW5zdGFuY2VvZiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gYW5hbHl6ZWRFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRocm93IEVycm9yKCdBcmd1bWVudCBtdXN0IGJlIHZhbGlkIElELCBIVE1MQ2FudmFzRWxlbWVudCBvciBXZWJHTFJlbmRlcmluZ0NvbnRleHQnKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVDYW52YXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3Qgc2V0IFgodmFsdWU6IHN0cmluZ1tdIHwgbnVtYmVyW10pO1xyXG4gICAgcHVibGljIGFic3RyYWN0IHNldCBZKHZhbHVlOiBudW1iZXJbXSk7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3Qgc2V0IGNvbmZpZ3VyYXRpb24oY29uZmlnOiB1bmtub3duKTtcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3KCk6IHZvaWQ7XHJcblxyXG4gICAgLy8gbW/FvGxpd2UsIMW8ZSBrb3J6eXN0YW5pZSB6IHRlZ28gUmVuZGVyQVBJIG5pZSBiZWR6aWUgdyB6YXNhZHppZSBwb3RyemVibmVcclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUNhbnZhcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzOiBSZXNpemVPYnNlcnZlckVudHJ5VXBkYXRlZFtdKSA9PiB0aGlzLm9uUmVzaXplQ2FsbGJhY2soZW50cmllcykpO1xyXG4gICAgICAgIGNvbnN0IHsgY2FudmFzIH0gPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGNhbnZhcywgeyBib3g6ICdkZXZpY2UtcGl4ZWwtY29udGVudC1ib3gnIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIC8vIGRldmljZS1waXhlbC1jb250ZW50LWJveCBpcyBub3Qgc3VwcG9ydGVkIHNvIGZhbGxiYWNrIHRvIHRoaXNcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGNhbnZhcywgeyBib3g6ICdjb250ZW50LWJveCcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25SZXNpemVDYWxsYmFjayhlbnRyaWVzOiBSZXNpemVPYnNlcnZlckVudHJ5VXBkYXRlZFtdKTogdm9pZCB7XHJcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkcHIgPSBlbnRyeS5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID8gMSA6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgICAgICBjb25zdCB7IGlubGluZVNpemUsIGJsb2NrU2l6ZSB9OiBSZXNpemVPYnNlcnZlclNpemUgPSB0aGlzLmdldFdpZHRoQW5kSGVpZ2h0KGVudHJ5KTtcclxuICAgICAgICAgICAgdGhpcy5zZXROZXdDYW52YXNTaXplKGlubGluZVNpemUsIGJsb2NrU2l6ZSwgZHByKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFdpZHRoQW5kSGVpZ2h0KGVudHJ5OiBSZXNpemVPYnNlcnZlckVudHJ5VXBkYXRlZCk6IFJlc2l6ZU9ic2VydmVyU2l6ZSB7XHJcbiAgICAgICAgaWYgKGVudHJ5LmRldmljZVBpeGVsQ29udGVudEJveFNpemUpIHJldHVybiBlbnRyeS5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplWzBdO1xyXG4gICAgICAgIGlmIChlbnRyeS5jb250ZW50Qm94U2l6ZSkgcmV0dXJuIGVudHJ5LmNvbnRlbnRCb3hTaXplWzBdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlubGluZVNpemU6IGVudHJ5LmNvbnRlbnRSZWN0LndpZHRoLFxyXG4gICAgICAgICAgICBibG9ja1NpemU6IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXROZXdDYW52YXNTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBkcHI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlXaWR0aCA9IE1hdGgucm91bmQod2lkdGggKiBkcHIpO1xyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCAqIGRwcik7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5V2lkdGggPSBkaXNwbGF5V2lkdGg7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5SGVpZ2h0ID0gZGlzcGxheUhlaWdodDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbnRleHRTb3VyY2UgfSBmcm9tIFwiLi4vbW9kZWxzXCI7XHJcbmltcG9ydCB7IFBpZUNoYXJ0IH0gZnJvbSBcIi4vUGllQ2hhcnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlcnZlQ2hhcnQodHlwZTogc3RyaW5nLCBzb3VyY2U6IENvbnRleHRTb3VyY2UpIHtcclxuICAgIHN3aXRjaCAodHlwZS50b0xvd2VyQ2FzZSgpLnRyaW0oKSkge1xyXG4gICAgICAgIGNhc2UgXCJwaWVcIjpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQaWVDaGFydChzb3VyY2UpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0eXBlfSBjaGFydCBpcyBub3QgZGVmaW5lZC5gKVxyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiTWF0aFV0aWxzIiwiaWRlbnRpdHlNYXRyaXgiLCJwcm9qZWN0aW9uTWF0cml4Iiwid2lkdGgiLCJoZWlnaHQiLCJ0cmFuc2xhdGlvbk1hdHJpeCIsInR4IiwidHkiLCJyb3RhdGlvbk1hdHJpeCIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiTWF0aCIsIlBJIiwicyIsInNpbiIsImMiLCJjb3MiLCJzY2FsZU1hdHJpeCIsInN4Iiwic3kiLCJhcnJheVRvTWF0cml4IiwiYXJyIiwic2l6ZSIsInJlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwic2xpY2UiLCJtdWx0aXBseU1hdHJpY2VzIiwiRiIsIlMiLCJpbmNsdWRlcyIsInBvdyIsInNxcnQiLCJBIiwidGhpcyIsIkIiLCJtYXAiLCJyb3ciLCJfIiwiaiIsInJlZHVjZSIsImFjYyIsIm4iLCJmbGF0IiwiY3JlYXRlUHJvZ3JhbUZyb21TY3JpcHRzIiwiZ2wiLCJ2cyIsImZzIiwicHJvZ3JhbSIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiY29uc29sZSIsImxvZyIsImdldFByb2dyYW1JbmZvTG9nIiwiZGVsZXRlUHJvZ3JhbSIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJwcmVwYXJlVmlldyIsInZpZXdwb3J0IiwiY2FudmFzIiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsImdldFRyYW5zZm9ybWF0aW9uTWF0cml4IiwiZHJhd1V0aWxzIiwibWF0cml4IiwidHlwZSIsInNvdXJjZSIsInNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJkZWxldGVTaGFkZXIiLCJEcmF3IiwiZHJhd1JlY3QiLCJ1c2VQcm9ncmFtIiwicG9zaXRpb25BdHRyaWJ1dGVMb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwiY29sb3JVbmlmb3JtTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJtYXRyaXhVbmlmb3JtTG9jYXRpb24iLCJkYXRhQnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJJbnQxNkFycmF5IiwiU1RBVElDX0RSQVciLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInVuaWZvcm1NYXRyaXgzZnYiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiU0hPUlQiLCJ1bmlmb3JtNGYiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVTIiwiQllURVNfUEVSX0VMRU1FTlQiLCJkcmF3RiIsInBvc2l0aW9uQnVmZmVyIiwic2V0R2VvbWV0cnkiLCJGTE9BVCIsInByaW1pdGl2ZVR5cGUiLCJGbG9hdDMyQXJyYXkiLCJQaWVDaGFydCIsImNvbnN0cnVjdG9yIiwiYW5hbHl6ZWRFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlcGxhY2UiLCJIVE1MQ2FudmFzRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiRXJyb3IiLCJpbml0aWFsaXplQ2FudmFzIiwicmVzaXplT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImVudHJpZXMiLCJvblJlc2l6ZUNhbGxiYWNrIiwib2JzZXJ2ZSIsImJveCIsImV4IiwiZm9yRWFjaCIsImVudHJ5IiwiZHByIiwiZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwiZ2V0V2lkdGhBbmRIZWlnaHQiLCJzZXROZXdDYW52YXNTaXplIiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsImRpc3BsYXlXaWR0aCIsInJvdW5kIiwiZGlzcGxheUhlaWdodCIsInN1cGVyIiwib3B0aW9ucyIsImJvbGRFZGdlcyIsInNob3dWYWx1ZXMiLCJ2YWx1ZVR5cGUiLCJzaG93TGVnZW5kIiwibGVnZW5kUGxhZW1lbnQiLCJkYXRhIiwiZGVsZXRlTWUiLCJkcmF3IiwiZmlsbFdpdGhFeGFtcGxlRGF0YSIsIndhcm4iLCJBcnJheSIsImUiLCJ2YWx1ZSIsImZsb29yIiwicmFuZG9tIiwiY29sb3IiLCJyIiwiZyIsImIiLCJhIiwiWCIsInZhbHVlcyIsIm1hcEFycmF5VG9FbnRyaWVzIiwiWSIsImluZGV4IiwiY29uZmlndXJhdGlvbiIsImNvbmZpZyIsInBhaXIiLCJhc3NpZ24iLCJjb2xvcnMiLCJzZXRTZXJpZUNvbG9yIiwic2VyaWUiLCJmaW5kIiwidW5kZWZpbmVkIiwiYXJyYXkiLCJzZXJ2ZUNoYXJ0IiwidG9Mb3dlckNhc2UiLCJ0cmltIl0sInNvdXJjZVJvb3QiOiIifQ==