var r={d:(t,e)=>{for(var a in e)r.o(e,a)&&!r.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},o:(r,t)=>Object.prototype.hasOwnProperty.call(r,t)},t={};r.d(t,{Z:()=>a});class e{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(r,t){return[2/r,0,0,0,-2/t,0,-1,1,1]}translationMatrix(r,t){return[1,0,0,0,1,0,r,t,1]}rotationMatrix(r){const t=r/180*Math.PI,e=Math.sin(t),a=Math.cos(t);return[a,-e,0,e,a,0,0,0,1]}scaleMatrix(r,t){return[r,0,0,0,t,0,0,0,1]}arrayToMatrix(r,t){const e=[];for(let a=0;a<r.length;a+=t)e.push(r.slice(a,a+t));return e}multiplyMatrices(r,t){if(r.length===t.length&&[1,4,9,16].includes(r.length)){const e=Math.sqrt(r.length),a=this.arrayToMatrix(r,e),o=this.arrayToMatrix(t,e);return a.map(((r,t)=>o[0].map(((e,i)=>r.reduce(((r,e,n)=>r+a[t][n]*o[n][i]),0))))).flat(1)}}}class a{drawF(r){const t=this.createProgramFromScripts(r);r.useProgram(t);const a=r.getAttribLocation(t,"a_position"),o=r.getUniformLocation(t,"u_matrix");r.viewport(0,0,r.canvas.width,r.canvas.height),r.clearColor(0,0,0,0),r.clear(r.COLOR_BUFFER_BIT);const i=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,i),this.setGeometry(r),r.enableVertexAttribArray(a);const n=r.FLOAT;r.vertexAttribPointer(a,2,n,!1,0,0);const c=new e,s=c.identityMatrix(),l=c.projectionMatrix(r.canvas.width,r.canvas.height),h=c.translationMatrix(0,0),m=c.rotationMatrix(0),g=c.scaleMatrix(1,1);let u=c.multiplyMatrices(s,l);u=c.multiplyMatrices(u,h),u=c.multiplyMatrices(u,m),u=c.multiplyMatrices(u,g),r.uniformMatrix3fv(o,!1,u);const d=r.TRIANGLES;r.drawArrays(d,0,18)}createProgramFromScripts(r){const t=this.createShader(r,r.VERTEX_SHADER,"attribute vec2 a_position;\r\nvarying vec4 v_color;\r\nuniform mat3 u_matrix;\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = gl_Position;\r\n}"),e=this.createShader(r,r.FRAGMENT_SHADER,"precision mediump float;\r\nvarying vec4 v_color;\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}");return this.createProgram(r,t,e)}createShader(r,t,e){const a=r.createShader(t);if(r.shaderSource(a,e),r.compileShader(a),r.getShaderParameter(a,r.COMPILE_STATUS))return a;console.log(r.getShaderInfoLog(a)),r.deleteShader(a)}createProgram(r,t,e){const a=r.createProgram();if(r.attachShader(a,t),r.attachShader(a,e),r.linkProgram(a),r.getProgramParameter(a,r.LINK_STATUS))return a;console.log(r.getProgramInfoLog(a)),r.deleteProgram(a)}setGeometry(r){r.bufferData(r.ARRAY_BUFFER,new Float32Array([0,0,30,0,0,150,0,150,30,0,30,150,30,0,100,0,30,30,30,30,100,0,100,30,30,60,67,60,30,90,30,90,67,60,67,90]),r.STATIC_DRAW)}}var o=t.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,