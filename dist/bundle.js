var t={744:function(t){t.exports=function(){var t="rgba(100, 100, 100, 0.7)",e="rgba(255, 255, 255, 0.8)",i="round",n=(function(){function t(t){this.value=t}function e(e){var i,n;function s(i,n){try{var r=e[i](n),a=r.value;a instanceof t?Promise.resolve(a.value).then((function(t){s("next",t)}),(function(t){s("throw",t)})):o(r.done?"return":"normal",r.value)}catch(t){o("throw",t)}}function o(t,e){switch(t){case"return":i.resolve({value:e,done:!0});break;case"throw":i.reject(e);break;default:i.resolve({value:e,done:!1})}(i=i.next)?s(i.key,i.arg):n=null}this._invoke=function(t,e){return new Promise((function(o,r){var a={key:t,arg:e,resolve:o,reject:r,next:null};n?n=n.next=a:(i=n=a,s(t,e))}))},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),s=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},h=function(){function o(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;return n(this,o),this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.width=i,this._canvas.height=i,this._context.fillStyle=s,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._size=i,this._patternColor=r,this}return s(o,[{key:"setStrokeProps",value:function(){this._context.strokeStyle=this._patternColor,this._context.lineWidth=this._size/10,this._context.lineJoin=i,this._context.lineCap=i}},{key:"setFillProps",value:function(){this._context.fillStyle=this._patternColor}}]),o}(),c=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawPlus(),this.drawPlus(t,t),this._context.stroke(),this._canvas}},{key:"drawPlus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,s=i/4;this._context.moveTo(s+t,0+e),this._context.lineTo(s+t,n+e),this._context.moveTo(0+t,s+e),this._context.lineTo(n+t,s+e),this._context.closePath()}}]),e}(h),l=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawCross(),this.drawCross(t,t),this._context.stroke(),this._canvas}},{key:"drawCross",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,n=2;this._context.moveTo(t+n,e+n),this._context.lineTo(i-n+t,i-n+e),this._context.moveTo(t+n,i-n+e),this._context.lineTo(i-n+t,e+n),this._context.closePath()}}]),e}(h),u=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDash(),this.drawDash(t,t),this._context.stroke(),this._canvas}},{key:"drawDash",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,n=2;this._context.moveTo(t+n,e+n),this._context.lineTo(i-n+t,i-n+e),this._context.closePath()}}]),e}(h),_=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new l).drawCross.call(this),(new u).drawDash.call(this,t,t),this._context.stroke(),this._canvas}}]),e}(h),d=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDot(),this.drawDot(t,t),this._context.fill(),this._canvas}},{key:"drawDot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._size/10,n=this._size/4,s=n+t,o=n+e;this._context.moveTo(s+n,o),this._context.arc(s,o,i,0,2*Math.PI),this._context.closePath()}}]),e}(h),f=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new u).drawDash.call(this,t,t),this._context.closePath(),this._context.stroke(),this.setFillProps(),(new d).drawDot.call(this),this._context.fill(),this._canvas}}]),e}(h),p=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setFillProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.fill(),this._canvas}}]),e}(d),x=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setStrokeProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.stroke(),this._canvas}}]),e}(d),v=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawLine(),this.drawLine(t,t),this._context.stroke(),this._canvas}},{key:"drawLine",value:function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=this._size/4;this._context.moveTo(0,e+t),this._context.lineTo(this._size,e+t),this._context.closePath()}}]),e}(h),g=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),v.prototype.drawTile.call(this),this._canvas}}]),e}(v),w=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawWeave(0,0),this._context.stroke(),this._canvas}},{key:"drawWeave",value:function(t,e){var i=this._size,n=i/2;this._context.moveTo(t+1,e+1),this._context.lineTo(n-1,n-1),this._context.moveTo(n+1,i-1),this._context.lineTo(i-1,n+1),this._context.closePath()}}]),e}(h),y=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawZigzag(),this.drawZigzag(this._size/2),this._context.stroke(),this._canvas}},{key:"drawZigzag",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this._size,i=e/4,n=e/2,s=e/10;this._context.moveTo(0,s+t),this._context.lineTo(i,n-s+t),this._context.lineTo(n,s+t),this._context.lineTo(e-i,n-s+t),this._context.lineTo(e,s+t)}}]),e}(h),P=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),y.prototype.drawTile.call(this),this._canvas}}]),e}(y),T=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiagonalLine(),this.drawDiagonalLine(t,t),this._context.stroke(),this._canvas}},{key:"drawDiagonalLine",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,s=1;this._context.moveTo(n-s-t,-1*s+e),this._context.lineTo(i+1-t,n+1+e),this._context.closePath()}}]),e}(h),k=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),T.prototype.drawTile.call(this),this._canvas}}]),e}(T),b=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawSquare(),this.drawSquare(t,t),this._context.fill(),this._canvas}},{key:"drawSquare",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,s=i/20;this._context.fillRect(t+s,e+s,n-2*s,n-2*s),this._context.closePath()}}]),e}(h),m=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawBox(),this.drawBox(t,t),this._context.stroke(),this._canvas}},{key:"drawBox",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,s=i/20;this._context.strokeRect(t+s,e+s,n-4*s,n-4*s),this._context.closePath()}}]),e}(h),E=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawTriangle(),this.drawTriangle(t,t),this._context.fill(),this._canvas}},{key:"drawTriangle",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,s=i/4;this._context.moveTo(s+t,e),this._context.lineTo(n+t,n+e),this._context.lineTo(t,n+e),this._context.closePath()}}]),e}(h),O=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size;return this._context.translate(t,t),this._context.rotate(180*Math.PI/180),E.prototype.drawTile.call(this),this._canvas}}]),e}(E),D=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.fill(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,s=i/4;this._context.moveTo(s+t,e),this._context.lineTo(n+t,s+e),this._context.lineTo(s+t,n+e),this._context.lineTo(t,s+e),this._context.closePath()}}]),e}(h),S=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),s(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.stroke(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2-1,s=i/4;this._context.moveTo(s+t,e+1),this._context.lineTo(n+t,s+e),this._context.lineTo(s+t,n+e),this._context.lineTo(t+1,s+e),this._context.closePath()}}]),e}(D),L={plus:c,cross:l,dash:u,"cross-dash":_,dot:d,"dot-dash":f,disc:p,ring:x,line:v,"line-vertical":g,weave:w,zigzag:y,"zigzag-vertical":P,diagonal:T,"diagonal-right-left":k,square:b,box:m,triangle:E,"triangle-inverted":O,diamond:D,"diamond-box":S},z=[];function I(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=Object.keys(L);t.forEach((function(t){e.splice(e.indexOf(t),1)}));var i=Math.floor(Math.random()*e.length);return e[i]}function R(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"square",e=arguments[1],i=arguments[2],n=arguments[3],s=document.createElement("canvas"),o=s.getContext("2d"),r=2*n,a=new(0,z[t])(n,e,i),h=o.createPattern(a.drawTile(),"repeat");return s.width=r,s.height=r,h.shapeType=t,h}return o(z,L,{circle:L.disc,"triangle-vertical":L["triangle-inverted"],"line-horizontal":L.line,"line-diagonal-lr":L.diagonal,"line-diagonal-rl":L["diagonal-right-left"],"zigzag-horizontal":L.zigzag,"diamond-outline":L["diamond-box"]}),{draw:R,generate:function(t){var e=void 0,i=void 0;return t.map((function(t,n,s){var o=void 0;return 0===n?(o=I(),e=i=o):n===s.length-1?o=I([i,e]):(o=I([i]),i=o),R(o,t)}))}}}()}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{i.d(n,{Z:()=>_});const t=class{static sliceOrFill(t,e,i){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=i?i:0);return t}static mergeRight(t,e){const i=Object.keys(e);Object.entries(t).forEach((t=>{const n=t[0];if(i.includes(n)){const i=t[1];e[n]=i}}))}};class e{constructor(t){let e=t;if("string"==typeof e&&(e=document.getElementById(e.replace("/^#/",""))),e instanceof HTMLCanvasElement)this.context=e.getContext("2d");else{if(!(e instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=e}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1,showLabels:!0},this.seriesData=[]}setChartOptions(e){t.mergeRight(e,this.chartOptions)}setSerieOptions(e,i){i?i.forEach((i=>{const n=this.seriesData.find((t=>t.name==i));n?t.mergeRight(e,n.options):console.warn(`Serie with name ${i} not found.`)})):this.seriesData.forEach((i=>t.mergeRight(e,i.options)))}}var s=i(744);function o(t,e,i){if(t.fillStyle=i,null!=e)try{t.fillStyle=(0,s.draw)(e,i,"black")}catch(t){console.warn(`${e} is invalid shape. See documentation.`)}}class r{constructor(t){this.TITLE_AREA_MULTIPIER=.1,this.LEGEND_AREA_MULTIPIER=.1,this.LEGEND_PADDING_MULTIPIER=.75,this.SERIE_LEGEND_PER_LEVEL=5,this.SERIE_PADDING_MULTIPIER=.6,this.ctx=t}prepareChartForDrawing(t,e){const{ctx:i}=this,{width:n,height:s}=i.canvas;this.ctx.clearRect(0,0,n,s);const o=[];let r=this.getFrame(0,0,n,s,"content");if(this.strokeFrame(r,"gray",3),t.showTitle&&t.title){const e=this.getTitleFrame(r);o.push(e),this.drawTitle(t.title,e),r=this.cutFrames(r,e)}if(t.showLegend){const t=this.getLegendFrame(r);o.push(t),this.drawLegend(e,t),r=this.cutFrames(r,t)}return o.push(r),o}getTitleFrame(t){const{x:e,y:i,w:n,h:s}=t,o=s*this.TITLE_AREA_MULTIPIER;return this.getFrame(e,i,n,o,"title")}getLegendFrame(t){const{x:e,y:i,w:n,h:s}=t,o=s*this.LEGEND_AREA_MULTIPIER;return this.getFrame(e,i+s-o,n,o,"legend")}getFrame(t,e,i,n,s){return{id:s,x:t,y:e,w:i,h:n}}cutFrames(t,e){const i=t.h===e.h?t.h:t.h-e.h,n=t.y===e.y?t.y+e.h:t.y,{x:s,w:o,id:r}=t;return{x:s,y:n,w:o,h:i,id:r}}strokeFrame(t,e,i){this.ctx.strokeStyle=e,this.ctx.lineWidth=null!=i?i:1,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black"}drawGridHorizontalLines(t,e){const{ctx:i}=this,n=Math.max(...t.map((t=>Math.max(...t.values)))),{tickCount:s,tickHeight:o}=function(t,e){const i=t/10,n=Math.pow(10,Math.floor(Math.log10(i))),s=i/n,o=(s<10?[1,1.5,2,3,5,7,10].find((t=>t>s)):10)*n;return{tickHeight:o,tickCount:Math.ceil(t/o)}}(n),r=e.h/(s+1);i.lineWidth=1,i.strokeStyle="gray";for(let t=1;t<=s+1;t++){const n=e.y+r*t,a=String((s+1-t)*o),{width:h}=this.ctx.measureText(a);i.fillText(a,e.x,n),i.beginPath(),i.moveTo(e.x+h,n),i.lineTo(e.x+e.w,n),i.stroke(),i.closePath()}return{tickCount:s,tickHeight:o}}drawTitle(t,e){const{ctx:i}=this,{x:n,y:s,w:o,h:r}=e;i.font=`${Math.floor(r/2)}px sans-serif`;const a=i.measureText(t),h=n+o/2-a.width/2,c=s+r/2+a.actualBoundingBoxAscent/2;i.fillText(t,h,c,o),this.strokeFrame(e,"gray",1)}drawLegend(t,e){const i=e.w*this.LEGEND_PADDING_MULTIPIER;e.x=e.x+(e.w-i)/2,e.w=i;const n=Math.ceil(t.length/this.SERIE_LEGEND_PER_LEVEL),s=e.w/Math.min(t.length,this.SERIE_LEGEND_PER_LEVEL),o=e.h/n;for(let i=0;i<t.length;i++)this.drawSingleSerieLegend({x:e.x+s*(i%this.SERIE_LEGEND_PER_LEVEL),y:e.y+o*Math.floor(i/this.SERIE_LEGEND_PER_LEVEL),w:s,h:o},t[i])}drawSingleSerieLegend(t,e){const{ctx:i}=this,{options:n,name:s}=e;o(i,n.shape,n.color),i.strokeStyle="black",i.lineWidth=3;const r=Math.min(t.w,t.h),a=r*this.SERIE_PADDING_MULTIPIER,h={x:t.x+(r-a)/2,y:t.y+(r-a)/2,w:a,h:a};i.fillRect(h.x,h.y,h.w,h.h),i.strokeRect(h.x,h.y,h.w,h.h);const c={x:t.x+r,y:t.y+r/2};i.fillStyle="black",i.font=`${Math.floor(r/4)}px sans-serif`;const{actualBoundingBoxAscent:l}=i.measureText(s);i.fillText(s,c.x,c.y+l/2,t.w-r)}}class a extends r{constructor(t){super(t),this.LABELS_AREA_MULTIPIER=.05}prepareChartForDrawing(t,e){const i=super.prepareChartForDrawing(t,e);if(t.showLabels){const t=i.find((t=>"content"===t.id)),e=this.getLabelsFrame(t);console.log(e,t);const n=this.cutFrames(t,e);t.x=n.x,t.y=n.y,t.w=n.w,t.h=n.h,i.push(e)}return i}getLabelsFrame(t){const{x:e,y:i,w:n,h:s}=t,o=s*this.LABELS_AREA_MULTIPIER;return this.getFrame(e,i+s-o,n,o,"labels")}}class h{constructor(t){this.COL_SPACE_SIZE=.75,this.VALUE_BOTTOM_PADDING=4,this.ctx=t,this.plotKit=new a(t)}drawBars(t,e,i){const n=this.plotKit.prepareChartForDrawing(i,e),s=n.find((t=>"content"===t.id)),o=n.find((t=>"labels"===t.id)),{tickCount:r,tickHeight:a}=this.plotKit.drawGridHorizontalLines(e,s),h=s.h/((r+1)*a),c=e.length,l=t.length,u=s.w/l,_=u*(1-this.COL_SPACE_SIZE),d=u-2*_,f=d/c;this.ctx.fillStyle="black";const p=s.y+s.h,x=Math.floor(.5*f);this.ctx.font=`${x}px sans-serif`;for(let n=0;n<l;n++){const r=s.x+n*u+_;if(i.showLabels){this.ctx.font=`${o.h}px sans-serif`,this.ctx.fillStyle="black";const{width:e}=this.ctx.measureText(t[n]),i=r+d/2-e/2,a=s.y+s.h+.8*o.h;this.ctx.fillText(t[n],i,a,u),this.ctx.font=`${x}px sans-serif`}for(let t=0;t<c;t++){const i=r+t*f,s=e[t].values[n]*h,o=p-s;this.drawBar(i,o,f,s,e[t].options,e[t].values[n])}}}drawBar(t,e,i,n,s,o){this.fillBar(t,e,i,n,s);const{showValue:r,borderWidth:a}=s;a&&this.strokeBar(t,e,i,n,a),r&&this.addBarValue(t,e,i,o)}fillBar(t,e,i,n,s){const{color:r,shape:a}=s;o(this.ctx,a,r),this.ctx.fillRect(t,e,i,n)}strokeBar(t,e,i,n,s){this.ctx.lineWidth=n?s:1,this.ctx.beginPath(),this.ctx.moveTo(t,e+n),this.ctx.lineTo(t,e),this.ctx.lineTo(t+i,e),this.ctx.lineTo(t+i,e+n),this.ctx.strokeStyle="black",this.ctx.stroke()}addBarValue(t,e,i,n){this.ctx.fillStyle="black";const s=String(n),o=t+i/2-this.ctx.measureText(s).width/2;this.ctx.fillText(s,o,e-this.VALUE_BOTTOM_PADDING,i)}}class c extends e{constructor(t){super(t),this.plot=new h(this.context)}set X(t){this.dataLabels=t}set Y(e){const{length:i}=this.dataLabels;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const n=e.map((e=>t.sliceOrFill(e,i)));this.seriesData=n.map(((t,e)=>this.getDefaultSerieObject(t,e)))}set serieNames(t){const e=Math.min(t.length,this.seriesData.length);for(let i=0;i<e;i++)this.seriesData[i].name=t[i]}getDefaultSerieObject(t,e){return{values:t,name:`serie${e}`,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,borderWidth:0,shape:void 0}}}draw(){this.plot.drawBars(this.dataLabels,this.seriesData,this.chartOptions)}}class l{constructor(t){this.RADIUS_DIVIDER=2.5,this.ctx=t,this.plotKit=new r(t)}drawPie(t,e){const{ctx:i}=this,n=this.plotKit.prepareChartForDrawing(e,t).find((t=>"content"===t.id)),s=this.mapSeriesToPiePartData(t),r=Math.min(n.w,n.h)/this.RADIUS_DIVIDER,a={x:n.x+n.w/2,y:n.y+n.h/2};let h=0;i.strokeStyle="black",i.font=`${Math.floor(r/5)}px sans-serif`,s.forEach((t=>{this.makePiePartPath(a.x,a.y,r,h,h+t.radians),o(i,t.shape,t.color),i.fill(),t.borderWidth>0&&this.strokeBorder(t.borderWidth),t.showValue&&this.addPieValue(t.value,a.x,a.y,r,h+t.radians/2),h+=t.radians}))}mapSeriesToPiePartData(t){const e=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({radians:2*t.value*Math.PI/e,color:t.options.color,borderWidth:t.options.borderWidth,shape:t.options.shape,showValue:t.options.showValue,value:t.value})))}makePiePartPath(t,e,i,n,s){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.arc(t,e,i,n,s),this.ctx.lineTo(t,e)}strokeBorder(t){this.ctx.lineWidth=t,this.ctx.stroke()}addPieValue(t,e,i,n,s){const o=String(t),{width:r,actualBoundingBoxAscent:a}=this.ctx.measureText(o),h=e+Math.cos(s)*(n+r)-r/2,c=i+Math.sin(s)*(n+a)+a/2;this.ctx.fillStyle="black",this.ctx.fillText(o,h,c)}}class u extends e{constructor(t){super(t),this.plot=new l(this.context)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(e){const{length:i}=this.seriesData;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const n=t.sliceOrFill(e,i);this.seriesData.map(((t,e)=>{t.value=n[e]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,borderWidth:0,shape:void 0}}}draw(){this.plot.drawPie(this.seriesData,this.chartOptions)}}function _(t,e){switch(t.toLowerCase().trim()){case"pie":return new u(e);case"bar":return new c(e);default:throw new Error(`${t} chart is not defined.`)}}})();var s=n.Z;export{s as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,