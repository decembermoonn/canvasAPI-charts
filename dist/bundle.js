var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{Z:()=>d});class r{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(t,e){return[2/t,0,0,0,2/e,0,-1,-1,1]}translationMatrix(t,e){return[1,0,0,0,1,0,t,e,1]}rotationMatrix(t){const e=t/180*Math.PI,r=Math.sin(e),o=Math.cos(e);return[o,-r,0,r,o,0,0,0,1]}scaleMatrix(t,e){return[t,0,0,0,e,0,0,0,1]}arrayToMatrix(t,e){const r=[];for(let o=0;o<t.length;o+=e)r.push(t.slice(o,o+e));return r}multiplyMatrices(t,e){if(t.length===e.length&&[1,4,9,16].includes(t.length)){const r=Math.sqrt(t.length),o=this.arrayToMatrix(t,r),i=this.arrayToMatrix(e,r);return o.map(((t,e)=>i[0].map(((r,n)=>t.reduce(((t,r,a)=>t+o[e][a]*i[a][n]),0))))).flat(1)}}}function o(t,e,r){const o=function(t,e,r){const o=t.createProgram();if(t.attachShader(o,e),t.attachShader(o,r),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS))return o;console.log(t.getProgramInfoLog(o)),t.deleteProgram(o)}(t,a(t,t.VERTEX_SHADER,e),a(t,t.FRAGMENT_SHADER,r));return o}function i(t){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)}function n(t){const e=new r,o=e.identityMatrix(),i=e.projectionMatrix(t.canvas.width,t.canvas.height),n=e.translationMatrix(0,0),a=e.rotationMatrix(0),s=e.scaleMatrix(1,1);let c=e.multiplyMatrices(o,i);return c=e.multiplyMatrices(c,n),c=e.multiplyMatrices(c,a),c=e.multiplyMatrices(c,s),c}function a(t,e,r){const o=t.createShader(e);if(t.shaderSource(o,r),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS))return o;console.log(t.getShaderInfoLog(o)),t.deleteShader(o)}const s="attribute vec2 a_position;\r\nuniform mat3 u_matrix;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n}",c="precision mediump float;\r\nuniform vec4 u_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = u_color;\r\n}";class l{getTickInfo(t,e){const r=t/e,o=Math.pow(10,Math.floor(Math.log10(r))),i=r/o,n=(i<10?[1,1.5,2,3,5,7,10].find((t=>t>i)):10)*o;return{tickHeight:n,tickCount:Math.ceil(t/n)}}drawLines(t,e){const r=o(t,s,c),a=t.getAttribLocation(r,"a_position"),l=t.getUniformLocation(r,"u_color"),h=t.getUniformLocation(r,"u_matrix"),u=n(t),f=e[0],d=Math.max(...f.map(Math.abs)),m=this.getTickInfo(d,8),g=t.canvas.width,v=t.canvas.height,p=Math.floor(Math.min(g,v)/100),b=(v-2*p)/7,A=[],x=p,_=g-p;for(let t=1;t<=m.tickCount;t++){const e=t*b;A.push(x,e,_,e)}console.log(A);const R=t.createBuffer();return t.bindBuffer(t.ARRAY_BUFFER,R),t.bufferData(t.ARRAY_BUFFER,new Int16Array(A),t.STATIC_DRAW),i(t),t.useProgram(r),t.uniform4f(l,.7,.7,.7,1),t.uniformMatrix3fv(h,!1,u),t.useProgram(r),t.enableVertexAttribArray(a),t.bindBuffer(t.ARRAY_BUFFER,R),t.vertexAttribPointer(a,2,t.SHORT,!1,0,0),t.drawArrays(t.LINES,0,A.length/2),m.tickCount*m.tickHeight}drawBars(t,e,r){const i=o(t,s,c),a=t.getAttribLocation(i,"a_position"),l=t.getUniformLocation(i,"u_color"),h=t.getUniformLocation(i,"u_matrix"),u=n(t),f=t.canvas.width,d=t.canvas.height,m=Math.floor(Math.min(f,d)/100),g=f-2*m,v=(d-2*m)/r,p=[],b=e[0].length,A=g/b;for(let t=0;t<b;t++){const r=m+e[0][t]*v,o=m+A*t+A/5,i=m+A*(t+1)-A/5;p.push(o,m,o,r,i,r),p.push(o,m,i,m,i,r)}const x=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,x),t.bufferData(t.ARRAY_BUFFER,new Float32Array(p),t.STATIC_DRAW),t.useProgram(i),t.uniformMatrix3fv(h,!1,u),t.enableVertexAttribArray(a),t.bindBuffer(t.ARRAY_BUFFER,x);for(let e=0;e<b;e++)t.uniform4f(l,Math.random(),Math.random(),Math.random(),1),t.vertexAttribPointer(a,2,t.FLOAT,!1,0,12*e*Float32Array.BYTES_PER_ELEMENT),t.drawArrays(t.TRIANGLES,0,12)}drawRect(t){const e=o(t,"attribute vec2 a_position;\r\nuniform vec4 u_color;\r\nuniform mat3 u_matrix;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = u_color;\r\n}","precision mediump float;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}"),r=t.getAttribLocation(e,"a_position"),a=t.getUniformLocation(e,"u_color"),s=t.getUniformLocation(e,"u_matrix"),c=n(t),l=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,l),t.bufferData(t.ARRAY_BUFFER,new Int16Array([0,0,0,50,50,50,0,0,50,0,50,50]),t.STATIC_DRAW),i(t),t.useProgram(e),t.uniformMatrix3fv(s,!1,c),t.enableVertexAttribArray(r),t.uniform4f(a,.5,.5,.5,1),t.bindBuffer(t.ARRAY_BUFFER,l),t.vertexAttribPointer(r,2,t.SHORT,!1,0,0),t.drawArrays(t.TRIANGLES,0,3),t.enableVertexAttribArray(r),t.uniform4f(a,.1,.5,.9,1),t.bindBuffer(t.ARRAY_BUFFER,l),t.vertexAttribPointer(r,2,t.SHORT,!1,0,6*Int16Array.BYTES_PER_ELEMENT),t.drawArrays(t.TRIANGLES,0,3)}drawF(t){const e=o(t,"attribute vec2 a_position;\r\nvarying vec4 v_color;\r\nuniform mat3 u_matrix;\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = gl_Position;\r\n}","precision mediump float;\r\nvarying vec4 v_color;\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}");t.useProgram(e);const r=t.getAttribLocation(e,"a_position"),a=t.getUniformLocation(e,"u_matrix");i(t);const s=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,s),this.setGeometry(t),t.enableVertexAttribArray(r);const c=t.FLOAT;t.vertexAttribPointer(r,2,c,!1,0,0);const l=n(t);t.uniformMatrix3fv(a,!1,l);const h=t.TRIANGLES;t.drawArrays(h,0,18)}setGeometry(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,30,0,0,150,0,150,30,0,30,150,30,0,100,0,30,30,30,30,100,0,100,30,30,60,67,60,30,90,30,90,67,60,67,90]),t.STATIC_DRAW)}}class h{constructor(t){let e=t;if("string"==typeof e&&(e=document.getElementById(e.replace("/^#/",""))),e instanceof HTMLCanvasElement)this.context=e.getContext("webgl");else{if(!(e instanceof WebGLRenderingContext))throw Error("Argument must be valid ID, HTMLCanvasElement or WebGLRenderingContext");this.context=e}this.initializeCanvas()}initializeCanvas(){this.resizeObserver=new ResizeObserver((t=>this.onResizeCallback(t)));const{canvas:t}=this.context;try{this.resizeObserver.observe(t,{box:"device-pixel-content-box"})}catch(e){this.resizeObserver.observe(t,{box:"content-box"})}}onResizeCallback(t){t.forEach((t=>{const e=t.devicePixelContentBoxSize?1:window.devicePixelRatio,{inlineSize:r,blockSize:o}=this.getWidthAndHeight(t);console.log(`Resize to ${r} x ${o}, dpr ${e}`)}))}getWidthAndHeight(t){return t.devicePixelContentBoxSize?t.devicePixelContentBoxSize[0]:t.contentBoxSize?t.contentBoxSize[0]:{inlineSize:t.contentRect.width,blockSize:t.contentRect.height}}setNewCanvasSize(t,e,r){const o=Math.round(t*r),i=Math.round(e*r);this.displayWidth=o,this.displayHeight=i}}class u extends h{constructor(t){super(t),this.optionsForChart={title:"Untitled",showTitle:!0,showLegend:!1},this.optionsForSeries=[]}set X(t){this.labels=t}set Y(t){const{length:e}=this.labels;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const r=t.map((t=>this.sliceOrFill(t,e)));this.values=r;let o=1;this.optionsForSeries=this.values.map((()=>this.getDefaultSerieObject(o++)))}set options(t){const e=Object.keys(this.optionsForChart);Object.entries(t).forEach((t=>{const r=t[0];if(e.includes(r)){const e=t[1];this.optionsForChart[r]=e}}))}getDefaultSerieObject(t){return{serieName:`serie${t}`,color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLables:!1,showOnLegend:!1,edgeThickness:0}}updateSerieOptions(t,e){const r=Object.keys(t);Object.entries(e).forEach((e=>{const o=e[0];if(r.includes(o)){const r=e[1];t[o]=r}}))}setSerieOptions(t,e){e&&e.length?e.forEach((e=>{const r=this.optionsForSeries.find((t=>t.serieName===e));r?this.updateSerieOptions(r,t):console.warn(`Serie with name ${e} not found.`)})):this.optionsForSeries.forEach((e=>this.updateSerieOptions(e,t))),console.log(this.optionsForSeries)}sliceOrFill(t,e,r){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=r?r:0);return t}set configuration(t){throw new Error("Method not implemented.")}draw(){console.log(this.labels,this.values);const t=new l,e=t.drawLines(this.context,this.values);t.drawBars(this.context,this.values,e)}}class f extends h{constructor(t){super(t),this.options={boldEdges:!1,showValues:!0,valueType:"fixed",showLegend:!0,legendPlaement:"bottom"},this.data=[],this.deleteMe=new l}draw(){this.data.length||(this.fillWithExampleData(),console.warn("No data for chart set. Drawing with example data."))}fillWithExampleData(){this.data=Array(5).map(((t,e)=>({key:`element${e}`,value:Math.floor(10*Math.random()),color:{r:Math.floor(256*Math.random()),g:Math.floor(256*Math.random()),b:Math.floor(256*Math.random()),a:255}})))}set X(t){this.data=this.mapArrayToEntries(t)}set Y(t){if(!this.data)throw Error('Values on "X" axis must be specified before setting "Y" values.');if(this.data.length!==t.length)throw Error('Passed array differs in length from values on "X" axis count.');this.data.forEach(((e,r)=>e.value=t[r]))}set configuration(t){Object.entries(t).forEach((t=>{Object.assign(this.options,{[t[0]]:t[1]})}))}set colors(t){if(!this.data)throw Error('Values on "X" axis must be specified before setting "color" values.');if(this.data.length!==t.length)throw Error('Passed array differs in length from values on "X" axis count.');this.data.forEach(((e,r)=>e.color=t[r]))}setSerieColor(t,e){const r=this.data.find((e=>e.key===t));if(null==r)throw new Error(`Serie with name ${t} doesnt exist.`);r.color=e}mapArrayToEntries(t){return t.map((t=>({key:t,value:0})))}}function d(t,e){switch(t.toLowerCase().trim()){case"pie":return new f(e);case"bar":return new u(e);default:throw new Error(`${t} chart is not defined.`)}}var m=e.Z;export{m as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,