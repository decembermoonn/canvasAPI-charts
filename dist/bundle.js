var t={744:function(t){t.exports=function(){var t="rgba(100, 100, 100, 0.7)",e="rgba(255, 255, 255, 0.8)",i="round",n=(function(){function t(t){this.value=t}function e(e){var i,n;function o(i,n){try{var r=e[i](n),a=r.value;a instanceof t?Promise.resolve(a.value).then((function(t){o("next",t)}),(function(t){o("throw",t)})):s(r.done?"return":"normal",r.value)}catch(t){s("throw",t)}}function s(t,e){switch(t){case"return":i.resolve({value:e,done:!0});break;case"throw":i.reject(e);break;default:i.resolve({value:e,done:!1})}(i=i.next)?o(i.key,i.arg):n=null}this._invoke=function(t,e){return new Promise((function(s,r){var a={key:t,arg:e,resolve:s,reject:r,next:null};n?n=n.next=a:(i=n=a,o(t,e))}))},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},h=function(){function s(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;return n(this,s),this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.width=i,this._canvas.height=i,this._context.fillStyle=o,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._size=i,this._patternColor=r,this}return o(s,[{key:"setStrokeProps",value:function(){this._context.strokeStyle=this._patternColor,this._context.lineWidth=this._size/10,this._context.lineJoin=i,this._context.lineCap=i}},{key:"setFillProps",value:function(){this._context.fillStyle=this._patternColor}}]),s}(),c=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawPlus(),this.drawPlus(t,t),this._context.stroke(),this._canvas}},{key:"drawPlus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/4;this._context.moveTo(o+t,0+e),this._context.lineTo(o+t,n+e),this._context.moveTo(0+t,o+e),this._context.lineTo(n+t,o+e),this._context.closePath()}}]),e}(h),l=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawCross(),this.drawCross(t,t),this._context.stroke(),this._canvas}},{key:"drawCross",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,n=2;this._context.moveTo(t+n,e+n),this._context.lineTo(i-n+t,i-n+e),this._context.moveTo(t+n,i-n+e),this._context.lineTo(i-n+t,e+n),this._context.closePath()}}]),e}(h),u=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDash(),this.drawDash(t,t),this._context.stroke(),this._canvas}},{key:"drawDash",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,n=2;this._context.moveTo(t+n,e+n),this._context.lineTo(i-n+t,i-n+e),this._context.closePath()}}]),e}(h),_=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new l).drawCross.call(this),(new u).drawDash.call(this,t,t),this._context.stroke(),this._canvas}}]),e}(h),d=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDot(),this.drawDot(t,t),this._context.fill(),this._canvas}},{key:"drawDot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._size/10,n=this._size/4,o=n+t,s=n+e;this._context.moveTo(o+n,s),this._context.arc(o,s,i,0,2*Math.PI),this._context.closePath()}}]),e}(h),f=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new u).drawDash.call(this,t,t),this._context.closePath(),this._context.stroke(),this.setFillProps(),(new d).drawDot.call(this),this._context.fill(),this._canvas}}]),e}(h),x=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setFillProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.fill(),this._canvas}}]),e}(d),p=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setStrokeProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.stroke(),this._canvas}}]),e}(d),v=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawLine(),this.drawLine(t,t),this._context.stroke(),this._canvas}},{key:"drawLine",value:function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=this._size/4;this._context.moveTo(0,e+t),this._context.lineTo(this._size,e+t),this._context.closePath()}}]),e}(h),g=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),v.prototype.drawTile.call(this),this._canvas}}]),e}(v),w=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawWeave(0,0),this._context.stroke(),this._canvas}},{key:"drawWeave",value:function(t,e){var i=this._size,n=i/2;this._context.moveTo(t+1,e+1),this._context.lineTo(n-1,n-1),this._context.moveTo(n+1,i-1),this._context.lineTo(i-1,n+1),this._context.closePath()}}]),e}(h),y=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawZigzag(),this.drawZigzag(this._size/2),this._context.stroke(),this._canvas}},{key:"drawZigzag",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this._size,i=e/4,n=e/2,o=e/10;this._context.moveTo(0,o+t),this._context.lineTo(i,n-o+t),this._context.lineTo(n,o+t),this._context.lineTo(e-i,n-o+t),this._context.lineTo(e,o+t)}}]),e}(h),P=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),y.prototype.drawTile.call(this),this._canvas}}]),e}(y),k=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiagonalLine(),this.drawDiagonalLine(t,t),this._context.stroke(),this._canvas}},{key:"drawDiagonalLine",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=1;this._context.moveTo(n-o-t,-1*o+e),this._context.lineTo(i+1-t,n+1+e),this._context.closePath()}}]),e}(h),b=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),k.prototype.drawTile.call(this),this._canvas}}]),e}(k),m=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawSquare(),this.drawSquare(t,t),this._context.fill(),this._canvas}},{key:"drawSquare",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/20;this._context.fillRect(t+o,e+o,n-2*o,n-2*o),this._context.closePath()}}]),e}(h),T=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawBox(),this.drawBox(t,t),this._context.stroke(),this._canvas}},{key:"drawBox",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/20;this._context.strokeRect(t+o,e+o,n-4*o,n-4*o),this._context.closePath()}}]),e}(h),O=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawTriangle(),this.drawTriangle(t,t),this._context.fill(),this._canvas}},{key:"drawTriangle",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/4;this._context.moveTo(o+t,e),this._context.lineTo(n+t,n+e),this._context.lineTo(t,n+e),this._context.closePath()}}]),e}(h),S=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size;return this._context.translate(t,t),this._context.rotate(180*Math.PI/180),O.prototype.drawTile.call(this),this._canvas}}]),e}(O),D=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.fill(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/4;this._context.moveTo(o+t,e),this._context.lineTo(n+t,o+e),this._context.lineTo(o+t,n+e),this._context.lineTo(t,o+e),this._context.closePath()}}]),e}(h),z=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.stroke(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2-1,o=i/4;this._context.moveTo(o+t,e+1),this._context.lineTo(n+t,o+e),this._context.lineTo(o+t,n+e),this._context.lineTo(t+1,o+e),this._context.closePath()}}]),e}(D),M={plus:c,cross:l,dash:u,"cross-dash":_,dot:d,"dot-dash":f,disc:x,ring:p,line:v,"line-vertical":g,weave:w,zigzag:y,"zigzag-vertical":P,diagonal:k,"diagonal-right-left":b,square:m,box:T,triangle:O,"triangle-inverted":S,diamond:D,"diamond-box":z},j=[];function L(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=Object.keys(M);t.forEach((function(t){e.splice(e.indexOf(t),1)}));var i=Math.floor(Math.random()*e.length);return e[i]}function C(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"square",e=arguments[1],i=arguments[2],n=arguments[3],o=document.createElement("canvas"),s=o.getContext("2d"),r=2*n,a=new(0,j[t])(n,e,i),h=s.createPattern(a.drawTile(),"repeat");return o.width=r,o.height=r,h.shapeType=t,h}return s(j,M,{circle:M.disc,"triangle-vertical":M["triangle-inverted"],"line-horizontal":M.line,"line-diagonal-lr":M.diagonal,"line-diagonal-rl":M["diagonal-right-left"],"zigzag-horizontal":M.zigzag,"diamond-outline":M["diamond-box"]}),{draw:C,generate:function(t){var e=void 0,i=void 0;return t.map((function(t,n,o){var s=void 0;return 0===n?(s=L(),e=i=s):n===o.length-1?s=L([i,e]):(s=L([i]),i=s),C(s,t)}))}}}()}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{i.d(n,{Z:()=>_});const t=class{static sliceOrFill(t,e,i){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=i?i:0);return t}static mergeRight(t,e){const i=Object.keys(e);Object.entries(t).forEach((t=>{const n=t[0];if(i.includes(n)){const i=t[1];e[n]=i}}))}};class e{constructor(t){let e=t;if("string"==typeof e&&(e=document.getElementById(e.replace("/^#/",""))),e instanceof HTMLCanvasElement)this.context=e.getContext("2d");else{if(!(e instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=e}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1,showLabels:!0},this.seriesData=[]}setChartOptions(e){t.mergeRight(e,this.chartOptions)}setSerieOptions(e,i){i?i.forEach((i=>{const n=this.seriesData.find((t=>t.name==i));n?t.mergeRight(e,n.options):console.warn(`Serie with name ${i} not found.`)})):this.seriesData.forEach((i=>t.mergeRight(e,i.options)))}}var o=i(744);function s(t,e,i){if(t.fillStyle=i,null!=e)try{t.fillStyle=(0,o.draw)(e,i,"black")}catch(t){console.warn(`${e} is invalid shape. See documentation.`)}}class r{constructor(t){this.LABELS_SPACE_MULTIPIER=.05,this.ctx=t}prepareChartForDrawing(t,e){const{ctx:i}=this,{width:n,height:o}=i.canvas;this.ctx.clearRect(0,0,n,o);let s=this.getContentFrame();return this.strokeFrame(s,"gray",3),t.showTitle&&t.title&&(s=this.drawTitle(t.title,s)),t.showLegend&&(s=this.drawLegend(s,e)),s}drawLabels(t){const e=t.h*this.LABELS_SPACE_MULTIPIER;return{x:t.x,y:t.y,w:t.w,h:t.h-e}}drawGridHorizontalLines(t,e){const{ctx:i}=this,n=Math.max(...t.map((t=>Math.max(...t.values)))),{tickCount:o,tickHeight:s}=function(t,e){const i=t/10,n=Math.pow(10,Math.floor(Math.log10(i))),o=i/n,s=(o<10?[1,1.5,2,3,5,7,10].find((t=>t>o)):10)*n;return{tickHeight:s,tickCount:Math.ceil(t/s)}}(n),r=e.h/(o+1);i.lineWidth=1,i.strokeStyle="gray";for(let t=1;t<=o+1;t++){const n=e.y+r*t,a=String((o+1-t)*s),{width:h}=this.ctx.measureText(a);i.fillText(a,e.x,n),i.beginPath(),i.moveTo(e.x+h,n),i.lineTo(e.x+e.w,n),i.stroke(),i.closePath()}return{tickCount:o,tickHeight:s}}strokeFrame(t,e,i){this.ctx.strokeStyle=e,this.ctx.lineWidth=null!=i?i:1,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black"}getContentFrame(){const{width:t,height:e}=this.ctx.canvas,i=Math.floor(Math.min(t,e)/100);return{x:i,y:i,w:t-2*i,h:e-2*i}}getRemainingContentFrame(t,e){return{x:t.x,y:t.y<e.y?t.y:e.y+e.h,w:t.w,h:t.h-e.h}}getLegendFrame(t){const e=Math.floor(t.h/10);return{x:t.x,y:t.y+t.h-e,h:e,w:t.w}}drawTitle(t,e){const{ctx:i}=this,n=this.getTitleFrame(e),{x:o,y:s,w:r,h:a}=n;i.font=`${Math.floor(a/2)}px sans-serif`;const h=i.measureText(t),c=o+r/2-h.width/2,l=s+a/2+h.actualBoundingBoxAscent/2;return i.fillText(t,c,l,r),this.strokeFrame(n,"gray",1),this.getRemainingContentFrame(e,n)}getTitleFrame(t){const e=Math.floor(t.h/10);return{x:t.x,y:t.y,h:e,w:t.w}}drawSingleSerieLegend(t,e){const{ctx:i}=this,{options:n,name:s}=e;if(i.fillStyle=n.color,null!=n.shape)try{i.fillStyle=(0,o.draw)(n.shape,n.color,"black")}catch(t){console.warn(`${n.shape} is invalid shape. See documentation.`)}i.strokeStyle="black",i.lineWidth=3;const r=Math.min(t.w,t.h),a=.6*r,h={x:t.x+(r-a)/2,y:t.y+(r-a)/2,w:a,h:a};i.fillRect(h.x,h.y,h.w,h.h),i.strokeRect(h.x,h.y,h.w,h.h);const c={x:t.x+r,y:t.y+r/2};i.fillStyle="black",i.font=`${Math.floor(r/4)}px sans-serif`;const{actualBoundingBoxAscent:l}=i.measureText(s);i.fillText(s,c.x,c.y+l/2,t.w-r)}drawLegend(t,e){const i=this.getLegendFrame(t),n=.75*i.w;i.x=i.x+(i.w-n)/2,i.w=n;const o=Math.ceil(e.length/5),s=i.w/Math.min(e.length,5),r=i.h/o;for(let t=0;t<e.length;t++)this.drawSingleSerieLegend({x:i.x+s*(t%5),y:i.y+r*Math.floor(t/5),w:s,h:r},e[t]);return this.getRemainingContentFrame(t,i)}}class a{constructor(t){this.plotKit=new r(t),this.ctx=t}}class h extends a{constructor(t){super(t),this.COL_SPACE_SIZE=.75,this.VALUE_BOTTOM_PADDING=4}drawBars(t,e,i){let n=this.plotKit.prepareChartForDrawing(i,e),o=0;if(i.showLabels){const t=n.h;n=this.plotKit.drawLabels(n),o=Math.floor(t-n.h)}const{tickCount:s,tickHeight:r}=this.plotKit.drawGridHorizontalLines(e,n),a=n.h/((s+1)*r),h=e.length,c=t.length,l=n.w/c,u=l*(1-this.COL_SPACE_SIZE),_=l-2*u,d=_/h;this.ctx.fillStyle="black";const f=n.y+n.h,x=Math.floor(.5*d);this.ctx.font=`${x}px sans-serif`;for(let s=0;s<c;s++){const r=n.x+s*l+u;if(i.showLabels){this.ctx.font=`${o}px sans-serif`,this.ctx.fillStyle="black";const{width:e}=this.ctx.measureText(t[s]),i=r+_/2-e/2,a=n.y+n.h+.8*o;this.ctx.fillText(t[s],i,a,l),this.ctx.font=`${x}px sans-serif`}for(let t=0;t<h;t++){const i=r+t*d,n=e[t].values[s]*a,o=f-n;this.drawBar(i,o,d,n,e[t].options,e[t].values[s])}}}drawBar(t,e,i,n,o,s){this.fillBar(t,e,i,n,o);const{showValue:r,borderWidth:a}=o;a&&this.strokeBar(t,e,i,n,a),r&&this.addBarValue(t,e,i,s)}fillBar(t,e,i,n,o){const{color:r,shape:a}=o;s(this.ctx,a,r),this.ctx.fillRect(t,e,i,n)}strokeBar(t,e,i,n,o){this.ctx.lineWidth=n?o:1,this.ctx.beginPath(),this.ctx.moveTo(t,e+n),this.ctx.lineTo(t,e),this.ctx.lineTo(t+i,e),this.ctx.lineTo(t+i,e+n),this.ctx.strokeStyle="black",this.ctx.stroke()}addBarValue(t,e,i,n){this.ctx.fillStyle="black";const o=String(n),s=t+i/2-this.ctx.measureText(o).width/2;this.ctx.fillText(o,s,e-this.VALUE_BOTTOM_PADDING,i)}}class c extends e{constructor(t){super(t),this.plot=new h(this.context)}set X(t){this.dataLabels=t}set Y(e){const{length:i}=this.dataLabels;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const n=e.map((e=>t.sliceOrFill(e,i)));this.seriesData=n.map(((t,e)=>this.getDefaultSerieObject(t,e)))}set serieNames(t){const e=Math.min(t.length,this.seriesData.length);for(let i=0;i<e;i++)this.seriesData[i].name=t[i]}getDefaultSerieObject(t,e){return{values:t,name:`serie${e}`,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,borderWidth:0,shape:void 0}}}draw(){this.plot.drawBars(this.dataLabels,this.seriesData,this.chartOptions)}}class l extends a{constructor(t){super(t),this.RADIUS_DIVIDER=2.5}drawPie(t,e){const{ctx:i}=this,n=this.plotKit.prepareChartForDrawing(e,t),o=this.mapSeriesToPiePartData(t),r=Math.min(n.w,n.h)/this.RADIUS_DIVIDER,a={x:n.x+n.w/2,y:n.y+n.h/2};let h=0;i.strokeStyle="black",i.font=`${Math.floor(r/5)}px sans-serif`,o.forEach((t=>{this.makePiePartPath(a.x,a.y,r,h,h+t.radians),s(i,t.shape,t.color),i.fill(),t.borderWidth>0&&this.strokeBorder(t.borderWidth),t.showValue&&this.addPieValue(t.value,a.x,a.y,r,h+t.radians/2),h+=t.radians}))}mapSeriesToPiePartData(t){const e=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({radians:2*t.value*Math.PI/e,color:t.options.color,borderWidth:t.options.borderWidth,shape:t.options.shape,showValue:t.options.showValue,value:t.value})))}makePiePartPath(t,e,i,n,o){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.arc(t,e,i,n,o),this.ctx.lineTo(t,e)}strokeBorder(t){this.ctx.lineWidth=t,this.ctx.stroke()}addPieValue(t,e,i,n,o){const s=String(t),{width:r,actualBoundingBoxAscent:a}=this.ctx.measureText(s),h=e+Math.cos(o)*(n+r)-r/2,c=i+Math.sin(o)*(n+a)+a/2;this.ctx.fillStyle="black",this.ctx.fillText(s,h,c)}}class u extends e{constructor(t){super(t),this.plot=new l(this.context)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(e){const{length:i}=this.seriesData;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const n=t.sliceOrFill(e,i);this.seriesData.map(((t,e)=>{t.value=n[e]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,borderWidth:0,shape:void 0}}}draw(){this.plot.drawPie(this.seriesData,this.chartOptions)}}function _(t,e){switch(t.toLowerCase().trim()){case"pie":return new u(e);case"bar":return new c(e);default:throw new Error(`${t} chart is not defined.`)}}})();var o=n.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1QkFDaUVBLEVBQU9DLFFBR2hFLFdBRVIsSUFBSUMsRUFBbUIsMkJBQ25CQyxFQUFnQiwyQkFDaEJDLEVBQWMsUUFtSGRDLEdBakhpQixXQUNuQixTQUFTQyxFQUFXQyxHQUNsQkMsS0FBS0QsTUFBUUEsRUFHZixTQUFTRSxFQUFlQyxHQUN0QixJQUFJQyxFQUFPQyxFQXFCWCxTQUFTQyxFQUFPQyxFQUFLQyxHQUNuQixJQUNFLElBQUlDLEVBQVNOLEVBQUlJLEdBQUtDLEdBQ2xCUixFQUFRUyxFQUFPVCxNQUVmQSxhQUFpQkQsRUFDbkJXLFFBQVFDLFFBQVFYLEVBQU1BLE9BQU9ZLE1BQUssU0FBVUosR0FDMUNGLEVBQU8sT0FBUUUsTUFDZCxTQUFVQSxHQUNYRixFQUFPLFFBQVNFLE1BR2xCSyxFQUFPSixFQUFPSyxLQUFPLFNBQVcsU0FBVUwsRUFBT1QsT0FFbkQsTUFBT2UsR0FDUEYsRUFBTyxRQUFTRSxJQUlwQixTQUFTRixFQUFPRyxFQUFNaEIsR0FDcEIsT0FBUWdCLEdBQ04sSUFBSyxTQUNIWixFQUFNTyxRQUFRLENBQ1pYLE1BQU9BLEVBQ1BjLE1BQU0sSUFFUixNQUVGLElBQUssUUFDSFYsRUFBTWEsT0FBT2pCLEdBQ2IsTUFFRixRQUNFSSxFQUFNTyxRQUFRLENBQ1pYLE1BQU9BLEVBQ1BjLE1BQU0sS0FLWlYsRUFBUUEsRUFBTWMsTUFHWlosRUFBT0YsRUFBTUcsSUFBS0gsRUFBTUksS0FFeEJILEVBQU8sS0FJWEosS0FBS2tCLFFBcEVMLFNBQWNaLEVBQUtDLEdBQ2pCLE9BQU8sSUFBSUUsU0FBUSxTQUFVQyxFQUFTTSxHQUNwQyxJQUFJRyxFQUFVLENBQ1piLElBQUtBLEVBQ0xDLElBQUtBLEVBQ0xHLFFBQVNBLEVBQ1RNLE9BQVFBLEVBQ1JDLEtBQU0sTUFHSmIsRUFDRkEsRUFBT0EsRUFBS2EsS0FBT0UsR0FFbkJoQixFQUFRQyxFQUFPZSxFQUNmZCxFQUFPQyxFQUFLQyxRQXdEUSxtQkFBZkwsRUFBSWtCLFNBQ2JwQixLQUFLb0IsWUFBU0MsR0FJSSxtQkFBWEMsUUFBeUJBLE9BQU9DLGdCQUN6Q3RCLEVBQWV1QixVQUFVRixPQUFPQyxlQUFpQixXQUMvQyxPQUFPdkIsT0FJWEMsRUFBZXVCLFVBQVVQLEtBQU8sU0FBVVYsR0FDeEMsT0FBT1AsS0FBS2tCLFFBQVEsT0FBUVgsSUFHOUJOLEVBQWV1QixVQUFVQyxNQUFRLFNBQVVsQixHQUN6QyxPQUFPUCxLQUFLa0IsUUFBUSxRQUFTWCxJQUcvQk4sRUFBZXVCLFVBQVVKLE9BQVMsU0FBVWIsR0FDMUMsT0FBT1AsS0FBS2tCLFFBQVEsU0FBVVgsSUFsR2IsR0FpSEEsU0FBVW1CLEVBQVVDLEdBQ3ZDLEtBQU1ELGFBQW9CQyxHQUN4QixNQUFNLElBQUlDLFVBQVUsdUNBSXBCQyxFQUFjLFdBQ2hCLFNBQVNDLEVBQWlCQyxFQUFRQyxHQUNoQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsSUFBSyxDQUNyQyxJQUFJRSxFQUFhSCxFQUFNQyxHQUN2QkUsRUFBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUNqREQsRUFBV0UsY0FBZSxFQUN0QixVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQ2pEQyxPQUFPQyxlQUFlVCxFQUFRSSxFQUFXN0IsSUFBSzZCLElBSWxELE9BQU8sU0FBVVIsRUFBYWMsRUFBWUMsR0FHeEMsT0FGSUQsR0FBWVgsRUFBaUJILEVBQVlILFVBQVdpQixHQUNwREMsR0FBYVosRUFBaUJILEVBQWFlLEdBQ3hDZixHQWRPLEdBa0JkZ0IsRUFBV0osT0FBT0ssUUFBVSxTQUFVYixHQUN4QyxJQUFLLElBQUlFLEVBQUksRUFBR0EsRUFBSVksVUFBVVgsT0FBUUQsSUFBSyxDQUN6QyxJQUFJYSxFQUFTRCxVQUFVWixHQUV2QixJQUFLLElBQUkzQixLQUFPd0MsRUFDVlAsT0FBT2YsVUFBVXVCLGVBQWVDLEtBQUtGLEVBQVF4QyxLQUMvQ3lCLEVBQU96QixHQUFPd0MsRUFBT3hDLElBSzNCLE9BQU95QixHQUdMa0IsRUFBVyxTQUFVQyxFQUFVQyxHQUNqQyxHQUEwQixtQkFBZkEsR0FBNEMsT0FBZkEsRUFDdEMsTUFBTSxJQUFJdkIsVUFBVSxrRUFBb0V1QixHQUcxRkQsRUFBUzFCLFVBQVllLE9BQU9hLE9BQU9ELEdBQWNBLEVBQVczQixVQUFXLENBQ3JFNkIsWUFBYSxDQUNYdEQsTUFBT21ELEVBQ1BkLFlBQVksRUFDWkUsVUFBVSxFQUNWRCxjQUFjLEtBR2RjLElBQVlaLE9BQU9lLGVBQWlCZixPQUFPZSxlQUFlSixFQUFVQyxHQUFjRCxFQUFTSyxVQUFZSixJQUd6R0ssRUFBNEIsU0FBVUMsRUFBTVQsR0FDOUMsSUFBS1MsRUFDSCxNQUFNLElBQUlDLGVBQWUsNkRBRzNCLE9BQU9WLEdBQXlCLGlCQUFUQSxHQUFxQyxtQkFBVEEsRUFBOEJTLEVBQVBULEdBR3hFVyxFQUFRLFdBQ1YsU0FBU0EsSUFDUCxJQUFJQyxFQUFPZixVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUMzRWdCLEVBQWtCaEIsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUtuRCxFQUN0Rm9FLEVBQWVqQixVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBS2xELEVBZXZGLE9BZEFFLEVBQWVHLEtBQU0yRCxHQUVyQjNELEtBQUsrRCxRQUFVQyxTQUFTQyxjQUFjLFVBQ3RDakUsS0FBS2tFLFNBQVdsRSxLQUFLK0QsUUFBUUksV0FBVyxNQUV4Q25FLEtBQUsrRCxRQUFRSyxNQUFRUixFQUNyQjVELEtBQUsrRCxRQUFRTSxPQUFTVCxFQUV0QjVELEtBQUtrRSxTQUFTSSxVQUFZVCxFQUMxQjdELEtBQUtrRSxTQUFTSyxTQUFTLEVBQUcsRUFBR3ZFLEtBQUsrRCxRQUFRSyxNQUFPcEUsS0FBSytELFFBQVFNLFFBRTlEckUsS0FBS3dFLE1BQVFaLEVBQ2I1RCxLQUFLeUUsY0FBZ0JYLEVBRWQ5RCxLQWlCVCxPQWRBNkIsRUFBWThCLEVBQU8sQ0FBQyxDQUNsQnJELElBQUssaUJBQ0xQLE1BQU8sV0FDTEMsS0FBS2tFLFNBQVNRLFlBQWMxRSxLQUFLeUUsY0FDakN6RSxLQUFLa0UsU0FBU1MsVUFBWTNFLEtBQUt3RSxNQUFRLEdBQ3ZDeEUsS0FBS2tFLFNBQVNVLFNBQVdoRixFQUN6QkksS0FBS2tFLFNBQVNXLFFBQVVqRixJQUV6QixDQUNEVSxJQUFLLGVBQ0xQLE1BQU8sV0FDTEMsS0FBS2tFLFNBQVNJLFVBQVl0RSxLQUFLeUUsa0JBRzVCZCxFQXBDRyxHQXVDUm1CLEVBQU8sU0FBVUMsR0FHbkIsU0FBU0QsSUFFUCxPQURBakYsRUFBZUcsS0FBTThFLEdBQ2R0QixFQUEwQnhELE1BQU84RSxFQUFLdkIsV0FBYWhCLE9BQU95QyxlQUFlRixJQUFPRyxNQUFNakYsS0FBTTZDLFlBcUNyRyxPQXpDQUksRUFBUzZCLEVBQU1DLEdBT2ZsRCxFQUFZaUQsRUFBTSxDQUFDLENBQ2pCeEUsSUFBSyxXQUNMUCxNQUFPLFdBQ0wsSUFBSW1GLEVBQVdsRixLQUFLd0UsTUFBUSxFQVc1QixPQVRBeEUsS0FBS2tFLFNBQVNpQixZQUVkbkYsS0FBS29GLGlCQUVMcEYsS0FBS3FGLFdBQ0xyRixLQUFLcUYsU0FBU0gsRUFBVUEsR0FFeEJsRixLQUFLa0UsU0FBU29CLFNBRVB0RixLQUFLK0QsVUFFYixDQUNEekQsSUFBSyxXQUNMUCxNQUFPLFdBQ0wsSUFBSXdGLEVBQVUxQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUM5RTJDLEVBQVUzQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUU5RWUsRUFBTzVELEtBQUt3RSxNQUNaVSxFQUFXdEIsRUFBTyxFQUNsQjZCLEVBQWM3QixFQUFPLEVBRXpCNUQsS0FBS2tFLFNBQVN3QixPQUFPRCxFQUFjRixFQUFTLEVBQUlDLEdBQ2hEeEYsS0FBS2tFLFNBQVN5QixPQUFPRixFQUFjRixFQUFTTCxFQUFXTSxHQUN2RHhGLEtBQUtrRSxTQUFTd0IsT0FBTyxFQUFJSCxFQUFTRSxFQUFjRCxHQUNoRHhGLEtBQUtrRSxTQUFTeUIsT0FBT1QsRUFBV0ssRUFBU0UsRUFBY0QsR0FFdkR4RixLQUFLa0UsU0FBUzBCLGdCQUdYZCxFQTFDRSxDQTJDVG5CLEdBRUVrQyxFQUFRLFNBQVVkLEdBR3BCLFNBQVNjLElBRVAsT0FEQWhHLEVBQWVHLEtBQU02RixHQUNkckMsRUFBMEJ4RCxNQUFPNkYsRUFBTXRDLFdBQWFoQixPQUFPeUMsZUFBZWEsSUFBUVosTUFBTWpGLEtBQU02QyxZQXFDdkcsT0F6Q0FJLEVBQVM0QyxFQUFPZCxHQU9oQmxELEVBQVlnRSxFQUFPLENBQUMsQ0FDbEJ2RixJQUFLLFdBQ0xQLE1BQU8sV0FDTCxJQUFJbUYsRUFBV2xGLEtBQUt3RSxNQUFRLEVBVzVCLE9BVEF4RSxLQUFLa0UsU0FBU2lCLFlBRWRuRixLQUFLb0YsaUJBRUxwRixLQUFLOEYsWUFDTDlGLEtBQUs4RixVQUFVWixFQUFVQSxHQUV6QmxGLEtBQUtrRSxTQUFTb0IsU0FFUHRGLEtBQUsrRCxVQUViLENBQ0R6RCxJQUFLLFlBQ0xQLE1BQU8sV0FDTCxJQUFJd0YsRUFBVTFDLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMkMsRUFBVTNDLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBRzlFcUMsRUFET2xGLEtBQUt3RSxNQUNNLEVBQ2xCdUIsRUFBTSxFQUVWL0YsS0FBS2tFLFNBQVN3QixPQUFPSCxFQUFVUSxFQUFLUCxFQUFVTyxHQUM5Qy9GLEtBQUtrRSxTQUFTeUIsT0FBT1QsRUFBV2EsRUFBTVIsRUFBU0wsRUFBV2EsRUFBTVAsR0FDaEV4RixLQUFLa0UsU0FBU3dCLE9BQU9ILEVBQVVRLEVBQUtiLEVBQVdhLEVBQU1QLEdBQ3JEeEYsS0FBS2tFLFNBQVN5QixPQUFPVCxFQUFXYSxFQUFNUixFQUFTQyxFQUFVTyxHQUV6RC9GLEtBQUtrRSxTQUFTMEIsZ0JBR1hDLEVBMUNHLENBMkNWbEMsR0FFRXFDLEVBQU8sU0FBVWpCLEdBR25CLFNBQVNpQixJQUVQLE9BREFuRyxFQUFlRyxLQUFNZ0csR0FDZHhDLEVBQTBCeEQsTUFBT2dHLEVBQUt6QyxXQUFhaEIsT0FBT3lDLGVBQWVnQixJQUFPZixNQUFNakYsS0FBTTZDLFlBbUNyRyxPQXZDQUksRUFBUytDLEVBQU1qQixHQU9mbEQsRUFBWW1FLEVBQU0sQ0FBQyxDQUNqQjFGLElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRixpQkFFTHBGLEtBQUtpRyxXQUNMakcsS0FBS2lHLFNBQVNmLEVBQVVBLEdBRXhCbEYsS0FBS2tFLFNBQVNvQixTQUVQdEYsS0FBSytELFVBRWIsQ0FDRHpELElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUl3RixFQUFVMUMsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUUyQyxFQUFVM0MsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFHOUVxQyxFQURPbEYsS0FBS3dFLE1BQ00sRUFDbEJ1QixFQUFNLEVBRVYvRixLQUFLa0UsU0FBU3dCLE9BQU9ILEVBQVVRLEVBQUtQLEVBQVVPLEdBQzlDL0YsS0FBS2tFLFNBQVN5QixPQUFPVCxFQUFXYSxFQUFNUixFQUFTTCxFQUFXYSxFQUFNUCxHQUVoRXhGLEtBQUtrRSxTQUFTMEIsZ0JBR1hJLEVBeENFLENBeUNUckMsR0FFRXVDLEVBQVksU0FBVW5CLEdBR3hCLFNBQVNtQixJQUVQLE9BREFyRyxFQUFlRyxLQUFNa0csR0FDZDFDLEVBQTBCeEQsTUFBT2tHLEVBQVUzQyxXQUFhaEIsT0FBT3lDLGVBQWVrQixJQUFZakIsTUFBTWpGLEtBQU02QyxZQXNCL0csT0ExQkFJLEVBQVNpRCxFQUFXbkIsR0FPcEJsRCxFQUFZcUUsRUFBVyxDQUFDLENBQ3RCNUYsSUFBSyxXQUNMUCxNQUFPLFdBQ0wsSUFBSW1GLEVBQVdsRixLQUFLd0UsTUFBUSxFQWE1QixPQVpBeEUsS0FBS2tFLFNBQVNpQixZQUVkbkYsS0FBS29GLGtCQUVPLElBQUlTLEdBQ1ZDLFVBQVU5QyxLQUFLaEQsT0FFVixJQUFJZ0csR0FDVkMsU0FBU2pELEtBQUtoRCxLQUFNa0YsRUFBVUEsR0FFbkNsRixLQUFLa0UsU0FBU29CLFNBRVB0RixLQUFLK0QsWUFHVG1DLEVBM0JPLENBNEJkdkMsR0FFRXdDLEVBQU0sU0FBVXBCLEdBR2xCLFNBQVNvQixJQUVQLE9BREF0RyxFQUFlRyxLQUFNbUcsR0FDZDNDLEVBQTBCeEQsTUFBT21HLEVBQUk1QyxXQUFhaEIsT0FBT3lDLGVBQWVtQixJQUFNbEIsTUFBTWpGLEtBQU02QyxZQXFDbkcsT0F6Q0FJLEVBQVNrRCxFQUFLcEIsR0FPZGxELEVBQVlzRSxFQUFLLENBQUMsQ0FDaEI3RixJQUFLLFdBQ0xQLE1BQU8sV0FDTCxJQUFJbUYsRUFBV2xGLEtBQUt3RSxNQUFRLEVBVzVCLE9BVEF4RSxLQUFLa0UsU0FBU2lCLFlBRWRuRixLQUFLb0csZUFFTHBHLEtBQUtxRyxVQUNMckcsS0FBS3FHLFFBQVFuQixFQUFVQSxHQUV2QmxGLEtBQUtrRSxTQUFTb0MsT0FFUHRHLEtBQUsrRCxVQUViLENBQ0R6RCxJQUFLLFVBQ0xQLE1BQU8sV0FDTCxJQUFJd0YsRUFBVTFDLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMkMsRUFBVTNDLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMEQsRUFBVzFELFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLN0MsS0FBS3dFLE1BQVEsR0FHNUZpQixFQURPekYsS0FBS3dFLE1BQ1MsRUFDckJnQyxFQUFJZixFQUFjRixFQUNsQmtCLEVBQUloQixFQUFjRCxFQUV0QnhGLEtBQUtrRSxTQUFTd0IsT0FBT2MsRUFBSWYsRUFBYWdCLEdBQ3RDekcsS0FBS2tFLFNBQVN3QyxJQUFJRixFQUFHQyxFQUFHRixFQUFVLEVBQUcsRUFBSUksS0FBS0MsSUFFOUM1RyxLQUFLa0UsU0FBUzBCLGdCQUdYTyxFQTFDQyxDQTJDUnhDLEdBRUVrRCxFQUFVLFNBQVU5QixHQUd0QixTQUFTOEIsSUFFUCxPQURBaEgsRUFBZUcsS0FBTTZHLEdBQ2RyRCxFQUEwQnhELE1BQU82RyxFQUFRdEQsV0FBYWhCLE9BQU95QyxlQUFlNkIsSUFBVTVCLE1BQU1qRixLQUFNNkMsWUE0QjNHLE9BaENBSSxFQUFTNEQsRUFBUzlCLEdBT2xCbEQsRUFBWWdGLEVBQVMsQ0FBQyxDQUNwQnZHLElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFtQjVCLE9BakJBeEUsS0FBS2tFLFNBQVNpQixZQUVkbkYsS0FBS29GLGtCQUVNLElBQUlZLEdBQ1ZDLFNBQVNqRCxLQUFLaEQsS0FBTWtGLEVBQVVBLEdBRW5DbEYsS0FBS2tFLFNBQVMwQixZQUNkNUYsS0FBS2tFLFNBQVNvQixTQUVkdEYsS0FBS29HLGdCQUVLLElBQUlELEdBQ1ZFLFFBQVFyRCxLQUFLaEQsTUFFakJBLEtBQUtrRSxTQUFTb0MsT0FFUHRHLEtBQUsrRCxZQUdUOEMsRUFqQ0ssQ0FrQ1psRCxHQUVFbUQsRUFBTyxTQUFVQyxHQUduQixTQUFTRCxJQUVQLE9BREFqSCxFQUFlRyxLQUFNOEcsR0FDZHRELEVBQTBCeEQsTUFBTzhHLEVBQUt2RCxXQUFhaEIsT0FBT3lDLGVBQWU4QixJQUFPN0IsTUFBTWpGLEtBQU02QyxZQXFCckcsT0F6QkFJLEVBQVM2RCxFQUFNQyxHQU9mbEYsRUFBWWlGLEVBQU0sQ0FBQyxDQUNqQnhHLElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFDeEIrQixFQUFXdkcsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRyxlQUVMcEcsS0FBS3FHLFFBQVEsRUFBRyxFQUFHRSxHQUNuQnZHLEtBQUtxRyxRQUFRbkIsRUFBVUEsRUFBVXFCLEdBRWpDdkcsS0FBS2tFLFNBQVNvQyxPQUVQdEcsS0FBSytELFlBR1QrQyxFQTFCRSxDQTJCVFgsR0FFRWEsRUFBTyxTQUFVRCxHQUduQixTQUFTQyxJQUVQLE9BREFuSCxFQUFlRyxLQUFNZ0gsR0FDZHhELEVBQTBCeEQsTUFBT2dILEVBQUt6RCxXQUFhaEIsT0FBT3lDLGVBQWVnQyxJQUFPL0IsTUFBTWpGLEtBQU02QyxZQXFCckcsT0F6QkFJLEVBQVMrRCxFQUFNRCxHQU9mbEYsRUFBWW1GLEVBQU0sQ0FBQyxDQUNqQjFHLElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFDeEIrQixFQUFXdkcsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRixpQkFFTHBGLEtBQUtxRyxRQUFRLEVBQUcsRUFBR0UsR0FDbkJ2RyxLQUFLcUcsUUFBUW5CLEVBQVVBLEVBQVVxQixHQUVqQ3ZHLEtBQUtrRSxTQUFTb0IsU0FFUHRGLEtBQUsrRCxZQUdUaUQsRUExQkUsQ0EyQlRiLEdBRUVjLEVBQU8sU0FBVWxDLEdBR25CLFNBQVNrQyxJQUVQLE9BREFwSCxFQUFlRyxLQUFNaUgsR0FDZHpELEVBQTBCeEQsTUFBT2lILEVBQUsxRCxXQUFhaEIsT0FBT3lDLGVBQWVpQyxJQUFPaEMsTUFBTWpGLEtBQU02QyxZQWtDckcsT0F0Q0FJLEVBQVNnRSxFQUFNbEMsR0FPZmxELEVBQVlvRixFQUFNLENBQUMsQ0FDakIzRyxJQUFLLFdBQ0xQLE1BQU8sV0FDTCxJQUFJbUYsRUFBV2xGLEtBQUt3RSxNQUFRLEVBVzVCLE9BVEF4RSxLQUFLa0UsU0FBU2lCLFlBRWRuRixLQUFLb0YsaUJBRUxwRixLQUFLa0gsV0FDTGxILEtBQUtrSCxTQUFTaEMsRUFBVUEsR0FFeEJsRixLQUFLa0UsU0FBU29CLFNBRVB0RixLQUFLK0QsVUFFYixDQUNEekQsSUFBSyxXQUNMUCxNQUFPLFdBQ0wsSUFDSXlGLEVBQVUzQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUc5RTRDLEVBRE96RixLQUFLd0UsTUFDUyxFQUV6QnhFLEtBQUtrRSxTQUFTd0IsT0FBTyxFQUFHRCxFQUFjRCxHQUN0Q3hGLEtBQUtrRSxTQUFTeUIsT0FBTzNGLEtBQUt3RSxNQUFPaUIsRUFBY0QsR0FFL0N4RixLQUFLa0UsU0FBUzBCLGdCQUdYcUIsRUF2Q0UsQ0F3Q1R0RCxHQUVFd0QsRUFBZSxTQUFVQyxHQUczQixTQUFTRCxJQUVQLE9BREF0SCxFQUFlRyxLQUFNbUgsR0FDZDNELEVBQTBCeEQsTUFBT21ILEVBQWE1RCxXQUFhaEIsT0FBT3lDLGVBQWVtQyxJQUFlbEMsTUFBTWpGLEtBQU02QyxZQWNySCxPQWxCQUksRUFBU2tFLEVBQWNDLEdBT3ZCdkYsRUFBWXNGLEVBQWMsQ0FBQyxDQUN6QjdHLElBQUssV0FDTFAsTUFBTyxXQU1MLE9BTEFDLEtBQUtrRSxTQUFTbUQsVUFBVXJILEtBQUt3RSxNQUFPLEdBQ3BDeEUsS0FBS2tFLFNBQVNvRCxPQUFPLEdBQUtYLEtBQUtDLEdBQUssS0FFcENLLEVBQUt6RixVQUFVK0YsU0FBU3ZFLEtBQUtoRCxNQUV0QkEsS0FBSytELFlBR1RvRCxFQW5CVSxDQW9CakJGLEdBRUVPLEVBQVEsU0FBVXpDLEdBR3BCLFNBQVN5QyxJQUVQLE9BREEzSCxFQUFlRyxLQUFNd0gsR0FDZGhFLEVBQTBCeEQsTUFBT3dILEVBQU1qRSxXQUFhaEIsT0FBT3lDLGVBQWV3QyxJQUFRdkMsTUFBTWpGLEtBQU02QyxZQStCdkcsT0FuQ0FJLEVBQVN1RSxFQUFPekMsR0FPaEJsRCxFQUFZMkYsRUFBTyxDQUFDLENBQ2xCbEgsSUFBSyxXQUNMUCxNQUFPLFdBU0wsT0FSQUMsS0FBS2tFLFNBQVNpQixZQUVkbkYsS0FBS29GLGlCQUVMcEYsS0FBS3lILFVBQVUsRUFBRyxHQUVsQnpILEtBQUtrRSxTQUFTb0IsU0FFUHRGLEtBQUsrRCxVQUViLENBQ0R6RCxJQUFLLFlBQ0xQLE1BQU8sU0FBbUJ3RixFQUFTQyxHQUNqQyxJQUFJNUIsRUFBTzVELEtBQUt3RSxNQUNaVSxFQUFXdEIsRUFBTyxFQUV0QjVELEtBQUtrRSxTQUFTd0IsT0FBT0gsRUFBVSxFQUFHQyxFQUFVLEdBQzVDeEYsS0FBS2tFLFNBQVN5QixPQUFPVCxFQUFXLEVBQUdBLEVBQVcsR0FFOUNsRixLQUFLa0UsU0FBU3dCLE9BQU9SLEVBQVcsRUFBR3RCLEVBQU8sR0FDMUM1RCxLQUFLa0UsU0FBU3lCLE9BQU8vQixFQUFPLEVBQUdzQixFQUFXLEdBRTFDbEYsS0FBS2tFLFNBQVMwQixnQkFHWDRCLEVBcENHLENBcUNWN0QsR0FFRStELEVBQVMsU0FBVTNDLEdBR3JCLFNBQVMyQyxJQUVQLE9BREE3SCxFQUFlRyxLQUFNMEgsR0FDZGxFLEVBQTBCeEQsTUFBTzBILEVBQU9uRSxXQUFhaEIsT0FBT3lDLGVBQWUwQyxJQUFTekMsTUFBTWpGLEtBQU02QyxZQWtDekcsT0F0Q0FJLEVBQVN5RSxFQUFRM0MsR0FPakJsRCxFQUFZNkYsRUFBUSxDQUFDLENBQ25CcEgsSUFBSyxXQUNMUCxNQUFPLFdBVUwsT0FUQUMsS0FBS2tFLFNBQVNpQixZQUVkbkYsS0FBS29GLGlCQUVMcEYsS0FBSzJILGFBQ0wzSCxLQUFLMkgsV0FBVzNILEtBQUt3RSxNQUFRLEdBRTdCeEUsS0FBS2tFLFNBQVNvQixTQUVQdEYsS0FBSytELFVBRWIsQ0FDRHpELElBQUssYUFDTFAsTUFBTyxXQUNMLElBQUl5RixFQUFVM0MsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFFOUVlLEVBQU81RCxLQUFLd0UsTUFDWmlCLEVBQWM3QixFQUFPLEVBQ3JCc0IsRUFBV3RCLEVBQU8sRUFDbEJnRSxFQUFZaEUsRUFBTyxHQUV2QjVELEtBQUtrRSxTQUFTd0IsT0FBTyxFQUFHa0MsRUFBWXBDLEdBQ3BDeEYsS0FBS2tFLFNBQVN5QixPQUFPRixFQUFhUCxFQUFXMEMsRUFBWXBDLEdBQ3pEeEYsS0FBS2tFLFNBQVN5QixPQUFPVCxFQUFVMEMsRUFBWXBDLEdBQzNDeEYsS0FBS2tFLFNBQVN5QixPQUFPL0IsRUFBTzZCLEVBQWFQLEVBQVcwQyxFQUFZcEMsR0FDaEV4RixLQUFLa0UsU0FBU3lCLE9BQU8vQixFQUFNZ0UsRUFBWXBDLE9BR3BDa0MsRUF2Q0ksQ0F3Q1gvRCxHQUVFa0UsRUFBaUIsU0FBVUMsR0FHN0IsU0FBU0QsSUFFUCxPQURBaEksRUFBZUcsS0FBTTZILEdBQ2RyRSxFQUEwQnhELE1BQU82SCxFQUFldEUsV0FBYWhCLE9BQU95QyxlQUFlNkMsSUFBaUI1QyxNQUFNakYsS0FBTTZDLFlBY3pILE9BbEJBSSxFQUFTNEUsRUFBZ0JDLEdBT3pCakcsRUFBWWdHLEVBQWdCLENBQUMsQ0FDM0J2SCxJQUFLLFdBQ0xQLE1BQU8sV0FNTCxPQUxBQyxLQUFLa0UsU0FBU21ELFVBQVVySCxLQUFLd0UsTUFBTyxHQUNwQ3hFLEtBQUtrRSxTQUFTb0QsT0FBTyxHQUFLWCxLQUFLQyxHQUFLLEtBRXBDYyxFQUFPbEcsVUFBVStGLFNBQVN2RSxLQUFLaEQsTUFFeEJBLEtBQUsrRCxZQUdUOEQsRUFuQlksQ0FvQm5CSCxHQUVFSyxFQUFXLFNBQVVoRCxHQUd2QixTQUFTZ0QsSUFFUCxPQURBbEksRUFBZUcsS0FBTStILEdBQ2R2RSxFQUEwQnhELE1BQU8rSCxFQUFTeEUsV0FBYWhCLE9BQU95QyxlQUFlK0MsSUFBVzlDLE1BQU1qRixLQUFNNkMsWUFtQzdHLE9BdkNBSSxFQUFTOEUsRUFBVWhELEdBT25CbEQsRUFBWWtHLEVBQVUsQ0FBQyxDQUNyQnpILElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRixpQkFFTHBGLEtBQUtnSSxtQkFDTGhJLEtBQUtnSSxpQkFBaUI5QyxFQUFVQSxHQUVoQ2xGLEtBQUtrRSxTQUFTb0IsU0FFUHRGLEtBQUsrRCxVQUViLENBQ0R6RCxJQUFLLG1CQUNMUCxNQUFPLFdBQ0wsSUFBSXdGLEVBQVUxQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUM5RTJDLEVBQVUzQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUU5RWUsRUFBTzVELEtBQUt3RSxNQUNaVSxFQUFXdEIsRUFBTyxFQUNsQm1DLEVBQU0sRUFFVi9GLEtBQUtrRSxTQUFTd0IsT0FBT1IsRUFBV2EsRUFBTVIsR0FBZ0IsRUFBUFEsRUFBV1AsR0FDMUR4RixLQUFLa0UsU0FBU3lCLE9BQU8vQixFQUFPLEVBQUkyQixFQUFTTCxFQUFXLEVBQUlNLEdBRXhEeEYsS0FBS2tFLFNBQVMwQixnQkFHWG1DLEVBeENNLENBeUNicEUsR0FFRXNFLEVBQW9CLFNBQVVDLEdBR2hDLFNBQVNELElBRVAsT0FEQXBJLEVBQWVHLEtBQU1pSSxHQUNkekUsRUFBMEJ4RCxNQUFPaUksRUFBa0IxRSxXQUFhaEIsT0FBT3lDLGVBQWVpRCxJQUFvQmhELE1BQU1qRixLQUFNNkMsWUFjL0gsT0FsQkFJLEVBQVNnRixFQUFtQkMsR0FPNUJyRyxFQUFZb0csRUFBbUIsQ0FBQyxDQUM5QjNILElBQUssV0FDTFAsTUFBTyxXQU1MLE9BTEFDLEtBQUtrRSxTQUFTbUQsVUFBVXJILEtBQUt3RSxNQUFPLEdBQ3BDeEUsS0FBS2tFLFNBQVNvRCxPQUFPLEdBQUtYLEtBQUtDLEdBQUssS0FFcENtQixFQUFTdkcsVUFBVStGLFNBQVN2RSxLQUFLaEQsTUFFMUJBLEtBQUsrRCxZQUdUa0UsRUFuQmUsQ0FvQnRCRixHQUVFSSxFQUFTLFNBQVVwRCxHQUdyQixTQUFTb0QsSUFFUCxPQURBdEksRUFBZUcsS0FBTW1JLEdBQ2QzRSxFQUEwQnhELE1BQU9tSSxFQUFPNUUsV0FBYWhCLE9BQU95QyxlQUFlbUQsSUFBU2xELE1BQU1qRixLQUFNNkMsWUFrQ3pHLE9BdENBSSxFQUFTa0YsRUFBUXBELEdBT2pCbEQsRUFBWXNHLEVBQVEsQ0FBQyxDQUNuQjdILElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRyxlQUVMcEcsS0FBS29JLGFBQ0xwSSxLQUFLb0ksV0FBV2xELEVBQVVBLEdBRTFCbEYsS0FBS2tFLFNBQVNvQyxPQUVQdEcsS0FBSytELFVBRWIsQ0FDRHpELElBQUssYUFDTFAsTUFBTyxXQUNMLElBQUl3RixFQUFVMUMsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUUyQyxFQUFVM0MsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFFOUVlLEVBQU81RCxLQUFLd0UsTUFDWlUsRUFBV3RCLEVBQU8sRUFDbEJtQyxFQUFNbkMsRUFBTyxHQUVqQjVELEtBQUtrRSxTQUFTSyxTQUFTZ0IsRUFBVVEsRUFBS1AsRUFBVU8sRUFBS2IsRUFBaUIsRUFBTmEsRUFBU2IsRUFBaUIsRUFBTmEsR0FFcEYvRixLQUFLa0UsU0FBUzBCLGdCQUdYdUMsRUF2Q0ksQ0F3Q1h4RSxHQUVFMEUsRUFBTSxTQUFVdEQsR0FHbEIsU0FBU3NELElBRVAsT0FEQXhJLEVBQWVHLEtBQU1xSSxHQUNkN0UsRUFBMEJ4RCxNQUFPcUksRUFBSTlFLFdBQWFoQixPQUFPeUMsZUFBZXFELElBQU1wRCxNQUFNakYsS0FBTTZDLFlBa0NuRyxPQXRDQUksRUFBU29GLEVBQUt0RCxHQU9kbEQsRUFBWXdHLEVBQUssQ0FBQyxDQUNoQi9ILElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRixpQkFFTHBGLEtBQUtzSSxVQUNMdEksS0FBS3NJLFFBQVFwRCxFQUFVQSxHQUV2QmxGLEtBQUtrRSxTQUFTb0IsU0FFUHRGLEtBQUsrRCxVQUViLENBQ0R6RCxJQUFLLFVBQ0xQLE1BQU8sV0FDTCxJQUFJd0YsRUFBVTFDLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMkMsRUFBVTNDLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBRTlFZSxFQUFPNUQsS0FBS3dFLE1BQ1pVLEVBQVd0QixFQUFPLEVBQ2xCbUMsRUFBTW5DLEVBQU8sR0FFakI1RCxLQUFLa0UsU0FBU3FFLFdBQVdoRCxFQUFVUSxFQUFLUCxFQUFVTyxFQUFLYixFQUFpQixFQUFOYSxFQUFTYixFQUFpQixFQUFOYSxHQUV0Ri9GLEtBQUtrRSxTQUFTMEIsZ0JBR1h5QyxFQXZDQyxDQXdDUjFFLEdBRUU2RSxFQUFXLFNBQVV6RCxHQUd2QixTQUFTeUQsSUFFUCxPQURBM0ksRUFBZUcsS0FBTXdJLEdBQ2RoRixFQUEwQnhELE1BQU93SSxFQUFTakYsV0FBYWhCLE9BQU95QyxlQUFld0QsSUFBV3ZELE1BQU1qRixLQUFNNkMsWUFvQzdHLE9BeENBSSxFQUFTdUYsRUFBVXpELEdBT25CbEQsRUFBWTJHLEVBQVUsQ0FBQyxDQUNyQmxJLElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRyxlQUVMcEcsS0FBS3lJLGVBQ0x6SSxLQUFLeUksYUFBYXZELEVBQVVBLEdBRTVCbEYsS0FBS2tFLFNBQVNvQyxPQUVQdEcsS0FBSytELFVBRWIsQ0FDRHpELElBQUssZUFDTFAsTUFBTyxXQUNMLElBQUl3RixFQUFVMUMsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUUyQyxFQUFVM0MsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFFOUVlLEVBQU81RCxLQUFLd0UsTUFDWlUsRUFBV3RCLEVBQU8sRUFDbEI2QixFQUFjN0IsRUFBTyxFQUV6QjVELEtBQUtrRSxTQUFTd0IsT0FBT0QsRUFBY0YsRUFBU0MsR0FDNUN4RixLQUFLa0UsU0FBU3lCLE9BQU9ULEVBQVdLLEVBQVNMLEVBQVdNLEdBQ3BEeEYsS0FBS2tFLFNBQVN5QixPQUFPSixFQUFTTCxFQUFXTSxHQUV6Q3hGLEtBQUtrRSxTQUFTMEIsZ0JBR1g0QyxFQXpDTSxDQTBDYjdFLEdBRUUrRSxFQUFtQixTQUFVQyxHQUcvQixTQUFTRCxJQUVQLE9BREE3SSxFQUFlRyxLQUFNMEksR0FDZGxGLEVBQTBCeEQsTUFBTzBJLEVBQWlCbkYsV0FBYWhCLE9BQU95QyxlQUFlMEQsSUFBbUJ6RCxNQUFNakYsS0FBTTZDLFlBZ0I3SCxPQXBCQUksRUFBU3lGLEVBQWtCQyxHQU8zQjlHLEVBQVk2RyxFQUFrQixDQUFDLENBQzdCcEksSUFBSyxXQUNMUCxNQUFPLFdBQ0wsSUFBSTZELEVBQU81RCxLQUFLd0UsTUFPaEIsT0FMQXhFLEtBQUtrRSxTQUFTbUQsVUFBVXpELEVBQU1BLEdBQzlCNUQsS0FBS2tFLFNBQVNvRCxPQUFPLElBQU1YLEtBQUtDLEdBQUssS0FFckM0QixFQUFTaEgsVUFBVStGLFNBQVN2RSxLQUFLaEQsTUFFMUJBLEtBQUsrRCxZQUdUMkUsRUFyQmMsQ0FzQnJCRixHQUVFSSxFQUFVLFNBQVU3RCxHQUd0QixTQUFTNkQsSUFFUCxPQURBL0ksRUFBZUcsS0FBTTRJLEdBQ2RwRixFQUEwQnhELE1BQU80SSxFQUFRckYsV0FBYWhCLE9BQU95QyxlQUFlNEQsSUFBVTNELE1BQU1qRixLQUFNNkMsWUFxQzNHLE9BekNBSSxFQUFTMkYsRUFBUzdELEdBT2xCbEQsRUFBWStHLEVBQVMsQ0FBQyxDQUNwQnRJLElBQUssV0FDTFAsTUFBTyxXQUNMLElBQUltRixFQUFXbEYsS0FBS3dFLE1BQVEsRUFXNUIsT0FUQXhFLEtBQUtrRSxTQUFTaUIsWUFFZG5GLEtBQUtvRyxlQUVMcEcsS0FBSzZJLGNBQ0w3SSxLQUFLNkksWUFBWTNELEVBQVVBLEdBRTNCbEYsS0FBS2tFLFNBQVNvQyxPQUVQdEcsS0FBSytELFVBRWIsQ0FDRHpELElBQUssY0FDTFAsTUFBTyxXQUNMLElBQUl3RixFQUFVMUMsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUUyQyxFQUFVM0MsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFFOUVlLEVBQU81RCxLQUFLd0UsTUFDWlUsRUFBV3RCLEVBQU8sRUFDbEI2QixFQUFjN0IsRUFBTyxFQUV6QjVELEtBQUtrRSxTQUFTd0IsT0FBT0QsRUFBY0YsRUFBU0MsR0FDNUN4RixLQUFLa0UsU0FBU3lCLE9BQU9ULEVBQVdLLEVBQVNFLEVBQWNELEdBQ3ZEeEYsS0FBS2tFLFNBQVN5QixPQUFPRixFQUFjRixFQUFTTCxFQUFXTSxHQUN2RHhGLEtBQUtrRSxTQUFTeUIsT0FBT0osRUFBU0UsRUFBY0QsR0FFNUN4RixLQUFLa0UsU0FBUzBCLGdCQUdYZ0QsRUExQ0ssQ0EyQ1pqRixHQUVFbUYsRUFBYSxTQUFVQyxHQUd6QixTQUFTRCxJQUVQLE9BREFqSixFQUFlRyxLQUFNOEksR0FDZHRGLEVBQTBCeEQsTUFBTzhJLEVBQVd2RixXQUFhaEIsT0FBT3lDLGVBQWU4RCxJQUFhN0QsTUFBTWpGLEtBQU02QyxZQXFDakgsT0F6Q0FJLEVBQVM2RixFQUFZQyxHQU9yQmxILEVBQVlpSCxFQUFZLENBQUMsQ0FDdkJ4SSxJQUFLLFdBQ0xQLE1BQU8sV0FDTCxJQUFJbUYsRUFBV2xGLEtBQUt3RSxNQUFRLEVBVzVCLE9BVEF4RSxLQUFLa0UsU0FBU2lCLFlBRWRuRixLQUFLb0YsaUJBRUxwRixLQUFLNkksY0FDTDdJLEtBQUs2SSxZQUFZM0QsRUFBVUEsR0FFM0JsRixLQUFLa0UsU0FBU29CLFNBRVB0RixLQUFLK0QsVUFFYixDQUNEekQsSUFBSyxjQUNMUCxNQUFPLFdBQ0wsSUFBSXdGLEVBQVUxQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUM5RTJDLEVBQVUzQyxVQUFVWCxPQUFTLFFBQXNCYixJQUFqQndCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUU5RWUsRUFBTzVELEtBQUt3RSxNQUNaVSxFQUFXdEIsRUFBTyxFQUFJLEVBQ3RCNkIsRUFBYzdCLEVBQU8sRUFFekI1RCxLQUFLa0UsU0FBU3dCLE9BQU9ELEVBQWNGLEVBQVNDLEVBQVUsR0FDdER4RixLQUFLa0UsU0FBU3lCLE9BQU9ULEVBQVdLLEVBQVNFLEVBQWNELEdBQ3ZEeEYsS0FBS2tFLFNBQVN5QixPQUFPRixFQUFjRixFQUFTTCxFQUFXTSxHQUN2RHhGLEtBQUtrRSxTQUFTeUIsT0FBT0osRUFBVSxFQUFHRSxFQUFjRCxHQUVoRHhGLEtBQUtrRSxTQUFTMEIsZ0JBR1hrRCxFQTFDUSxDQTJDZkYsR0FFRUksRUFBUyxDQUNYLEtBQVFsRSxFQUNSLE1BQVNlLEVBQ1QsS0FBUUcsRUFDUixhQUFjRSxFQUNkLElBQU9DLEVBQ1AsV0FBWVUsRUFDWixLQUFRQyxFQUNSLEtBQVFFLEVBQ1IsS0FBUUMsRUFDUixnQkFBaUJFLEVBQ2pCLE1BQVNLLEVBQ1QsT0FBVUUsRUFDVixrQkFBbUJHLEVBQ25CLFNBQVlFLEVBQ1osc0JBQXVCRSxFQUN2QixPQUFVRSxFQUNWLElBQU9FLEVBQ1AsU0FBWUcsRUFDWixvQkFBcUJFLEVBQ3JCLFFBQVdFLEVBQ1gsY0FBZUUsR0FhYkcsRUFBcUIsR0FFekIsU0FBU0MsSUFDUCxJQUFJQyxFQUFxQnRHLFVBQVVYLE9BQVMsUUFBc0JiLElBQWpCd0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBRXpGdUcsRUFBYTdHLE9BQU84RyxLQUFLTCxHQUU3QkcsRUFBbUJHLFNBQVEsU0FBVUMsR0FDbkNILEVBQVdJLE9BQU9KLEVBQVdLLFFBQVFGLEdBQVksTUFHbkQsSUFBSUcsRUFBYy9DLEtBQUtnRCxNQUFNaEQsS0FBS2lELFNBQVdSLEVBQVdsSCxRQUV4RCxPQUFPa0gsRUFBV00sR0FLcEIsU0FBU0csSUFDUCxJQUFJTixFQUFZMUcsVUFBVVgsT0FBUyxRQUFzQmIsSUFBakJ3QixVQUFVLEdBQW1CQSxVQUFVLEdBQUssU0FDaEZnQixFQUFrQmhCLFVBQVUsR0FDNUJpQixFQUFlakIsVUFBVSxHQUN6QmUsRUFBT2YsVUFBVSxHQUVqQmlILEVBQWdCOUYsU0FBU0MsY0FBYyxVQUN2QzhGLEVBQWlCRCxFQUFjM0YsV0FBVyxNQUMxQzZGLEVBQW1CLEVBQVBwRyxFQUdacUcsRUFBUSxJQUFJdEcsRUFESnNGLEVBQW1CTSxJQUNUM0YsRUFBTUMsRUFBaUJDLEdBRXpDb0csRUFBVUgsRUFBZUksY0FBY0YsRUFBTTFDLFdBQVksVUFPN0QsT0FMQXVDLEVBQWMxRixNQUFRNEYsRUFDdEJGLEVBQWN6RixPQUFTMkYsRUFFdkJFLEVBQVFYLFVBQVlBLEVBRWJXLEVBOEJULE9BcERBdkgsRUFBU3NHLEVBQW9CRCxFQTFCTixDQUNyQixPQUFVQSxFQUFhLEtBQ3ZCLG9CQUFxQkEsRUFBTyxxQkFDNUIsa0JBQW1CQSxFQUFhLEtBQ2hDLG1CQUFvQkEsRUFBaUIsU0FDckMsbUJBQW9CQSxFQUFPLHVCQUMzQixvQkFBcUJBLEVBQWUsT0FDcEMsa0JBQW1CQSxFQUFPLGlCQWtFZCxDQUNaYSxLQUFNQSxFQUNOTyxTQXhCRixTQUFrQkMsR0FDaEIsSUFBSUMsT0FBaUIsRUFDakJDLE9BQW9CLEVBRXhCLE9BQU9GLEVBQVVHLEtBQUksU0FBVUMsRUFBT0MsRUFBT0MsR0FDM0MsSUFBSXBCLE9BQVksRUFhaEIsT0FYYyxJQUFWbUIsR0FDRm5CLEVBQVlMLElBRVpvQixFQURBQyxFQUFvQmhCLEdBRVhtQixJQUFVQyxFQUFLekksT0FBUyxFQUNqQ3FILEVBQVlMLEVBQWUsQ0FBQ3FCLEVBQW1CRCxLQUUvQ2YsRUFBWUwsRUFBZSxDQUFDcUIsSUFDNUJBLEVBQW9CaEIsR0FHZk0sRUFBS04sRUFBV2tCLFFBcGtDdURHLEtDQTlFQyxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCMUosSUFBakIySixFQUNILE9BQU9BLEVBQWF2TCxRQUdyQixJQUFJRCxFQUFTcUwsRUFBeUJFLEdBQVksQ0FHakR0TCxRQUFTLElBT1YsT0FIQXdMLEVBQW9CRixHQUFVL0gsS0FBS3hELEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVNxTCxHQUdwRXRMLEVBQU9DLFFDcEJmcUwsRUFBb0JJLEVBQUksQ0FBQ3pMLEVBQVMwTCxLQUNqQyxJQUFJLElBQUk3SyxLQUFPNkssRUFDWEwsRUFBb0JNLEVBQUVELEVBQVk3SyxLQUFTd0ssRUFBb0JNLEVBQUUzTCxFQUFTYSxJQUM1RWlDLE9BQU9DLGVBQWUvQyxFQUFTYSxFQUFLLENBQUU4QixZQUFZLEVBQU1pSixJQUFLRixFQUFXN0ssTUNKM0V3SyxFQUFvQk0sRUFBSSxDQUFDRSxFQUFLQyxJQUFVaEosT0FBT2YsVUFBVXVCLGVBQWVDLEtBQUtzSSxFQUFLQyxHLGdDQ0FsRixjQVFXQyxtQkFBbUJDLEVBQWlCQyxFQUFhQyxHQUNwRCxHQUFJRixFQUFNdkosU0FBV3dKLEVBQUssT0FBT0QsRUFDakMsR0FBSUEsRUFBTXZKLE9BQVN3SixFQUFLLE9BQU9ELEVBQU1HLE1BQU0sRUFBR0YsR0FDOUMsR0FBSUQsRUFBTXZKLE9BQVN3SixFQUNmLEtBQU9ELEVBQU12SixTQUFXd0osR0FDcEJELEVBQU1JLEtBQUtGLE1BQUFBLEVBQUFBLEVBQVksR0FDL0IsT0FBT0YsRUFRSkQsa0JBQXFCTSxFQUF3QkMsR0FDaEQsTUFBTTFDLEVBQU85RyxPQUFPOEcsS0FBSzBDLEdBQ3pCeEosT0FBT3lKLFFBQVFGLEdBQVl4QyxTQUFRMkMsSUFDL0IsTUFBTTNMLEVBQU0yTCxFQUFLLEdBQ2pCLEdBQUk1QyxFQUFLNkMsU0FBUzVMLEdBQU0sQ0FDcEIsTUFBTVAsRUFBUWtNLEVBQUssR0FHbkJGLEVBQWN6TCxHQUFPUCxRQzNCOUIsTUFBZW9NLEVBTWxCOUksWUFBWVAsR0FDUixJQUFJc0osRUFBa0J0SixFQUl0QixHQUgrQixpQkFBcEJzSixJQUNQQSxFQUFrQnBJLFNBQVNxSSxlQUFlRCxFQUFnQkUsUUFBUSxPQUFRLE1BRTFFRixhQUEyQkcsa0JBQzNCdk0sS0FBS3dNLFFBQVVKLEVBQWdCakksV0FBVyxVQUV6QyxNQUFJaUksYUFBMkJLLDBCQUcvQixNQUFNQyxNQUFNLDRFQUZiMU0sS0FBS3dNLFFBQVVKLEVBSW5CcE0sS0FBSzJNLGFBQWUsQ0FDaEJDLE1BQU8sV0FDUEMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLFlBQVksR0FFaEIvTSxLQUFLZ04sV0FBYSxHQUdmQyxnQkFBZ0JDLEdBQ25CLGFBQXNCQSxFQUFTbE4sS0FBSzJNLGNBR2pDUSxnQkFBZ0JyQixFQUFtQ3NCLEdBQ2xEQSxFQUFhQSxFQUFZOUQsU0FBUytELElBQ2xDLE1BQU1DLEVBQ0Z0TixLQUFLZ04sV0FBV08sTUFBTUMsR0FBa0JBLEVBQWNDLE1BQVFKLElBQzlEQyxFQUNBLGFBQXNCeEIsRUFBWXdCLEVBQVlKLFNBRTlDUSxRQUFRQyxLQUFLLG1CQUFtQk4sbUJBR25Dck4sS0FBS2dOLFdBQVcxRCxTQUFTc0UsR0FBVSxhQUFzQjlCLEVBQVk4QixFQUFNVixZLGFDRmpGLFNBQVNXLEVBQWtCQyxFQUErQjdELEVBQThCUSxHQUUzRixHQURBcUQsRUFBSXhKLFVBQVltRyxFQUNIcEosTUFBVDRJLEVBQ0EsSUFDSTZELEVBQUl4SixXQUFZLElBQUF1RixNQUFLSSxFQUFPUSxFQUFPLFNBQ3JDLFNBQ0VpRCxRQUFRQyxLQUFLLEdBQUcxRCwyQ0M1Q2IsTUFBTThELEVBSWpCMUssWUFBWXlLLEdBSFosS0FBQUUsdUJBQXlCLElBSXJCaE8sS0FBSzhOLElBQU1BLEVBSVJHLHVCQUF1QnRCLEVBQTRCdUIsR0FDdEQsTUFBTSxJQUFFSixHQUFROU4sTUFDVixNQUFFb0UsRUFBSyxPQUFFQyxHQUFXeUosRUFBSUssT0FDOUJuTyxLQUFLOE4sSUFBSU0sVUFBVSxFQUFHLEVBQUdoSyxFQUFPQyxHQUVoQyxJQUFJZ0ssRUFBZXJPLEtBQUtzTyxrQkFPeEIsT0FOQXRPLEtBQUt1TyxZQUFZRixFQUFjLE9BQVEsR0FFbkMxQixFQUFhRSxXQUFhRixFQUFhQyxRQUN2Q3lCLEVBQWVyTyxLQUFLd08sVUFBVTdCLEVBQWFDLE1BQU95QixJQUNsRDFCLEVBQWFHLGFBQ2J1QixFQUFlck8sS0FBS3lPLFdBQVdKLEVBQWNILElBQzFDRyxFQUdKSyxXQUFXQyxHQUNkLE1BQU1DLEVBQUlELEVBQU1DLEVBQUk1TyxLQUFLZ08sdUJBQ3pCLE1BQU8sQ0FDSHhILEVBQUdtSSxFQUFNbkksRUFDVEMsRUFBR2tJLEVBQU1sSSxFQUNUb0ksRUFBR0YsRUFBTUUsRUFDVEQsRUFBR0QsRUFBTUMsRUFBSUEsR0FJZEUsd0JBQXdCWixFQUEwQlMsR0FDckQsTUFBTSxJQUFFYixHQUFROU4sS0FFVitPLEVBQU1wSSxLQUFLb0ksT0FBT2IsRUFBTzFELEtBQUlvRCxHQUFTakgsS0FBS29JLE9BQU9uQixFQUFNb0IsWUFDeEQsVUFBRUMsRUFBUyxXQUFFQyxHRGRwQixTQUFxQkMsRUFBaUJDLEdBQ3pDLE1BQU1DLEVBQVVGLEVDV08sR0RWakJHLEVBQVkzSSxLQUFLNEksSUFBSSxHQUFJNUksS0FBS2dELE1BQU1oRCxLQUFLNkksTUFBTUgsS0FDL0NJLEVBQVdKLEVBQVVDLEVBR3JCSixHQURPTyxFQUFXLEdBRFYsQ0FBQyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUNBbEMsTUFBTW1DLEdBQU9BLEVBQUlELElBQWEsSUFDdkNILEVBRTFCLE1BQU8sQ0FDSEosV0FBQUEsRUFDQUQsVUFIY3RJLEtBQUtnSixLQUFLUixFQUFVRCxJQ09BVSxDQUFZYixHQUN4Q2MsRUFBVWxCLEVBQU1DLEdBQUtLLEVBQVksR0FDdkNuQixFQUFJbkosVUFBWSxFQUNoQm1KLEVBQUlwSixZQUFjLE9BQ2xCLElBQUssSUFBSXpDLEVBQUksRUFBR0EsR0FBS2dOLEVBQVksRUFBR2hOLElBQUssQ0FDckMsTUFBTXdFLEVBQUlrSSxFQUFNbEksRUFBSW9KLEVBQVU1TixFQUN4QjZOLEVBQU1DLFFBQVFkLEVBQVksRUFBSWhOLEdBQUtpTixJQUNuQyxNQUFFOUssR0FBVXBFLEtBQUs4TixJQUFJa0MsWUFBWUYsR0FDdkNoQyxFQUFJbUMsU0FBU0gsRUFBS25CLEVBQU1uSSxFQUFHQyxHQUMzQnFILEVBQUkzSSxZQUNKMkksRUFBSXBJLE9BQU9pSixFQUFNbkksRUFBSXBDLEVBQU9xQyxHQUM1QnFILEVBQUluSSxPQUFPZ0osRUFBTW5JLEVBQUltSSxFQUFNRSxFQUFHcEksR0FDOUJxSCxFQUFJeEksU0FDSndJLEVBQUlsSSxZQUVSLE1BQU8sQ0FDSHFKLFVBQUFBLEVBQ0FDLFdBQUFBLEdBSUFYLFlBQVlJLEVBQWtCbEUsRUFBZXJHLEdBQ2pEcEUsS0FBSzhOLElBQUlwSixZQUFjK0YsRUFDdkJ6SyxLQUFLOE4sSUFBSW5KLFVBQVlQLE1BQUFBLEVBQUFBLEVBQVMsRUFDOUJwRSxLQUFLOE4sSUFBSXZGLFdBQVdvRyxFQUFNbkksRUFBR21JLEVBQU1sSSxFQUFHa0ksRUFBTUUsRUFBR0YsRUFBTUMsR0FDckQ1TyxLQUFLOE4sSUFBSXBKLFlBQWMsUUFHbkI0SixrQkFDSixNQUFNLE1BQUVsSyxFQUFLLE9BQUVDLEdBQVdyRSxLQUFLOE4sSUFBSUssT0FDN0IrQixFQUFVdkosS0FBS2dELE1BQU1oRCxLQUFLd0osSUFBSS9MLEVBQU9DLEdBQVUsS0FDckQsTUFBTyxDQUNIbUMsRUFBRzBKLEVBQ0h6SixFQUFHeUosRUFDSHJCLEVBQUd6SyxFQUFRLEVBQUk4TCxFQUNmdEIsRUFBR3ZLLEVBQVMsRUFBSTZMLEdBSWhCRSx5QkFBeUJDLEVBQWlCQyxHQUM5QyxNQUFPLENBQ0g5SixFQUFHNkosRUFBSzdKLEVBQ1JDLEVBQUc0SixFQUFLNUosRUFBSTZKLEVBQU83SixFQUFJNEosRUFBSzVKLEVBQUk2SixFQUFPN0osRUFBSTZKLEVBQU8xQixFQUNsREMsRUFBR3dCLEVBQUt4QixFQUNSRCxFQUFHeUIsRUFBS3pCLEVBQUkwQixFQUFPMUIsR0FJbkIyQixlQUFlNUIsR0FDbkIsTUFDTTZCLEVBQU83SixLQUFLZ0QsTUFBTWdGLEVBQU1DLEVBREQsSUFFN0IsTUFBTyxDQUNIcEksRUFBR21JLEVBQU1uSSxFQUNUQyxFQUFHa0ksRUFBTWxJLEVBQUlrSSxFQUFNQyxFQUFJNEIsRUFDdkI1QixFQUFHNEIsRUFDSDNCLEVBQUdGLEVBQU1FLEdBSVRMLFVBQVU1QixFQUFleUIsR0FDN0IsTUFBTSxJQUFFUCxHQUFROU4sS0FDVnlRLEVBQWF6USxLQUFLMFEsY0FBY3JDLElBQ2hDLEVBQUU3SCxFQUFDLEVBQUVDLEVBQUMsRUFBRW9JLEVBQUMsRUFBRUQsR0FBTTZCLEVBQ3ZCM0MsRUFBSTZDLEtBQU8sR0FBR2hLLEtBQUtnRCxNQUFNaUYsRUFBSSxrQkFDN0IsTUFBTWdDLEVBQWtCOUMsRUFBSWtDLFlBQVlwRCxHQUdsQ2lFLEVBQWdCckssRUFBSXFJLEVBQUksRUFGWitCLEVBQWdCeE0sTUFFWSxFQUN4QzBNLEVBQWdCckssRUFBSW1JLEVBQUksRUFGWGdDLEVBQWdCRyx3QkFFWSxFQUcvQyxPQUZBakQsRUFBSW1DLFNBQVNyRCxFQUFPaUUsRUFBZUMsRUFBZWpDLEdBQ2xEN08sS0FBS3VPLFlBQVlrQyxFQUFZLE9BQVEsR0FDOUJ6USxLQUFLb1EseUJBQXlCL0IsRUFBY29DLEdBRy9DQyxjQUFjckMsR0FDbEIsTUFDTW1DLEVBQU83SixLQUFLZ0QsTUFBTTBFLEVBQWFPLEVBRFIsSUFFN0IsTUFBTyxDQUNIcEksRUFBRzZILEVBQWE3SCxFQUNoQkMsRUFBRzRILEVBQWE1SCxFQUNoQm1JLEVBQUc0QixFQUNIM0IsRUFBR1IsRUFBYVEsR0FJaEJtQyxzQkFBc0JyQyxFQUFrQmYsR0FDNUMsTUFDTSxJQUFFRSxHQUFROU4sTUFDVixRQUFFa04sRUFBTyxLQUFFTyxHQUFTRyxFQUcxQixHQURBRSxFQUFJeEosVUFBWTRJLEVBQVF6QyxNQUNIcEosTUFBakI2TCxFQUFRakQsTUFDUixJQUNJNkQsRUFBSXhKLFdBQVksSUFBQXVGLE1BQUtxRCxFQUFRakQsTUFBT2lELEVBQVF6QyxNQUFPLFNBQ3JELFNBQ0VpRCxRQUFRQyxLQUFLLEdBQUdULEVBQVFqRCw4Q0FJaEM2RCxFQUFJcEosWUFBYyxRQUNsQm9KLEVBQUluSixVQUFZLEVBQ2hCLE1BQU1zTSxFQUFnQnRLLEtBQUt3SixJQUFJeEIsRUFBTUUsRUFBR0YsRUFBTUMsR0FDeENzQyxFQWhCb0IsR0FnQkxELEVBQ2ZFLEVBQVcsQ0FDYjNLLEVBQUdtSSxFQUFNbkksR0FBS3lLLEVBQWdCQyxHQUFnQixFQUM5Q3pLLEVBQUdrSSxFQUFNbEksR0FBS3dLLEVBQWdCQyxHQUFnQixFQUM5Q3JDLEVBQUdxQyxFQUNIdEMsRUFBR3NDLEdBRVBwRCxFQUFJdkosU0FBUzRNLEVBQVMzSyxFQUFHMkssRUFBUzFLLEVBQUcwSyxFQUFTdEMsRUFBR3NDLEVBQVN2QyxHQUMxRGQsRUFBSXZGLFdBQVc0SSxFQUFTM0ssRUFBRzJLLEVBQVMxSyxFQUFHMEssRUFBU3RDLEVBQUdzQyxFQUFTdkMsR0FDNUQsTUFBTXdDLEVBQVMsQ0FDWDVLLEVBQUdtSSxFQUFNbkksRUFBSXlLLEVBQ2J4SyxFQUFHa0ksRUFBTWxJLEVBQUl3SyxFQUFnQixHQUVqQ25ELEVBQUl4SixVQUFZLFFBQ2hCd0osRUFBSTZDLEtBQU8sR0FBR2hLLEtBQUtnRCxNQUFNc0gsRUFBZ0Isa0JBQ3pDLE1BQU0sd0JBQUVGLEdBQTRCakQsRUFBSWtDLFlBQVl2QyxHQUNwREssRUFBSW1DLFNBQVN4QyxFQUFNMkQsRUFBTzVLLEVBQUc0SyxFQUFPM0ssRUFBSXNLLEVBQTBCLEVBQUdwQyxFQUFNRSxFQUFJb0MsR0FHM0V4QyxXQUFXSixFQUF5QkgsR0FDeEMsTUFBTW1ELEVBQWNyUixLQUFLdVEsZUFBZWxDLEdBRWxDaUQsRUFEb0IsSUFDYkQsRUFBWXhDLEVBQ3pCd0MsRUFBWTdLLEVBQUk2SyxFQUFZN0ssR0FBSzZLLEVBQVl4QyxFQUFJeUMsR0FBUSxFQUN6REQsRUFBWXhDLEVBQUl5QyxFQUVoQixNQUNNQyxFQUFTNUssS0FBS2dKLEtBQUt6QixFQUFPaE0sT0FERCxHQUV6QnNQLEVBQVNILEVBQVl4QyxFQUFJbEksS0FBS3dKLElBQUlqQyxFQUFPaE0sT0FGaEIsR0FHekJ1UCxFQUFTSixFQUFZekMsRUFBSTJDLEVBQy9CLElBQUssSUFBSXRQLEVBQUksRUFBR0EsRUFBSWlNLEVBQU9oTSxPQUFRRCxJQUMvQmpDLEtBQUtnUixzQkFBc0IsQ0FDdkJ4SyxFQUFHNkssRUFBWTdLLEVBQUlnTCxHQUFVdlAsRUFOTixHQU92QndFLEVBQUc0SyxFQUFZNUssRUFBSWdMLEVBQVU5SyxLQUFLZ0QsTUFBTTFILEVBUGpCLEdBUXZCNE0sRUFBRzJDLEVBQ0g1QyxFQUFHNkMsR0FDSnZELEVBQU9qTSxJQUVkLE9BQU9qQyxLQUFLb1EseUJBQXlCL0IsRUFBY2dELElDckw1QyxNQUFlSyxFQUkxQnJPLFlBQVl5SyxHQUNSOU4sS0FBSzJSLFFBQVUsSUFBSTVELEVBQVFELEdBQzNCOU4sS0FBSzhOLElBQU1BLEdDSkosTUFBTThELFVBQWdCRixFQUlqQ3JPLFlBQVl5SyxHQUNSK0QsTUFBTS9ELEdBSlYsS0FBQWdFLGVBQWlCLElBQ2pCLEtBQUFDLHFCQUF1QixFQU12QkMsU0FBU0MsRUFBa0IvRCxFQUEwQnZCLEdBQ2pELElBQUl1RixFQUFZbFMsS0FBSzJSLFFBQVExRCx1QkFBdUJ0QixFQUFjdUIsR0FDOURpRSxFQUFjLEVBQ2xCLEdBQUl4RixFQUFhSSxXQUFZLENBQ3pCLE1BQU1xRixFQUFpQkYsRUFBVXRELEVBQ2pDc0QsRUFBWWxTLEtBQUsyUixRQUFRakQsV0FBV3dELEdBQ3BDQyxFQUFjeEwsS0FBS2dELE1BQU15SSxFQUFpQkYsRUFBVXRELEdBRXhELE1BQU0sVUFBRUssRUFBUyxXQUFFQyxHQUFlbFAsS0FBSzJSLFFBQVE3Qyx3QkFBd0JaLEVBQVFnRSxHQUN6RUcsRUFBcUJILEVBQVV0RCxJQUFNSyxFQUFZLEdBQUtDLEdBRXREb0QsRUFBYXBFLEVBQU9oTSxPQUNwQnFRLEVBQVdOLEVBQU8vUCxPQUVsQnNRLEVBQWVOLEVBQVVyRCxFQUFJMEQsRUFDN0JFLEVBQWVELEdBQWdCLEVBQUl4UyxLQUFLOFIsZ0JBQ3hDWSxFQUFxQkYsRUFBZSxFQUFJQyxFQUV4Q0UsRUFBaUJELEVBQXFCSixFQUU1Q3RTLEtBQUs4TixJQUFJeEosVUFBWSxRQUNyQixNQUFNc08sRUFBZ0JWLEVBQVV6TCxFQUFJeUwsRUFBVXRELEVBQ3hDaUUsRUFBaUJsTSxLQUFLZ0QsTUFBdUIsR0FBakJnSixHQUNsQzNTLEtBQUs4TixJQUFJNkMsS0FBTyxHQUFHa0MsaUJBRW5CLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJUCxFQUFVTyxJQUFLLENBQy9CLE1BQU1DLEVBQWlCYixFQUFVMUwsRUFBSXNNLEVBQUlOLEVBQWVDLEVBQ3hELEdBQUk5RixFQUFhSSxXQUFZLENBQ3pCL00sS0FBSzhOLElBQUk2QyxLQUFPLEdBQUd3QixpQkFDbkJuUyxLQUFLOE4sSUFBSXhKLFVBQVksUUFDckIsTUFBTSxNQUFFRixHQUFVcEUsS0FBSzhOLElBQUlrQyxZQUFZaUMsRUFBT2EsSUFDeENFLEVBQVNELEVBQWtCTCxFQUFxQixFQUFLdE8sRUFBUSxFQUM3RDZPLEVBQVNmLEVBQVV6TCxFQUFJeUwsRUFBVXRELEVBQWtCLEdBQWR1RCxFQUMzQ25TLEtBQUs4TixJQUFJbUMsU0FBU2dDLEVBQU9hLEdBQUlFLEVBQVFDLEVBQVFULEdBQzdDeFMsS0FBSzhOLElBQUk2QyxLQUFPLEdBQUdrQyxpQkFFdkIsSUFBSyxJQUFJSyxFQUFJLEVBQUdBLEVBQUlaLEVBQVlZLElBQUssQ0FDakMsTUFBTUMsRUFBVUosRUFBaUJHLEVBQUlQLEVBQy9CUyxFQUFVbEYsRUFBT2dGLEdBQUdsRSxPQUFPOEQsR0FBS1QsRUFDaENnQixFQUFVVCxFQUFnQlEsRUFDaENwVCxLQUFLc1QsUUFDREgsRUFDQUUsRUFDQVYsRUFDQVMsRUFDQWxGLEVBQU9nRixHQUFHaEcsUUFDVmdCLEVBQU9nRixHQUFHbEUsT0FBTzhELE1BTXpCUSxRQUFRQyxFQUFjQyxFQUFjcFAsRUFBZUMsRUFBZ0I2SSxFQUF1Qm5OLEdBQzlGQyxLQUFLeVQsUUFBUUYsRUFBTUMsRUFBTXBQLEVBQU9DLEVBQVE2SSxHQUN4QyxNQUFNLFVBQUV3RyxFQUFTLFlBQUVDLEdBQWdCekcsRUFDL0J5RyxHQUNBM1QsS0FBSzRULFVBQVVMLEVBQU1DLEVBQU1wUCxFQUFPQyxFQUFRc1AsR0FDMUNELEdBQ0ExVCxLQUFLNlQsWUFBWU4sRUFBTUMsRUFBTXBQLEVBQU9yRSxHQUdwQzBULFFBQVFGLEVBQWNDLEVBQWNwUCxFQUFlQyxFQUFnQjZJLEdBQ3ZFLE1BQU0sTUFBRXpDLEVBQUssTUFBRVIsR0FBVWlELEVBQ3pCVyxFQUFrQjdOLEtBQUs4TixJQUFLN0QsRUFBT1EsR0FDbkN6SyxLQUFLOE4sSUFBSXZKLFNBQVNnUCxFQUFNQyxFQUFNcFAsRUFBT0MsR0FHakN1UCxVQUFVTCxFQUFjQyxFQUFjcFAsRUFBZUMsRUFBZ0JzUCxHQUN6RTNULEtBQUs4TixJQUFJbkosVUFBWU4sRUFBU3NQLEVBQWMsRUFDNUMzVCxLQUFLOE4sSUFBSTNJLFlBQ1RuRixLQUFLOE4sSUFBSXBJLE9BQU82TixFQUFNQyxFQUFPblAsR0FDN0JyRSxLQUFLOE4sSUFBSW5JLE9BQU80TixFQUFNQyxHQUN0QnhULEtBQUs4TixJQUFJbkksT0FBTzROLEVBQU9uUCxFQUFPb1AsR0FDOUJ4VCxLQUFLOE4sSUFBSW5JLE9BQU80TixFQUFPblAsRUFBT29QLEVBQU9uUCxHQUNyQ3JFLEtBQUs4TixJQUFJcEosWUFBYyxRQUN2QjFFLEtBQUs4TixJQUFJeEksU0FHTHVPLFlBQVlOLEVBQWNDLEVBQWNwUCxFQUFlckUsR0FDM0RDLEtBQUs4TixJQUFJeEosVUFBWSxRQUNyQixNQUFNd1AsRUFBYy9ELE9BQU9oUSxHQUVyQmdVLEVBQWlCUixFQUFPblAsRUFBUSxFQUR4QnBFLEtBQUs4TixJQUFJa0MsWUFBWThELEdBQWExUCxNQUNFLEVBQ2xEcEUsS0FBSzhOLElBQUltQyxTQUNMNkQsRUFDQUMsRUFDQVAsRUFBT3hULEtBQUsrUixxQkFDWjNOLElDOUZMLE1BQU00UCxVQUFpQjdILEVBSzFCOUksWUFBWVAsR0FDUitPLE1BQU0vTyxHQUNOOUMsS0FBS2lVLEtBQU8sSUFBSXJDLEVBQVE1UixLQUFLd00sU0FHdEIwSCxNQUFFakMsR0FDVGpTLEtBQUttVSxXQUFhbEMsRUFHWG1DLE1BQUVsRyxHQUNULE1BQU0sT0FBRWhNLEdBQVdsQyxLQUFLbVUsV0FDeEIsSUFBS2pTLEVBQ0QsTUFBTXdLLE1BQU0sbUVBQ2hCLE1BQU0ySCxFQUFlbkcsRUFBTzFELEtBQUlvRCxHQUFTLGNBQXVCQSxFQUFPMUwsS0FDdkVsQyxLQUFLZ04sV0FBYXFILEVBQWE3SixLQUFJLENBQUNvRCxFQUFPbEQsSUFBVTFLLEtBQUtzVSxzQkFBc0IxRyxFQUFPbEQsS0FHaEY2SixlQUFXQyxHQUNsQixNQUFNckUsRUFBTXhKLEtBQUt3SixJQUFJcUUsRUFBTXRTLE9BQVFsQyxLQUFLZ04sV0FBVzlLLFFBQ25ELElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJa08sRUFBS2xPLElBQ3JCakMsS0FBS2dOLFdBQVcvSyxHQUFHd0wsS0FBTytHLEVBQU12UyxHQUloQ3FTLHNCQUFzQjFHLEVBQWlCbEQsR0FDM0MsTUFBTyxDQUNIc0UsT0FBUXBCLEVBQ1JILEtBQU0sUUFBUS9DLElBQ2R3QyxRQUFTLENBQ0x6QyxNQUFPOUQsS0FBS2dELE1BQXNCLFNBQWhCaEQsS0FBS2lELFVBQXFCNkssU0FBUyxJQUNyRGYsV0FBVyxFQUNYZ0IsY0FBYyxFQUNkZixZQUFhLEVBQ2IxSixXQUFPNUksSUFLWndJLE9BQ0g3SixLQUFLaVUsS0FBS2pDLFNBQVNoUyxLQUFLbVUsV0FBWW5VLEtBQUtnTixXQUFZaE4sS0FBSzJNLGVDNUNuRCxNQUFNZ0ksVUFBZ0JqRCxFQUdqQ3JPLFlBQVl5SyxHQUNSK0QsTUFBTS9ELEdBSFYsS0FBQThHLGVBQWlCLElBTWpCQyxRQUFRM0csRUFBMkJ2QixHQUMvQixNQUFNLElBQUVtQixHQUFROU4sS0FDVmtTLEVBQVlsUyxLQUFLMlIsUUFBUTFELHVCQUF1QnRCLEVBQWN1QixHQUM5RGxDLEVBQVVoTSxLQUFLOFUsdUJBQXVCNUcsR0FFdEM2RyxFQUFZcE8sS0FBS3dKLElBQUkrQixFQUFVckQsRUFBR3FELEVBQVV0RCxHQUFLNU8sS0FBSzRVLGVBQ3RESSxFQUFZLENBQ2R4TyxFQUFHMEwsRUFBVTFMLEVBQUkwTCxFQUFVckQsRUFBSSxFQUMvQnBJLEVBQUd5TCxFQUFVekwsRUFBSXlMLEVBQVV0RCxFQUFJLEdBR25DLElBQUlxRyxFQUFhLEVBQ2pCbkgsRUFBSXBKLFlBQWMsUUFDbEJvSixFQUFJNkMsS0FBTyxHQUFHaEssS0FBS2dELE1BQU1vTCxFQUFZLGtCQUVyQy9JLEVBQVExQyxTQUFRNEwsSUFDWmxWLEtBQUttVixnQkFBZ0JILEVBQVV4TyxFQUFHd08sRUFBVXZPLEVBQUdzTyxFQUFXRSxFQUFZQSxFQUFhQyxFQUFNRSxTQUN6RnZILEVBQWtCQyxFQUFLb0gsRUFBTWpMLE1BQU9pTCxFQUFNekssT0FDMUNxRCxFQUFJeEgsT0FDQTRPLEVBQU12QixZQUFjLEdBQ3BCM1QsS0FBS3FWLGFBQWFILEVBQU12QixhQUN4QnVCLEVBQU14QixXQUNOMVQsS0FBS3NWLFlBQVlKLEVBQU1uVixNQUFPaVYsRUFBVXhPLEVBQUd3TyxFQUFVdk8sRUFBR3NPLEVBQVdFLEVBQWFDLEVBQU1FLFFBQVUsR0FDcEdILEdBQWNDLEVBQU1FLFdBSXBCTix1QkFBdUI1RyxHQUMzQixNQUFNcUgsRUFBUXJILEVBQU8xRCxLQUFJb0QsR0FBU0EsRUFBTTdOLFFBQU95VixRQUFPLENBQUMxQyxFQUFHMkMsSUFBTTNDLEVBQUkyQyxHQUFHLEdBQ3ZFLE9BQU92SCxFQUFPMUQsS0FBSW9ELElBQVMsQ0FDdkJ3SCxRQUF1QixFQUFkeEgsRUFBTTdOLE1BQVk0RyxLQUFLQyxHQUFLMk8sRUFDckM5SyxNQUFPbUQsRUFBTVYsUUFBUXpDLE1BQ3JCa0osWUFBYS9GLEVBQU1WLFFBQVF5RyxZQUMzQjFKLE1BQU8yRCxFQUFNVixRQUFRakQsTUFDckJ5SixVQUFXOUYsRUFBTVYsUUFBUXdHLFVBQ3pCM1QsTUFBTzZOLEVBQU03TixVQUlib1YsZ0JBQWdCTyxFQUFpQkMsRUFBaUJDLEVBQWdCQyxFQUFvQkMsR0FDMUY5VixLQUFLOE4sSUFBSTNJLFlBQ1RuRixLQUFLOE4sSUFBSXBJLE9BQU9nUSxFQUFTQyxHQUN6QjNWLEtBQUs4TixJQUFJcEgsSUFBSWdQLEVBQVNDLEVBQVNDLEVBQVFDLEVBQVlDLEdBQ25EOVYsS0FBSzhOLElBQUluSSxPQUFPK1AsRUFBU0MsR0FHckJOLGFBQWFqUixHQUNqQnBFLEtBQUs4TixJQUFJbkosVUFBWVAsRUFDckJwRSxLQUFLOE4sSUFBSXhJLFNBR0xnUSxZQUFZdlYsRUFBZTJWLEVBQWlCQyxFQUFpQkMsRUFBZ0JSLEdBQ2pGLE1BQU1XLEVBQU9oRyxPQUFPaFEsSUFDZCxNQUFFcUUsRUFBSyx3QkFBRTJNLEdBQTRCL1EsS0FBSzhOLElBQUlrQyxZQUFZK0YsR0FDMUR2UCxFQUFLa1AsRUFBVS9PLEtBQUtxUCxJQUFJWixJQUFZUSxFQUFTeFIsR0FBV0EsRUFBUSxFQUNoRXFDLEVBQUtrUCxFQUFVaFAsS0FBS3NQLElBQUliLElBQVlRLEVBQVM3RSxHQUE2QkEsRUFBMEIsRUFDMUcvUSxLQUFLOE4sSUFBSXhKLFVBQVksUUFDckJ0RSxLQUFLOE4sSUFBSW1DLFNBQVM4RixFQUFNdlAsRUFBR0MsSUNoRTVCLE1BQU15UCxVQUFpQi9KLEVBSzFCOUksWUFBWVAsR0FDUitPLE1BQU0vTyxHQUNOOUMsS0FBS2lVLEtBQU8sSUFBSVUsRUFBUTNVLEtBQUt3TSxTQUd0QjBILE1BQUVqQyxHQUNUalMsS0FBS2dOLFdBQ0RpRixFQUFPekgsS0FBSzJMLEdBQVVuVyxLQUFLc1Usc0JBQXNCNkIsS0FHOUMvQixNQUFFcEYsR0FDVCxNQUFNLE9BQUU5TSxHQUFXbEMsS0FBS2dOLFdBQ3hCLElBQUs5SyxFQUNELE1BQU13SyxNQUFNLG1FQUNoQixNQUFNMEosRUFBZSxjQUF1QnBILEVBQVE5TSxHQUNwRGxDLEtBQUtnTixXQUFXeEMsS0FBSSxDQUFDNkwsRUFBUTNMLEtBQ3pCMkwsRUFBT3RXLE1BQVFxVyxFQUFhMUwsTUFJNUI0SixzQkFBc0I2QixHQUMxQixNQUFPLENBQ0hwVyxNQUFPLEVBQ1AwTixLQUFNMEksRUFDTmpKLFFBQVMsQ0FDTHpDLE1BQU85RCxLQUFLZ0QsTUFBc0IsU0FBaEJoRCxLQUFLaUQsVUFBcUI2SyxTQUFTLElBQ3JEZixXQUFXLEVBQ1hnQixjQUFjLEVBQ2RmLFlBQWEsRUFDYjFKLFdBQU81SSxJQUtad0ksT0FDSDdKLEtBQUtpVSxLQUFLWSxRQUFRN1UsS0FBS2dOLFdBQVloTixLQUFLMk0sZUN4Q2pDLFNBQVMySixFQUFXdlYsRUFBYytCLEdBQzdDLE9BQVEvQixFQUFLd1YsY0FBY0MsUUFDdkIsSUFBSyxNQUNELE9BQU8sSUFBSU4sRUFBU3BULEdBQ3hCLElBQUssTUFDRCxPQUFPLElBQUlrUixFQUFTbFIsR0FDeEIsUUFDSSxNQUFNLElBQUk0SixNQUFNLEdBQUczTCw4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9wYXR0ZXJub21hbHkvZGlzdC9wYXR0ZXJub21hbHkuanMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL21vZGVsL3V0aWxzLnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9tb2RlbC9DaGFydC50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvcGxvdC91dGlscy50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvcGxvdC9QbG90S2l0LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L1Bsb3QudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL3Bsb3QvQmFyUGxvdC50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvbW9kZWwvQmFyQ2hhcnQudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL3Bsb3QvUGllUGxvdC50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvbW9kZWwvUGllQ2hhcnQudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL2ludGVyZmFjZS9DaGFydFNlcnZhbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsLnBhdHRlcm4gPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBCQUNLR1JPVU5EX0NPTE9SID0gJ3JnYmEoMTAwLCAxMDAsIDEwMCwgMC43KSc7XG52YXIgUEFUVEVSTl9DT0xPUiA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknO1xudmFyIFBPSU5UX1NUWUxFID0gJ3JvdW5kJztcblxudmFyIGFzeW5jR2VuZXJhdG9yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBd2FpdFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gQXN5bmNHZW5lcmF0b3IoZ2VuKSB7XG4gICAgdmFyIGZyb250LCBiYWNrO1xuXG4gICAgZnVuY3Rpb24gc2VuZChrZXksIGFyZykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGJhY2spIHtcbiAgICAgICAgICBiYWNrID0gYmFjay5uZXh0ID0gcmVxdWVzdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcm9udCA9IGJhY2sgPSByZXF1ZXN0O1xuICAgICAgICAgIHJlc3VtZShrZXksIGFyZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc3VtZShrZXksIGFyZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGdlbltrZXldKGFyZyk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBd2FpdFZhbHVlKSB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlLnZhbHVlKS50aGVuKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJlc3VtZShcIm5leHRcIiwgYXJnKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXN1bWUoXCJ0aHJvd1wiLCBhcmcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldHRsZShyZXN1bHQuZG9uZSA/IFwicmV0dXJuXCIgOiBcIm5vcm1hbFwiLCByZXN1bHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc2V0dGxlKFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR0bGUodHlwZSwgdmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwicmV0dXJuXCI6XG4gICAgICAgICAgZnJvbnQucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInRocm93XCI6XG4gICAgICAgICAgZnJvbnQucmVqZWN0KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZnJvbnQgPSBmcm9udC5uZXh0O1xuXG4gICAgICBpZiAoZnJvbnQpIHtcbiAgICAgICAgcmVzdW1lKGZyb250LmtleSwgZnJvbnQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhY2sgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2ludm9rZSA9IHNlbmQ7XG5cbiAgICBpZiAodHlwZW9mIGdlbi5yZXR1cm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5yZXR1cm4gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvcikge1xuICAgIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICB9XG5cbiAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcIm5leHRcIiwgYXJnKTtcbiAgfTtcblxuICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcInRocm93XCIsIGFyZyk7XG4gIH07XG5cbiAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnJldHVybiA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwicmV0dXJuXCIsIGFyZyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB3cmFwOiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXN5bmNHZW5lcmF0b3IoZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgYXdhaXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5ldyBBd2FpdFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH07XG59KCk7XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIFNoYXBlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICB2YXIgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMjA7XG4gICAgdmFyIGJhY2tncm91bmRDb2xvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogQkFDS0dST1VORF9DT0xPUjtcbiAgICB2YXIgcGF0dGVybkNvbG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBQQVRURVJOX0NPTE9SO1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNoYXBlKTtcblxuICAgIHRoaXMuX2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMuX2NvbnRleHQgPSB0aGlzLl9jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIHRoaXMuX2NhbnZhcy53aWR0aCA9IHNpemU7XG4gICAgdGhpcy5fY2FudmFzLmhlaWdodCA9IHNpemU7XG5cbiAgICB0aGlzLl9jb250ZXh0LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICB0aGlzLl9jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMuX2NhbnZhcy53aWR0aCwgdGhpcy5fY2FudmFzLmhlaWdodCk7XG5cbiAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICB0aGlzLl9wYXR0ZXJuQ29sb3IgPSBwYXR0ZXJuQ29sb3I7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFNoYXBlLCBbe1xuICAgIGtleTogJ3NldFN0cm9rZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3Ryb2tlUHJvcHMoKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5fcGF0dGVybkNvbG9yO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lV2lkdGggPSB0aGlzLl9zaXplIC8gMTA7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVKb2luID0gUE9JTlRfU1RZTEU7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVDYXAgPSBQT0lOVF9TVFlMRTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRGaWxsUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGaWxsUHJvcHMoKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX3BhdHRlcm5Db2xvcjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNoYXBlO1xufSgpO1xuXG52YXIgUGx1cyA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoUGx1cywgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBQbHVzKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBsdXMpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQbHVzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUGx1cykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUGx1cywgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3UGx1cygpO1xuICAgICAgdGhpcy5kcmF3UGx1cyhoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdQbHVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1BsdXMoKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcbiAgICAgIHZhciBxdWFydGVyU2l6ZSA9IHNpemUgLyA0O1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhxdWFydGVyU2l6ZSArIG9mZnNldFgsIDAgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHF1YXJ0ZXJTaXplICsgb2Zmc2V0WCwgaGFsZlNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKDAgKyBvZmZzZXRYLCBxdWFydGVyU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUgKyBvZmZzZXRYLCBxdWFydGVyU2l6ZSArIG9mZnNldFkpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGx1cztcbn0oU2hhcGUpO1xuXG52YXIgQ3Jvc3MgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKENyb3NzLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIENyb3NzKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENyb3NzKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ3Jvc3MuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDcm9zcykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoQ3Jvc3MsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldFN0cm9rZVByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd0Nyb3NzKCk7XG4gICAgICB0aGlzLmRyYXdDcm9zcyhoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdDcm9zcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdDcm9zcygpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIGdhcCA9IDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKG9mZnNldFggKyBnYXAsIG9mZnNldFkgKyBnYXApO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUgLSBnYXAgKyBvZmZzZXRYLCBoYWxmU2l6ZSAtIGdhcCArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8ob2Zmc2V0WCArIGdhcCwgaGFsZlNpemUgLSBnYXAgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKGhhbGZTaXplIC0gZ2FwICsgb2Zmc2V0WCwgb2Zmc2V0WSArIGdhcCk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDcm9zcztcbn0oU2hhcGUpO1xuXG52YXIgRGFzaCA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoRGFzaCwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBEYXNoKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERhc2gpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEYXNoLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGFzaCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoRGFzaCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3RGFzaCgpO1xuICAgICAgdGhpcy5kcmF3RGFzaChoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdEYXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0Rhc2goKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcbiAgICAgIHZhciBnYXAgPSAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhvZmZzZXRYICsgZ2FwLCBvZmZzZXRZICsgZ2FwKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKGhhbGZTaXplIC0gZ2FwICsgb2Zmc2V0WCwgaGFsZlNpemUgLSBnYXAgKyBvZmZzZXRZKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERhc2g7XG59KFNoYXBlKTtcblxudmFyIENyb3NzRGFzaCA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoQ3Jvc3NEYXNoLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIENyb3NzRGFzaCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBDcm9zc0Rhc2gpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDcm9zc0Rhc2guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDcm9zc0Rhc2gpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKENyb3NzRGFzaCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldFN0cm9rZVByb3BzKCk7XG5cbiAgICAgIHZhciBjcm9zcyA9IG5ldyBDcm9zcygpO1xuICAgICAgY3Jvc3MuZHJhd0Nyb3NzLmNhbGwodGhpcyk7XG5cbiAgICAgIHZhciBkYXNoID0gbmV3IERhc2goKTtcbiAgICAgIGRhc2guZHJhd0Rhc2guY2FsbCh0aGlzLCBoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ3Jvc3NEYXNoO1xufShTaGFwZSk7XG5cbnZhciBEb3QgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKERvdCwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBEb3QoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRG90KTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRG90Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRG90KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEb3QsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldEZpbGxQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdEb3QoKTtcbiAgICAgIHRoaXMuZHJhd0RvdChoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmZpbGwoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3RG90JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0RvdCgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICB2YXIgZGlhbWV0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRoaXMuX3NpemUgLyAxMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIHF1YXJ0ZXJTaXplID0gc2l6ZSAvIDQ7XG4gICAgICB2YXIgeCA9IHF1YXJ0ZXJTaXplICsgb2Zmc2V0WDtcbiAgICAgIHZhciB5ID0gcXVhcnRlclNpemUgKyBvZmZzZXRZO1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4ICsgcXVhcnRlclNpemUsIHkpO1xuICAgICAgdGhpcy5fY29udGV4dC5hcmMoeCwgeSwgZGlhbWV0ZXIsIDAsIDIgKiBNYXRoLlBJKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERvdDtcbn0oU2hhcGUpO1xuXG52YXIgRG90RGFzaCA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoRG90RGFzaCwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBEb3REYXNoKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERvdERhc2gpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEb3REYXNoLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRG90RGFzaCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoRG90RGFzaCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdmFyIGRhc2ggPSBuZXcgRGFzaCgpO1xuICAgICAgZGFzaC5kcmF3RGFzaC5jYWxsKHRoaXMsIGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICB0aGlzLnNldEZpbGxQcm9wcygpO1xuXG4gICAgICB2YXIgZG90ID0gbmV3IERvdCgpO1xuICAgICAgZG90LmRyYXdEb3QuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5maWxsKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEb3REYXNoO1xufShTaGFwZSk7XG5cbnZhciBEaXNjID0gZnVuY3Rpb24gKF9Eb3QpIHtcbiAgaW5oZXJpdHMoRGlzYywgX0RvdCk7XG5cbiAgZnVuY3Rpb24gRGlzYygpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEaXNjKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGlzYy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpc2MpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKERpc2MsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuICAgICAgdmFyIGRpYW1ldGVyID0gdGhpcy5fc2l6ZSAvIDU7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0RmlsbFByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd0RvdCgwLCAwLCBkaWFtZXRlcik7XG4gICAgICB0aGlzLmRyYXdEb3QoaGFsZlNpemUsIGhhbGZTaXplLCBkaWFtZXRlcik7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuZmlsbCgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGlzYztcbn0oRG90KTtcblxudmFyIFJpbmcgPSBmdW5jdGlvbiAoX0RvdCkge1xuICBpbmhlcml0cyhSaW5nLCBfRG90KTtcblxuICBmdW5jdGlvbiBSaW5nKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFJpbmcpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSaW5nLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmluZykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmluZywgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG4gICAgICB2YXIgZGlhbWV0ZXIgPSB0aGlzLl9zaXplIC8gNTtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdEb3QoMCwgMCwgZGlhbWV0ZXIpO1xuICAgICAgdGhpcy5kcmF3RG90KGhhbGZTaXplLCBoYWxmU2l6ZSwgZGlhbWV0ZXIpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUmluZztcbn0oRG90KTtcblxudmFyIExpbmUgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKExpbmUsIF9TaGFwZSk7XG5cbiAgZnVuY3Rpb24gTGluZSgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5lKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGluZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpbmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKExpbmUsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldFN0cm9rZVByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd0xpbmUoKTtcbiAgICAgIHRoaXMuZHJhd0xpbmUoaGFsZlNpemUsIGhhbGZTaXplKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3TGluZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdMaW5lKCkge1xuICAgICAgdmFyIG9mZnNldFggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIHF1YXJ0ZXJTaXplID0gc2l6ZSAvIDQ7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKDAsIHF1YXJ0ZXJTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl9zaXplLCBxdWFydGVyU2l6ZSArIG9mZnNldFkpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGluZTtcbn0oU2hhcGUpO1xuXG52YXIgVmVydGljYWxMaW5lID0gZnVuY3Rpb24gKF9MaW5lKSB7XG4gIGluaGVyaXRzKFZlcnRpY2FsTGluZSwgX0xpbmUpO1xuXG4gIGZ1bmN0aW9uIFZlcnRpY2FsTGluZSgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBWZXJ0aWNhbExpbmUpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChWZXJ0aWNhbExpbmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWZXJ0aWNhbExpbmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFZlcnRpY2FsTGluZSwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdGhpcy5fY29udGV4dC50cmFuc2xhdGUodGhpcy5fc2l6ZSwgMCk7XG4gICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xuXG4gICAgICBMaW5lLnByb3RvdHlwZS5kcmF3VGlsZS5jYWxsKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVmVydGljYWxMaW5lO1xufShMaW5lKTtcblxudmFyIFdlYXZlID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhXZWF2ZSwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBXZWF2ZSgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBXZWF2ZSk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdlYXZlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV2VhdmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFdlYXZlLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldFN0cm9rZVByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd1dlYXZlKDAsIDApO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdXZWF2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdXZWF2ZShvZmZzZXRYLCBvZmZzZXRZKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8ob2Zmc2V0WCArIDEsIG9mZnNldFkgKyAxKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKGhhbGZTaXplIC0gMSwgaGFsZlNpemUgLSAxKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oaGFsZlNpemUgKyAxLCBzaXplIC0gMSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhzaXplIC0gMSwgaGFsZlNpemUgKyAxKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFdlYXZlO1xufShTaGFwZSk7XG5cbnZhciBaaWd6YWcgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKFppZ3phZywgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBaaWd6YWcoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgWmlnemFnKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoWmlnemFnLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoWmlnemFnKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhaaWd6YWcsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3WmlnemFnKCk7XG4gICAgICB0aGlzLmRyYXdaaWd6YWcodGhpcy5fc2l6ZSAvIDIpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdaaWd6YWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3WmlnemFnKCkge1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBxdWFydGVyU2l6ZSA9IHNpemUgLyA0O1xuICAgICAgdmFyIGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gICAgICB2YXIgdGVudGhTaXplID0gc2l6ZSAvIDEwO1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygwLCB0ZW50aFNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHF1YXJ0ZXJTaXplLCBoYWxmU2l6ZSAtIHRlbnRoU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUsIHRlbnRoU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oc2l6ZSAtIHF1YXJ0ZXJTaXplLCBoYWxmU2l6ZSAtIHRlbnRoU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oc2l6ZSwgdGVudGhTaXplICsgb2Zmc2V0WSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBaaWd6YWc7XG59KFNoYXBlKTtcblxudmFyIFppZ3phZ1ZlcnRpY2FsID0gZnVuY3Rpb24gKF9aaWd6YWcpIHtcbiAgaW5oZXJpdHMoWmlnemFnVmVydGljYWwsIF9aaWd6YWcpO1xuXG4gIGZ1bmN0aW9uIFppZ3phZ1ZlcnRpY2FsKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFppZ3phZ1ZlcnRpY2FsKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoWmlnemFnVmVydGljYWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihaaWd6YWdWZXJ0aWNhbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoWmlnemFnVmVydGljYWwsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQudHJhbnNsYXRlKHRoaXMuX3NpemUsIDApO1xuICAgICAgdGhpcy5fY29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcblxuICAgICAgWmlnemFnLnByb3RvdHlwZS5kcmF3VGlsZS5jYWxsKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gWmlnemFnVmVydGljYWw7XG59KFppZ3phZyk7XG5cbnZhciBEaWFnb25hbCA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoRGlhZ29uYWwsIF9TaGFwZSk7XG5cbiAgZnVuY3Rpb24gRGlhZ29uYWwoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlhZ29uYWwpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEaWFnb25hbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpYWdvbmFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEaWFnb25hbCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3RGlhZ29uYWxMaW5lKCk7XG4gICAgICB0aGlzLmRyYXdEaWFnb25hbExpbmUoaGFsZlNpemUsIGhhbGZTaXplKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3RGlhZ29uYWxMaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0RpYWdvbmFsTGluZSgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIGdhcCA9IDE7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKGhhbGZTaXplIC0gZ2FwIC0gb2Zmc2V0WCwgZ2FwICogLTEgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHNpemUgKyAxIC0gb2Zmc2V0WCwgaGFsZlNpemUgKyAxICsgb2Zmc2V0WSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEaWFnb25hbDtcbn0oU2hhcGUpO1xuXG52YXIgRGlhZ29uYWxSaWdodExlZnQgPSBmdW5jdGlvbiAoX0RpYWdvbmFsKSB7XG4gIGluaGVyaXRzKERpYWdvbmFsUmlnaHRMZWZ0LCBfRGlhZ29uYWwpO1xuXG4gIGZ1bmN0aW9uIERpYWdvbmFsUmlnaHRMZWZ0KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERpYWdvbmFsUmlnaHRMZWZ0KTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGlhZ29uYWxSaWdodExlZnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEaWFnb25hbFJpZ2h0TGVmdCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoRGlhZ29uYWxSaWdodExlZnQsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQudHJhbnNsYXRlKHRoaXMuX3NpemUsIDApO1xuICAgICAgdGhpcy5fY29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcblxuICAgICAgRGlhZ29uYWwucHJvdG90eXBlLmRyYXdUaWxlLmNhbGwodGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEaWFnb25hbFJpZ2h0TGVmdDtcbn0oRGlhZ29uYWwpO1xuXG52YXIgU3F1YXJlID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhTcXVhcmUsIF9TaGFwZSk7XG5cbiAgZnVuY3Rpb24gU3F1YXJlKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNxdWFyZSk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNxdWFyZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNxdWFyZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3F1YXJlLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRGaWxsUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3U3F1YXJlKCk7XG4gICAgICB0aGlzLmRyYXdTcXVhcmUoaGFsZlNpemUsIGhhbGZTaXplKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5maWxsKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd1NxdWFyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdTcXVhcmUoKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcbiAgICAgIHZhciBnYXAgPSBzaXplIC8gMjA7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuZmlsbFJlY3Qob2Zmc2V0WCArIGdhcCwgb2Zmc2V0WSArIGdhcCwgaGFsZlNpemUgLSBnYXAgKiAyLCBoYWxmU2l6ZSAtIGdhcCAqIDIpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3F1YXJlO1xufShTaGFwZSk7XG5cbnZhciBCb3ggPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKEJveCwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBCb3goKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQm94KTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQm94Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm94KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhCb3gsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldFN0cm9rZVByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd0JveCgpO1xuICAgICAgdGhpcy5kcmF3Qm94KGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd0JveCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdCb3goKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcbiAgICAgIHZhciBnYXAgPSBzaXplIC8gMjA7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlUmVjdChvZmZzZXRYICsgZ2FwLCBvZmZzZXRZICsgZ2FwLCBoYWxmU2l6ZSAtIGdhcCAqIDQsIGhhbGZTaXplIC0gZ2FwICogNCk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBCb3g7XG59KFNoYXBlKTtcblxudmFyIFRyaWFuZ2xlID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhUcmlhbmdsZSwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBUcmlhbmdsZSgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBUcmlhbmdsZSk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRyaWFuZ2xlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVHJpYW5nbGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFRyaWFuZ2xlLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRGaWxsUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3VHJpYW5nbGUoKTtcbiAgICAgIHRoaXMuZHJhd1RyaWFuZ2xlKGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuZmlsbCgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdUcmlhbmdsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUcmlhbmdsZSgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIHF1YXJ0ZXJTaXplID0gc2l6ZSAvIDQ7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHF1YXJ0ZXJTaXplICsgb2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhoYWxmU2l6ZSArIG9mZnNldFgsIGhhbGZTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhvZmZzZXRYLCBoYWxmU2l6ZSArIG9mZnNldFkpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVHJpYW5nbGU7XG59KFNoYXBlKTtcblxudmFyIFRyaWFuZ2xlVmVydGljYWwgPSBmdW5jdGlvbiAoX1RyaWFuZ2xlKSB7XG4gIGluaGVyaXRzKFRyaWFuZ2xlVmVydGljYWwsIF9UcmlhbmdsZSk7XG5cbiAgZnVuY3Rpb24gVHJpYW5nbGVWZXJ0aWNhbCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBUcmlhbmdsZVZlcnRpY2FsKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVHJpYW5nbGVWZXJ0aWNhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRyaWFuZ2xlVmVydGljYWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFRyaWFuZ2xlVmVydGljYWwsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcblxuICAgICAgdGhpcy5fY29udGV4dC50cmFuc2xhdGUoc2l6ZSwgc2l6ZSk7XG4gICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZSgxODAgKiBNYXRoLlBJIC8gMTgwKTtcblxuICAgICAgVHJpYW5nbGUucHJvdG90eXBlLmRyYXdUaWxlLmNhbGwodGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUcmlhbmdsZVZlcnRpY2FsO1xufShUcmlhbmdsZSk7XG5cbnZhciBEaWFtb25kID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhEaWFtb25kLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIERpYW1vbmQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlhbW9uZCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERpYW1vbmQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEaWFtb25kKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEaWFtb25kLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRGaWxsUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3RGlhbW9uZCgpO1xuICAgICAgdGhpcy5kcmF3RGlhbW9uZChoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmZpbGwoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3RGlhbW9uZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdEaWFtb25kKCkge1xuICAgICAgdmFyIG9mZnNldFggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gICAgICB2YXIgcXVhcnRlclNpemUgPSBzaXplIC8gNDtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8ocXVhcnRlclNpemUgKyBvZmZzZXRYLCBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKGhhbGZTaXplICsgb2Zmc2V0WCwgcXVhcnRlclNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHF1YXJ0ZXJTaXplICsgb2Zmc2V0WCwgaGFsZlNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKG9mZnNldFgsIHF1YXJ0ZXJTaXplICsgb2Zmc2V0WSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEaWFtb25kO1xufShTaGFwZSk7XG5cbnZhciBEaWFtb25kQm94ID0gZnVuY3Rpb24gKF9EaWFtb25kKSB7XG4gIGluaGVyaXRzKERpYW1vbmRCb3gsIF9EaWFtb25kKTtcblxuICBmdW5jdGlvbiBEaWFtb25kQm94KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERpYW1vbmRCb3gpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEaWFtb25kQm94Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlhbW9uZEJveCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoRGlhbW9uZEJveCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3RGlhbW9uZCgpO1xuICAgICAgdGhpcy5kcmF3RGlhbW9uZChoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdEaWFtb25kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0RpYW1vbmQoKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMiAtIDE7XG4gICAgICB2YXIgcXVhcnRlclNpemUgPSBzaXplIC8gNDtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8ocXVhcnRlclNpemUgKyBvZmZzZXRYLCBvZmZzZXRZICsgMSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhoYWxmU2l6ZSArIG9mZnNldFgsIHF1YXJ0ZXJTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhxdWFydGVyU2l6ZSArIG9mZnNldFgsIGhhbGZTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhvZmZzZXRYICsgMSwgcXVhcnRlclNpemUgKyBvZmZzZXRZKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERpYW1vbmRCb3g7XG59KERpYW1vbmQpO1xuXG52YXIgc2hhcGVzID0ge1xuICAncGx1cyc6IFBsdXMsXG4gICdjcm9zcyc6IENyb3NzLFxuICAnZGFzaCc6IERhc2gsXG4gICdjcm9zcy1kYXNoJzogQ3Jvc3NEYXNoLFxuICAnZG90JzogRG90LFxuICAnZG90LWRhc2gnOiBEb3REYXNoLFxuICAnZGlzYyc6IERpc2MsXG4gICdyaW5nJzogUmluZyxcbiAgJ2xpbmUnOiBMaW5lLFxuICAnbGluZS12ZXJ0aWNhbCc6IFZlcnRpY2FsTGluZSxcbiAgJ3dlYXZlJzogV2VhdmUsXG4gICd6aWd6YWcnOiBaaWd6YWcsXG4gICd6aWd6YWctdmVydGljYWwnOiBaaWd6YWdWZXJ0aWNhbCxcbiAgJ2RpYWdvbmFsJzogRGlhZ29uYWwsXG4gICdkaWFnb25hbC1yaWdodC1sZWZ0JzogRGlhZ29uYWxSaWdodExlZnQsXG4gICdzcXVhcmUnOiBTcXVhcmUsXG4gICdib3gnOiBCb3gsXG4gICd0cmlhbmdsZSc6IFRyaWFuZ2xlLFxuICAndHJpYW5nbGUtaW52ZXJ0ZWQnOiBUcmlhbmdsZVZlcnRpY2FsLFxuICAnZGlhbW9uZCc6IERpYW1vbmQsXG4gICdkaWFtb25kLWJveCc6IERpYW1vbmRCb3hcbn07XG5cbnZhciBkZXByZWNhdGVkU2hhcGVzID0ge1xuICAnY2lyY2xlJzogc2hhcGVzWydkaXNjJ10sXG4gICd0cmlhbmdsZS12ZXJ0aWNhbCc6IHNoYXBlc1sndHJpYW5nbGUtaW52ZXJ0ZWQnXSxcbiAgJ2xpbmUtaG9yaXpvbnRhbCc6IHNoYXBlc1snbGluZSddLFxuICAnbGluZS1kaWFnb25hbC1scic6IHNoYXBlc1snZGlhZ29uYWwnXSxcbiAgJ2xpbmUtZGlhZ29uYWwtcmwnOiBzaGFwZXNbJ2RpYWdvbmFsLXJpZ2h0LWxlZnQnXSxcbiAgJ3ppZ3phZy1ob3Jpem9udGFsJzogc2hhcGVzWyd6aWd6YWcnXSxcbiAgJ2RpYW1vbmQtb3V0bGluZSc6IHNoYXBlc1snZGlhbW9uZC1ib3gnXVxufTtcblxudmFyIGNvbXBsZXRlU2hhcGVzTGlzdCA9IFtdO1xuXG5mdW5jdGlvbiBnZXRSYW5kb21TaGFwZSgpIHtcbiAgdmFyIGV4Y2x1ZGVkU2hhcGVUeXBlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgdmFyIHNoYXBlc0xpc3QgPSBPYmplY3Qua2V5cyhzaGFwZXMpO1xuXG4gIGV4Y2x1ZGVkU2hhcGVUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaGFwZVR5cGUpIHtcbiAgICBzaGFwZXNMaXN0LnNwbGljZShzaGFwZXNMaXN0LmluZGV4T2Yoc2hhcGVUeXBlKSwgMSk7XG4gIH0pO1xuXG4gIHZhciByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNoYXBlc0xpc3QubGVuZ3RoKTtcblxuICByZXR1cm4gc2hhcGVzTGlzdFtyYW5kb21JbmRleF07XG59XG5cbl9leHRlbmRzKGNvbXBsZXRlU2hhcGVzTGlzdCwgc2hhcGVzLCBkZXByZWNhdGVkU2hhcGVzKTtcblxuZnVuY3Rpb24gZHJhdygpIHtcbiAgdmFyIHNoYXBlVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3NxdWFyZSc7XG4gIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBhcmd1bWVudHNbMV07XG4gIHZhciBwYXR0ZXJuQ29sb3IgPSBhcmd1bWVudHNbMl07XG4gIHZhciBzaXplID0gYXJndW1lbnRzWzNdO1xuXG4gIHZhciBwYXR0ZXJuQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIHZhciBwYXR0ZXJuQ29udGV4dCA9IHBhdHRlcm5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgdmFyIG91dGVyU2l6ZSA9IHNpemUgKiAyO1xuXG4gIHZhciBTaGFwZSA9IGNvbXBsZXRlU2hhcGVzTGlzdFtzaGFwZVR5cGVdO1xuICB2YXIgc2hhcGUgPSBuZXcgU2hhcGUoc2l6ZSwgYmFja2dyb3VuZENvbG9yLCBwYXR0ZXJuQ29sb3IpO1xuXG4gIHZhciBwYXR0ZXJuID0gcGF0dGVybkNvbnRleHQuY3JlYXRlUGF0dGVybihzaGFwZS5kcmF3VGlsZSgpLCAncmVwZWF0Jyk7XG5cbiAgcGF0dGVybkNhbnZhcy53aWR0aCA9IG91dGVyU2l6ZTtcbiAgcGF0dGVybkNhbnZhcy5oZWlnaHQgPSBvdXRlclNpemU7XG5cbiAgcGF0dGVybi5zaGFwZVR5cGUgPSBzaGFwZVR5cGU7XG5cbiAgcmV0dXJuIHBhdHRlcm47XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKGNvbG9yTGlzdCkge1xuICB2YXIgZmlyc3RTaGFwZVR5cGUgPSB2b2lkIDA7XG4gIHZhciBwcmV2aW91c1NoYXBlVHlwZSA9IHZvaWQgMDtcblxuICByZXR1cm4gY29sb3JMaXN0Lm1hcChmdW5jdGlvbiAoY29sb3IsIGluZGV4LCBsaXN0KSB7XG4gICAgdmFyIHNoYXBlVHlwZSA9IHZvaWQgMDtcblxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgc2hhcGVUeXBlID0gZ2V0UmFuZG9tU2hhcGUoKTtcbiAgICAgIHByZXZpb3VzU2hhcGVUeXBlID0gc2hhcGVUeXBlO1xuICAgICAgZmlyc3RTaGFwZVR5cGUgPSBwcmV2aW91c1NoYXBlVHlwZTtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBsaXN0Lmxlbmd0aCAtIDEpIHtcbiAgICAgIHNoYXBlVHlwZSA9IGdldFJhbmRvbVNoYXBlKFtwcmV2aW91c1NoYXBlVHlwZSwgZmlyc3RTaGFwZVR5cGVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hhcGVUeXBlID0gZ2V0UmFuZG9tU2hhcGUoW3ByZXZpb3VzU2hhcGVUeXBlXSk7XG4gICAgICBwcmV2aW91c1NoYXBlVHlwZSA9IHNoYXBlVHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZHJhdyhzaGFwZVR5cGUsIGNvbG9yKTtcbiAgfSk7XG59XG5cbnZhciBwYXR0ZXJuID0ge1xuICBkcmF3OiBkcmF3LFxuICBnZW5lcmF0ZTogZ2VuZXJhdGVcbn07XG5cbnJldHVybiBwYXR0ZXJuO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0dGVybm9tYWx5LmpzLm1hcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICAvKipcclxuICAgICAqIElmIG5lZWRlZCwgc2xpY2UgJ2FycmF5JyB0byAnbGVuJyBpdGVtcyBvciBmaWxsIHRvICdsZW4nIGl0ZW1zIHVzaW5nICdmaWxsV2l0aCcuXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBhcnJheSB0byBzbGljZSBvciBmaWxsLlxyXG4gICAgICogQHBhcmFtIGxlbiAtIHRoZSByZXN1bHRpbmcgbGVuZ3RoIG9mIGFycmF5LlxyXG4gICAgICogQHBhcmFtIGZpbGxXaXRoIC0gbnVtYmVyIHdpdGggd2hpY2ggYXJyYXkgc2hvdWxkIGJlIGZpbGxlZC5cclxuICAgICAqIEByZXR1cm5zIHNsaWNlZCBvciBmaWxsZWQgYXJyYXkuXHJcbiAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBzbGljZU9yRmlsbChhcnJheTogbnVtYmVyW10sIGxlbjogbnVtYmVyLCBmaWxsV2l0aD86IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSBsZW4pIHJldHVybiBhcnJheTtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID4gbGVuKSByZXR1cm4gYXJyYXkuc2xpY2UoMCwgbGVuKTtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoIDwgbGVuKVxyXG4gICAgICAgICAgICB3aGlsZSAoYXJyYXkubGVuZ3RoICE9PSBsZW4pXHJcbiAgICAgICAgICAgICAgICBhcnJheS5wdXNoKGZpbGxXaXRoID8/IDApO1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1lcmdlIHByb3BlcnRpZXMgZnJvbSAnbmV3T3B0aW9ucycgdG8gJ2FjdHVhbE9wdGlvbnMnIChyaWdodC1qb2luIGxpa2UpLlxyXG4gICAgICogQHBhcmFtIG5ld09wdGlvbnMgLSBzb21lIG9wdGlvbiBwcm9wZXJ0aWVzIGZvciB0eXBlIFQuXHJcbiAgICAgKiBAcGFyYW0gYWN0dWFsT3B0aW9ucyAtIGFsbCBvcHRpb24gcHJvcGVydGllcyBmb3IgdHlwZSBULlxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgbWVyZ2VSaWdodDxUPihuZXdPcHRpb25zOiBQYXJ0aWFsPFQ+LCBhY3R1YWxPcHRpb25zOiBUKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFjdHVhbE9wdGlvbnMpO1xyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG5ld09wdGlvbnMpLmZvckVhY2gocGFpciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHBhaXJbMF07XHJcbiAgICAgICAgICAgIGlmIChrZXlzLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFpclsxXTtcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBhY3R1YWxPcHRpb25zW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU2VyaWVEYXRhQ29tbW9uLCBDaGFydE9wdGlvbnMsIENvbnRleHRTb3VyY2UsIFNlcmllT3B0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCBDaGFydFV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhcnQge1xyXG5cclxuICAgIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHNlcmllc0RhdGE6IFNlcmllRGF0YUNvbW1vbltdO1xyXG4gICAgY2hhcnRPcHRpb25zOiBDaGFydE9wdGlvbnM7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBDb250ZXh0U291cmNlKSB7XHJcbiAgICAgICAgbGV0IGFuYWx5emVkRWxlbWVudCA9IHNvdXJjZTtcclxuICAgICAgICBpZiAodHlwZW9mIGFuYWx5emVkRWxlbWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYW5hbHl6ZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYW5hbHl6ZWRFbGVtZW50LnJlcGxhY2UoJy9eIy8nLCAnJykpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYW5hbHl6ZWRFbGVtZW50IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gYW5hbHl6ZWRFbGVtZW50LmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFuYWx5emVkRWxlbWVudCBpbnN0YW5jZW9mIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBhbmFseXplZEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgdGhyb3cgRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgdmFsaWQgSUQsIEhUTUxDYW52YXNFbGVtZW50IG9yIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCcpO1xyXG5cclxuICAgICAgICB0aGlzLmNoYXJ0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdVbnRpdGxlZCcsXHJcbiAgICAgICAgICAgIHNob3dUaXRsZTogdHJ1ZSxcclxuICAgICAgICAgICAgc2hvd0xlZ2VuZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNob3dMYWJlbHM6IHRydWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNlcmllc0RhdGEgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q2hhcnRPcHRpb25zKG9wdGlvbnM6IFBhcnRpYWw8Q2hhcnRPcHRpb25zPik6IHZvaWQge1xyXG4gICAgICAgIENoYXJ0VXRpbHMubWVyZ2VSaWdodChvcHRpb25zLCB0aGlzLmNoYXJ0T3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlcmllT3B0aW9ucyhuZXdPcHRpb25zOiBQYXJ0aWFsPFNlcmllT3B0aW9ucz4sIHdoaWNoU2VyaWVzPzogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgICAgICBpZiAod2hpY2hTZXJpZXMpIHdoaWNoU2VyaWVzLmZvckVhY2goKHNlcmllTmFtZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhY3R1YWxTZXJpZSA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcmllc0RhdGEuZmluZCgoZXhpc3RpbmdTZXJpZSkgPT4gZXhpc3RpbmdTZXJpZS5uYW1lID09IHNlcmllTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChhY3R1YWxTZXJpZSkge1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRVdGlscy5tZXJnZVJpZ2h0KG5ld09wdGlvbnMsIGFjdHVhbFNlcmllLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBTZXJpZSB3aXRoIG5hbWUgJHtzZXJpZU5hbWV9IG5vdCBmb3VuZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGVsc2UgdGhpcy5zZXJpZXNEYXRhLmZvckVhY2goKHNlcmllKSA9PiBDaGFydFV0aWxzLm1lcmdlUmlnaHQobmV3T3B0aW9ucywgc2VyaWUub3B0aW9ucykpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBzZXQgWCh2YWx1ZTogc3RyaW5nW10gfCBudW1iZXJbXSB8IG51bWJlcltdW10pO1xyXG4gICAgcHVibGljIGFic3RyYWN0IHNldCBZKHZhbHVlOiBudW1iZXJbXSB8IG51bWJlcltdW10pO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGRyYXcoKTogdm9pZDtcclxufSIsImltcG9ydCB7IGRyYXcgfSBmcm9tIFwicGF0dGVybm9tYWx5XCI7XHJcbmltcG9ydCB7IFNlcmllT3B0aW9ucyB9IGZyb20gXCIuLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgeyBUaWNrSW5mbyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG4vKipcclxuICogUmVzaXplIGNhbnZhcyB0byBkaXNwbGF5IHNpemUuXHJcbiAqIEBwYXJhbSBjYW52YXMgLSBjYW52YXMgb2JqZWN0LlxyXG4gKiBAcmV0dXJucyBmbGFnIGluZGljYXRpbmcgd2hldGhlciByZXNpemUgb2NjdXJlZC5cclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZUNhbnZhc1RvRGlzcGxheVNpemUoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xyXG4gICAgaWYgKGNhbnZhcy53aWR0aCAhPT0gd2lkdGggfHwgY2FudmFzLmhlaWdodCAhPT0gaGVpZ2h0KSB7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGlja3MgZm9yIHNldmVyYWwgY2hhcnRzLiBcclxuICogQWxnb3JpdGhtIGJ5ICdNYXJrIFJhbnNvbScuIFBvcnRlZCB0byBKUyBhbmQgbW9kaWZpZWQgYnkgbWUuXHJcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM2MTY4MS99IGZvciBvcmlnaW5hbCBhbGdvcml0aG0gY29kZS5cclxuICogQHBhcmFtIGxhcmdlc3QgLSBwcmV2aW91c2x5IGRldGVybWluZWQgbGFyZ2VzdCB2YWx1ZS5cclxuICogQHBhcmFtIG1vc3RUaWNrcyAtIG1heGltYWwgbnVtYmVyIG9mIHBvc3NpYmxlIHRpY2tzLlxyXG4gKiBAcmV0dXJucyB0aWNrIGhlaWdodCBhbmQgbnVtYmVyIG9mIHRpY2tzLiAgXHJcbiAqIEBzdW1tYXJ5XHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUaWNrSW5mbyhsYXJnZXN0OiBudW1iZXIsIG1vc3RUaWNrczogbnVtYmVyKTogVGlja0luZm8ge1xyXG4gICAgY29uc3QgbWluaW11bSA9IGxhcmdlc3QgLyBtb3N0VGlja3M7XHJcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZzEwKG1pbmltdW0pKSk7XHJcbiAgICBjb25zdCByZXNpZHVhbCA9IG1pbmltdW0gLyBtYWduaXR1ZGU7XHJcbiAgICBjb25zdCB0YWJsZSA9IFsxLCAxLjUsIDIsIDMsIDUsIDcsIDEwXTtcclxuICAgIGNvbnN0IHRpY2sgPSByZXNpZHVhbCA8IDEwID8gdGFibGUuZmluZCgoZSkgPT4gKGUgPiByZXNpZHVhbCkpIDogMTA7XHJcbiAgICBjb25zdCB0aWNrSGVpZ2h0ID0gdGljayAqIG1hZ25pdHVkZTtcclxuICAgIGNvbnN0IHRpY2tDb3VudCA9IE1hdGguY2VpbChsYXJnZXN0IC8gdGlja0hlaWdodCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpY2tIZWlnaHQsXHJcbiAgICAgICAgdGlja0NvdW50XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTaGFwZU9yQ29sb3IoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHNoYXBlOiBTZXJpZU9wdGlvbnNbJ3NoYXBlJ10sIGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICAgIGlmIChzaGFwZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZHJhdyhzaGFwZSwgY29sb3IsICdibGFjaycpO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7c2hhcGV9IGlzIGludmFsaWQgc2hhcGUuIFNlZSBkb2N1bWVudGF0aW9uLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IGRyYXcgfSBmcm9tIFwicGF0dGVybm9tYWx5XCI7XHJcbmltcG9ydCB7IENoYXJ0T3B0aW9ucywgTXVsdGlTZXJpZURhdGEsIFNlcmllRGF0YUNvbW1vbiB9IGZyb20gXCIuLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgeyBGcmFtZVJlY3QsIFRpY2tJbmZvIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgZ2V0VGlja0luZm8gfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxvdEtpdCB7XHJcbiAgICBMQUJFTFNfU1BBQ0VfTVVMVElQSUVSID0gMC4wNTtcclxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWRlYWxseSB0aGlzIHNob3VsZCByZXR1cm4gQXJyYXkgb2YgRnJhbWVSZWN0IGZvciBlYWNoIGZyYW1lLlxyXG4gICAgcHVibGljIHByZXBhcmVDaGFydEZvckRyYXdpbmcoY2hhcnRPcHRpb25zOiBDaGFydE9wdGlvbnMsIHNlcmllczogU2VyaWVEYXRhQ29tbW9uW10pOiBGcmFtZVJlY3Qge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY3R4LmNhbnZhcztcclxuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50RnJhbWUgPSB0aGlzLmdldENvbnRlbnRGcmFtZSgpO1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlRnJhbWUoY29udGVudEZyYW1lLCAnZ3JheScsIDMpO1xyXG5cclxuICAgICAgICBpZiAoY2hhcnRPcHRpb25zLnNob3dUaXRsZSAmJiBjaGFydE9wdGlvbnMudGl0bGUpXHJcbiAgICAgICAgICAgIGNvbnRlbnRGcmFtZSA9IHRoaXMuZHJhd1RpdGxlKGNoYXJ0T3B0aW9ucy50aXRsZSwgY29udGVudEZyYW1lKTtcclxuICAgICAgICBpZiAoY2hhcnRPcHRpb25zLnNob3dMZWdlbmQpXHJcbiAgICAgICAgICAgIGNvbnRlbnRGcmFtZSA9IHRoaXMuZHJhd0xlZ2VuZChjb250ZW50RnJhbWUsIHNlcmllcyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRGcmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhd0xhYmVscyhmcmFtZTogRnJhbWVSZWN0KTogRnJhbWVSZWN0IHtcclxuICAgICAgICBjb25zdCBoID0gZnJhbWUuaCAqIHRoaXMuTEFCRUxTX1NQQUNFX01VTFRJUElFUjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiBmcmFtZS54LFxyXG4gICAgICAgICAgICB5OiBmcmFtZS55LFxyXG4gICAgICAgICAgICB3OiBmcmFtZS53LFxyXG4gICAgICAgICAgICBoOiBmcmFtZS5oIC0gaFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXdHcmlkSG9yaXpvbnRhbExpbmVzKHNlcmllczogTXVsdGlTZXJpZURhdGFbXSwgZnJhbWU6IEZyYW1lUmVjdCk6IFRpY2tJbmZvIHtcclxuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCBNT1NUX1RJQ0tTID0gMTA7XHJcbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4uc2VyaWVzLm1hcChzZXJpZSA9PiBNYXRoLm1heCguLi5zZXJpZS52YWx1ZXMpKSk7XHJcbiAgICAgICAgY29uc3QgeyB0aWNrQ291bnQsIHRpY2tIZWlnaHQgfSA9IGdldFRpY2tJbmZvKG1heCwgTU9TVF9USUNLUyk7XHJcbiAgICAgICAgY29uc3Qgc2luZ2xlSCA9IGZyYW1lLmggLyAodGlja0NvdW50ICsgMSk7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2dyYXknO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRpY2tDb3VudCArIDE7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gZnJhbWUueSArIHNpbmdsZUggKiBpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSBTdHJpbmcoKHRpY2tDb3VudCArIDEgLSBpKSAqIHRpY2tIZWlnaHQpO1xyXG4gICAgICAgICAgICBjb25zdCB7IHdpZHRoIH0gPSB0aGlzLmN0eC5tZWFzdXJlVGV4dCh2YWwpO1xyXG4gICAgICAgICAgICBjdHguZmlsbFRleHQodmFsLCBmcmFtZS54LCB5KTtcclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBjdHgubW92ZVRvKGZyYW1lLnggKyB3aWR0aCwgeSk7XHJcbiAgICAgICAgICAgIGN0eC5saW5lVG8oZnJhbWUueCArIGZyYW1lLncsIHkpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGlja0NvdW50LFxyXG4gICAgICAgICAgICB0aWNrSGVpZ2h0XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0cm9rZUZyYW1lKGZyYW1lOiBGcmFtZVJlY3QsIGNvbG9yOiBzdHJpbmcsIHdpZHRoPzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSB3aWR0aCA/PyAxO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoZnJhbWUueCwgZnJhbWUueSwgZnJhbWUudywgZnJhbWUuaCk7XHJcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q29udGVudEZyYW1lKCk6IEZyYW1lUmVjdCB7XHJcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmN0eC5jYW52YXM7XHJcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IE1hdGguZmxvb3IoTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLyAxMDApO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IHBhZGRpbmcsXHJcbiAgICAgICAgICAgIHk6IHBhZGRpbmcsXHJcbiAgICAgICAgICAgIHc6IHdpZHRoIC0gMiAqIHBhZGRpbmcsXHJcbiAgICAgICAgICAgIGg6IGhlaWdodCAtIDIgKiBwYWRkaW5nLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRSZW1haW5pbmdDb250ZW50RnJhbWUocHJldjogRnJhbWVSZWN0LCByZWNlbnQ6IEZyYW1lUmVjdCk6IEZyYW1lUmVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogcHJldi54LFxyXG4gICAgICAgICAgICB5OiBwcmV2LnkgPCByZWNlbnQueSA/IHByZXYueSA6IHJlY2VudC55ICsgcmVjZW50LmgsXHJcbiAgICAgICAgICAgIHc6IHByZXYudyxcclxuICAgICAgICAgICAgaDogcHJldi5oIC0gcmVjZW50LmhcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TGVnZW5kRnJhbWUoZnJhbWU6IEZyYW1lUmVjdCk6IEZyYW1lUmVjdCB7XHJcbiAgICAgICAgY29uc3QgRlJBTUVfSEVJR0hUX0RJVklERVIgPSAxMDtcclxuICAgICAgICBjb25zdCBuZXdIID0gTWF0aC5mbG9vcihmcmFtZS5oIC8gRlJBTUVfSEVJR0hUX0RJVklERVIpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IGZyYW1lLngsXHJcbiAgICAgICAgICAgIHk6IGZyYW1lLnkgKyBmcmFtZS5oIC0gbmV3SCxcclxuICAgICAgICAgICAgaDogbmV3SCxcclxuICAgICAgICAgICAgdzogZnJhbWUud1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3VGl0bGUodGl0bGU6IHN0cmluZywgY29udGVudEZyYW1lOiBGcmFtZVJlY3QpOiBGcmFtZVJlY3Qge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHRpdGxlRnJhbWUgPSB0aGlzLmdldFRpdGxlRnJhbWUoY29udGVudEZyYW1lKTtcclxuICAgICAgICBjb25zdCB7IHgsIHksIHcsIGggfSA9IHRpdGxlRnJhbWU7XHJcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLmZsb29yKGggLyAyKX1weCBzYW5zLXNlcmlmYDtcclxuICAgICAgICBjb25zdCB0ZXh0TWVhc3VyZW1lbnQgPSBjdHgubWVhc3VyZVRleHQodGl0bGUpO1xyXG4gICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IHRleHRNZWFzdXJlbWVudC53aWR0aDtcclxuICAgICAgICBjb25zdCB0ZXh0SGVpZ2h0ID0gdGV4dE1lYXN1cmVtZW50LmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xyXG4gICAgICAgIGNvbnN0IHRleHRQb3NpdGlvblggPSB4ICsgdyAvIDIgLSB0ZXh0V2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IHRleHRQb3NpdGlvblkgPSB5ICsgaCAvIDIgKyB0ZXh0SGVpZ2h0IC8gMjtcclxuICAgICAgICBjdHguZmlsbFRleHQodGl0bGUsIHRleHRQb3NpdGlvblgsIHRleHRQb3NpdGlvblksIHcpO1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlRnJhbWUodGl0bGVGcmFtZSwgJ2dyYXknLCAxKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZW1haW5pbmdDb250ZW50RnJhbWUoY29udGVudEZyYW1lLCB0aXRsZUZyYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFRpdGxlRnJhbWUoY29udGVudEZyYW1lOiBGcmFtZVJlY3QpOiBGcmFtZVJlY3Qge1xyXG4gICAgICAgIGNvbnN0IEZSQU1FX0hFSUdIVF9ESVZJREVSID0gMTA7XHJcbiAgICAgICAgY29uc3QgbmV3SCA9IE1hdGguZmxvb3IoY29udGVudEZyYW1lLmggLyBGUkFNRV9IRUlHSFRfRElWSURFUik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogY29udGVudEZyYW1lLngsXHJcbiAgICAgICAgICAgIHk6IGNvbnRlbnRGcmFtZS55LFxyXG4gICAgICAgICAgICBoOiBuZXdILFxyXG4gICAgICAgICAgICB3OiBjb250ZW50RnJhbWUud1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3U2luZ2xlU2VyaWVMZWdlbmQoZnJhbWU6IEZyYW1lUmVjdCwgc2VyaWU6IFNlcmllRGF0YUNvbW1vbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IFBBRERJTkdfTVVMVElQSUVSID0gMC42O1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgbmFtZSB9ID0gc2VyaWU7XHJcblxyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmNvbG9yO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnNoYXBlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGRyYXcob3B0aW9ucy5zaGFwZSwgb3B0aW9ucy5jb2xvciwgJ2JsYWNrJyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke29wdGlvbnMuc2hhcGV9IGlzIGludmFsaWQgc2hhcGUuIFNlZSBkb2N1bWVudGF0aW9uLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xyXG4gICAgICAgIGNvbnN0IG9yaWVuYXRpb25MZW4gPSBNYXRoLm1pbihmcmFtZS53LCBmcmFtZS5oKTtcclxuICAgICAgICBjb25zdCBib3hFZGdlV2lkdGggPSBvcmllbmF0aW9uTGVuICogUEFERElOR19NVUxUSVBJRVI7XHJcbiAgICAgICAgY29uc3QgbmV3RnJhbWUgPSB7XHJcbiAgICAgICAgICAgIHg6IGZyYW1lLnggKyAob3JpZW5hdGlvbkxlbiAtIGJveEVkZ2VXaWR0aCkgLyAyLFxyXG4gICAgICAgICAgICB5OiBmcmFtZS55ICsgKG9yaWVuYXRpb25MZW4gLSBib3hFZGdlV2lkdGgpIC8gMixcclxuICAgICAgICAgICAgdzogYm94RWRnZVdpZHRoLFxyXG4gICAgICAgICAgICBoOiBib3hFZGdlV2lkdGgsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjdHguZmlsbFJlY3QobmV3RnJhbWUueCwgbmV3RnJhbWUueSwgbmV3RnJhbWUudywgbmV3RnJhbWUuaCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZVJlY3QobmV3RnJhbWUueCwgbmV3RnJhbWUueSwgbmV3RnJhbWUudywgbmV3RnJhbWUuaCk7XHJcbiAgICAgICAgY29uc3QgY2VudGVyID0ge1xyXG4gICAgICAgICAgICB4OiBmcmFtZS54ICsgb3JpZW5hdGlvbkxlbixcclxuICAgICAgICAgICAgeTogZnJhbWUueSArIG9yaWVuYXRpb25MZW4gLyAyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLmZsb29yKG9yaWVuYXRpb25MZW4gLyA0KX1weCBzYW5zLXNlcmlmYDtcclxuICAgICAgICBjb25zdCB7IGFjdHVhbEJvdW5kaW5nQm94QXNjZW50IH0gPSBjdHgubWVhc3VyZVRleHQobmFtZSk7XHJcbiAgICAgICAgY3R4LmZpbGxUZXh0KG5hbWUsIGNlbnRlci54LCBjZW50ZXIueSArIGFjdHVhbEJvdW5kaW5nQm94QXNjZW50IC8gMiwgZnJhbWUudyAtIG9yaWVuYXRpb25MZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZHJhd0xlZ2VuZChjb250ZW50RnJhbWU6IEZyYW1lUmVjdCwgc2VyaWVzOiBTZXJpZURhdGFDb21tb25bXSk6IEZyYW1lUmVjdCB7XHJcbiAgICAgICAgY29uc3QgbGVnZW5kRnJhbWUgPSB0aGlzLmdldExlZ2VuZEZyYW1lKGNvbnRlbnRGcmFtZSk7XHJcbiAgICAgICAgY29uc3QgUEFERElOR19NVUxUSVBJRVIgPSAwLjc1O1xyXG4gICAgICAgIGNvbnN0IG5ld1cgPSBsZWdlbmRGcmFtZS53ICogUEFERElOR19NVUxUSVBJRVI7XHJcbiAgICAgICAgbGVnZW5kRnJhbWUueCA9IGxlZ2VuZEZyYW1lLnggKyAobGVnZW5kRnJhbWUudyAtIG5ld1cpIC8gMjtcclxuICAgICAgICBsZWdlbmRGcmFtZS53ID0gbmV3VztcclxuXHJcbiAgICAgICAgY29uc3QgU0VSSUVfTEVHRU5EX1BFUl9MRVZFTCA9IDU7XHJcbiAgICAgICAgY29uc3QgbGV2ZWxzID0gTWF0aC5jZWlsKHNlcmllcy5sZW5ndGggLyBTRVJJRV9MRUdFTkRfUEVSX0xFVkVMKTtcclxuICAgICAgICBjb25zdCBmcmFtZVcgPSBsZWdlbmRGcmFtZS53IC8gTWF0aC5taW4oc2VyaWVzLmxlbmd0aCwgU0VSSUVfTEVHRU5EX1BFUl9MRVZFTCk7XHJcbiAgICAgICAgY29uc3QgZnJhbWVIID0gbGVnZW5kRnJhbWUuaCAvIGxldmVscztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTaW5nbGVTZXJpZUxlZ2VuZCh7XHJcbiAgICAgICAgICAgICAgICB4OiBsZWdlbmRGcmFtZS54ICsgZnJhbWVXICogKGkgJSBTRVJJRV9MRUdFTkRfUEVSX0xFVkVMKSxcclxuICAgICAgICAgICAgICAgIHk6IGxlZ2VuZEZyYW1lLnkgKyBmcmFtZUggKiAoTWF0aC5mbG9vcihpIC8gU0VSSUVfTEVHRU5EX1BFUl9MRVZFTCkpLFxyXG4gICAgICAgICAgICAgICAgdzogZnJhbWVXLFxyXG4gICAgICAgICAgICAgICAgaDogZnJhbWVIXHJcbiAgICAgICAgICAgIH0sIHNlcmllc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlbWFpbmluZ0NvbnRlbnRGcmFtZShjb250ZW50RnJhbWUsIGxlZ2VuZEZyYW1lKTtcclxuICAgIH1cclxufSIsImltcG9ydCBQbG90S2l0IGZyb20gXCIuL1Bsb3RLaXRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFBsb3Qge1xyXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcbiAgICBwbG90S2l0OiBQbG90S2l0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgdGhpcy5wbG90S2l0ID0gbmV3IFBsb3RLaXQoY3R4KTtcclxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENoYXJ0T3B0aW9ucywgTXVsdGlTZXJpZURhdGEsIFNlcmllT3B0aW9ucyB9IGZyb20gXCIuLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgUGxvdCBmcm9tIFwiLi9QbG90XCI7XHJcbmltcG9ydCB7IGFwcGx5U2hhcGVPckNvbG9yIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhclBsb3QgZXh0ZW5kcyBQbG90IHtcclxuICAgIENPTF9TUEFDRV9TSVpFID0gMC43NTtcclxuICAgIFZBTFVFX0JPVFRPTV9QQURESU5HID0gNDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIHN1cGVyKGN0eCk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0JhcnMobGFiZWxzOiBzdHJpbmdbXSwgc2VyaWVzOiBNdWx0aVNlcmllRGF0YVtdLCBjaGFydE9wdGlvbnM6IENoYXJ0T3B0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIGxldCBwbG90RnJhbWUgPSB0aGlzLnBsb3RLaXQucHJlcGFyZUNoYXJ0Rm9yRHJhd2luZyhjaGFydE9wdGlvbnMsIHNlcmllcyk7XHJcbiAgICAgICAgbGV0IGxhYmVsRnJhbWVIID0gMDtcclxuICAgICAgICBpZiAoY2hhcnRPcHRpb25zLnNob3dMYWJlbHMpIHtcclxuICAgICAgICAgICAgY29uc3QgYmVmRnJhbWVIZWlnaHQgPSBwbG90RnJhbWUuaDtcclxuICAgICAgICAgICAgcGxvdEZyYW1lID0gdGhpcy5wbG90S2l0LmRyYXdMYWJlbHMocGxvdEZyYW1lKTtcclxuICAgICAgICAgICAgbGFiZWxGcmFtZUggPSBNYXRoLmZsb29yKGJlZkZyYW1lSGVpZ2h0IC0gcGxvdEZyYW1lLmgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHRpY2tDb3VudCwgdGlja0hlaWdodCB9ID0gdGhpcy5wbG90S2l0LmRyYXdHcmlkSG9yaXpvbnRhbExpbmVzKHNlcmllcywgcGxvdEZyYW1lKTtcclxuICAgICAgICBjb25zdCBoU3BhY2VCZXR3ZWVuVGlja3MgPSBwbG90RnJhbWUuaCAvICgodGlja0NvdW50ICsgMSkgKiB0aWNrSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VyaWVDb3VudCA9IHNlcmllcy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgYmFyQXJlYXMgPSBsYWJlbHMubGVuZ3RoO1xyXG5cclxuICAgICAgICBjb25zdCBiYXJBcmVhV2lkdGggPSBwbG90RnJhbWUudyAvIGJhckFyZWFzO1xyXG4gICAgICAgIGNvbnN0IHBhZGRpbmdXaWR0aCA9IGJhckFyZWFXaWR0aCAqICgxIC0gdGhpcy5DT0xfU1BBQ0VfU0laRSk7XHJcbiAgICAgICAgY29uc3QgYmFyQXJlYVdpZHRoUGFkZGVkID0gYmFyQXJlYVdpZHRoIC0gMiAqIHBhZGRpbmdXaWR0aDtcclxuXHJcbiAgICAgICAgY29uc3Qgb25lQ29sdW1uV2lkdGggPSBiYXJBcmVhV2lkdGhQYWRkZWQgLyBzZXJpZUNvdW50O1xyXG5cclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgICAgIGNvbnN0IHlDb2x1bW5Cb3R0b20gPSBwbG90RnJhbWUueSArIHBsb3RGcmFtZS5oO1xyXG4gICAgICAgIGNvbnN0IHB4Rm9udEZvclZhbHVlID0gTWF0aC5mbG9vcihvbmVDb2x1bW5XaWR0aCAqIDAuNSk7XHJcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IGAke3B4Rm9udEZvclZhbHVlfXB4IHNhbnMtc2VyaWZgO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGJhckFyZWFzOyBhKyspIHtcclxuICAgICAgICAgICAgY29uc3QgeEFyZWFCZWdpbm5pbmcgPSBwbG90RnJhbWUueCArIGEgKiBiYXJBcmVhV2lkdGggKyBwYWRkaW5nV2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChjaGFydE9wdGlvbnMuc2hvd0xhYmVscykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZm9udCA9IGAke2xhYmVsRnJhbWVIfXB4IHNhbnMtc2VyaWZgO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgd2lkdGggfSA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KGxhYmVsc1thXSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4TGFiZWwgPSB4QXJlYUJlZ2lubmluZyArIChiYXJBcmVhV2lkdGhQYWRkZWQgLyAyKSAtIHdpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlMYWJlbCA9IHBsb3RGcmFtZS55ICsgcGxvdEZyYW1lLmggKyBsYWJlbEZyYW1lSCAqIDAuODtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KGxhYmVsc1thXSwgeExhYmVsLCB5TGFiZWwsIGJhckFyZWFXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5mb250ID0gYCR7cHhGb250Rm9yVmFsdWV9cHggc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBzZXJpZUNvdW50OyBzKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhDb2x1bW4gPSB4QXJlYUJlZ2lubmluZyArIHMgKiBvbmVDb2x1bW5XaWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhDb2x1bW4gPSBzZXJpZXNbc10udmFsdWVzW2FdICogaFNwYWNlQmV0d2VlblRpY2tzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeUNvbHVtbiA9IHlDb2x1bW5Cb3R0b20gLSBoQ29sdW1uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3QmFyKFxyXG4gICAgICAgICAgICAgICAgICAgIHhDb2x1bW4sXHJcbiAgICAgICAgICAgICAgICAgICAgeUNvbHVtbixcclxuICAgICAgICAgICAgICAgICAgICBvbmVDb2x1bW5XaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoQ29sdW1uLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tzXS5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tzXS52YWx1ZXNbYV1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3QmFyKHhwb3M6IG51bWJlciwgeXBvczogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3B0aW9uczogU2VyaWVPcHRpb25zLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5maWxsQmFyKHhwb3MsIHlwb3MsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHsgc2hvd1ZhbHVlLCBib3JkZXJXaWR0aCB9ID0gb3B0aW9ucztcclxuICAgICAgICBpZiAoYm9yZGVyV2lkdGgpXHJcbiAgICAgICAgICAgIHRoaXMuc3Ryb2tlQmFyKHhwb3MsIHlwb3MsIHdpZHRoLCBoZWlnaHQsIGJvcmRlcldpZHRoKTtcclxuICAgICAgICBpZiAoc2hvd1ZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLmFkZEJhclZhbHVlKHhwb3MsIHlwb3MsIHdpZHRoLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaWxsQmFyKHhwb3M6IG51bWJlciwgeXBvczogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3B0aW9uczogU2VyaWVPcHRpb25zKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjb2xvciwgc2hhcGUgfSA9IG9wdGlvbnM7XHJcbiAgICAgICAgYXBwbHlTaGFwZU9yQ29sb3IodGhpcy5jdHgsIHNoYXBlLCBjb2xvcik7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeHBvcywgeXBvcywgd2lkdGgsIGhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdHJva2VCYXIoeHBvczogbnVtYmVyLCB5cG9zOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBib3JkZXJXaWR0aDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gaGVpZ2h0ID8gYm9yZGVyV2lkdGggOiAxO1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4cG9zLCB5cG9zICsgaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmN0eC5saW5lVG8oeHBvcywgeXBvcyk7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHhwb3MgKyB3aWR0aCwgeXBvcyk7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHhwb3MgKyB3aWR0aCwgeXBvcyArIGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkQmFyVmFsdWUoeHBvczogbnVtYmVyLCB5cG9zOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICBjb25zdCB3VGV4dCA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHZhbHVlU3RyaW5nKS53aWR0aDtcclxuICAgICAgICBjb25zdCB4VmFsdWVDZW50ZXJlZCA9IHhwb3MgKyB3aWR0aCAvIDIgLSB3VGV4dCAvIDI7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXHJcbiAgICAgICAgICAgIHZhbHVlU3RyaW5nLFxyXG4gICAgICAgICAgICB4VmFsdWVDZW50ZXJlZCxcclxuICAgICAgICAgICAgeXBvcyAtIHRoaXMuVkFMVUVfQk9UVE9NX1BBRERJTkcsXHJcbiAgICAgICAgICAgIHdpZHRoXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE11bHRpU2VyaWVEYXRhLCBDb250ZXh0U291cmNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiLi9DaGFydFwiO1xyXG5pbXBvcnQgQ2hhcnRVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgQmFyUGxvdCBmcm9tIFwiLi4vcGxvdC9CYXJQbG90XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFyQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XHJcbiAgICBkYXRhTGFiZWxzOiBzdHJpbmdbXTtcclxuICAgIHNlcmllc0RhdGE6IE11bHRpU2VyaWVEYXRhW107XHJcbiAgICBwbG90OiBCYXJQbG90O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQ29udGV4dFNvdXJjZSkge1xyXG4gICAgICAgIHN1cGVyKHNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy5wbG90ID0gbmV3IEJhclBsb3QodGhpcy5jb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IFgobGFiZWxzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuZGF0YUxhYmVscyA9IGxhYmVscztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IFkoc2VyaWVzOiBudW1iZXJbXVtdKSB7XHJcbiAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXMuZGF0YUxhYmVscztcclxuICAgICAgICBpZiAoIWxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1ZhbHVlcyBvbiBcIlhcIiBheGlzIG11c3QgYmUgc3BlY2lmaWVkIGJlZm9yZSBzZXR0aW5nIFwiWVwiIHZhbHVlcy4nKTtcclxuICAgICAgICBjb25zdCBtYXBwZWRTZXJpZXMgPSBzZXJpZXMubWFwKHNlcmllID0+IENoYXJ0VXRpbHMuc2xpY2VPckZpbGwoc2VyaWUsIGxlbmd0aCkpO1xyXG4gICAgICAgIHRoaXMuc2VyaWVzRGF0YSA9IG1hcHBlZFNlcmllcy5tYXAoKHNlcmllLCBpbmRleCkgPT4gdGhpcy5nZXREZWZhdWx0U2VyaWVPYmplY3Qoc2VyaWUsIGluZGV4KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzZXJpZU5hbWVzKG5hbWVzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKG5hbWVzLmxlbmd0aCwgdGhpcy5zZXJpZXNEYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW47IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNlcmllc0RhdGFbaV0ubmFtZSA9IG5hbWVzW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldERlZmF1bHRTZXJpZU9iamVjdChzZXJpZTogbnVtYmVyW10sIGluZGV4OiBudW1iZXIpOiBNdWx0aVNlcmllRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWVzOiBzZXJpZSxcclxuICAgICAgICAgICAgbmFtZTogYHNlcmllJHtpbmRleH1gLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTY3NzcyMTUpLnRvU3RyaW5nKDE2KSxcclxuICAgICAgICAgICAgICAgIHNob3dWYWx1ZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93T25MZWdlbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBzaGFwZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBsb3QuZHJhd0JhcnModGhpcy5kYXRhTGFiZWxzLCB0aGlzLnNlcmllc0RhdGEsIHRoaXMuY2hhcnRPcHRpb25zKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENoYXJ0T3B0aW9ucywgU2luZ2xlU2VyaWVEYXRhIH0gZnJvbSBcIi4uL21vZGVsL3R5cGVzXCI7XHJcbmltcG9ydCBQbG90IGZyb20gXCIuL1Bsb3RcIjtcclxuaW1wb3J0IHsgUGllUGFydERhdGEgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBhcHBseVNoYXBlT3JDb2xvciB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWVQbG90IGV4dGVuZHMgUGxvdCB7XHJcbiAgICBSQURJVVNfRElWSURFUiA9IDIuNTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIHN1cGVyKGN0eCk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd1BpZShzZXJpZXM6IFNpbmdsZVNlcmllRGF0YVtdLCBjaGFydE9wdGlvbnM6IENoYXJ0T3B0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHBsb3RGcmFtZSA9IHRoaXMucGxvdEtpdC5wcmVwYXJlQ2hhcnRGb3JEcmF3aW5nKGNoYXJ0T3B0aW9ucywgc2VyaWVzKTtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5tYXBTZXJpZXNUb1BpZVBhcnREYXRhKHNlcmllcyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBpZVJhZGl1cyA9IE1hdGgubWluKHBsb3RGcmFtZS53LCBwbG90RnJhbWUuaCkgLyB0aGlzLlJBRElVU19ESVZJREVSO1xyXG4gICAgICAgIGNvbnN0IHBpZUNlbnRlciA9IHtcclxuICAgICAgICAgICAgeDogcGxvdEZyYW1lLnggKyBwbG90RnJhbWUudyAvIDIsXHJcbiAgICAgICAgICAgIHk6IHBsb3RGcmFtZS55ICsgcGxvdEZyYW1lLmggLyAyXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGFjY1JhZGlhbnMgPSAwO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLmZsb29yKHBpZVJhZGl1cyAvIDUpfXB4IHNhbnMtc2VyaWZgO1xyXG5cclxuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1ha2VQaWVQYXJ0UGF0aChwaWVDZW50ZXIueCwgcGllQ2VudGVyLnksIHBpZVJhZGl1cywgYWNjUmFkaWFucywgYWNjUmFkaWFucyArIGVudHJ5LnJhZGlhbnMpO1xyXG4gICAgICAgICAgICBhcHBseVNoYXBlT3JDb2xvcihjdHgsIGVudHJ5LnNoYXBlLCBlbnRyeS5jb2xvcik7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5ib3JkZXJXaWR0aCA+IDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZUJvcmRlcihlbnRyeS5ib3JkZXJXaWR0aCk7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5zaG93VmFsdWUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFBpZVZhbHVlKGVudHJ5LnZhbHVlLCBwaWVDZW50ZXIueCwgcGllQ2VudGVyLnksIHBpZVJhZGl1cywgYWNjUmFkaWFucyArIGVudHJ5LnJhZGlhbnMgLyAyKTtcclxuICAgICAgICAgICAgYWNjUmFkaWFucyArPSBlbnRyeS5yYWRpYW5zO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFwU2VyaWVzVG9QaWVQYXJ0RGF0YShzZXJpZXM6IFNpbmdsZVNlcmllRGF0YVtdKTogUGllUGFydERhdGFbXSB7XHJcbiAgICAgICAgY29uc3QgdG90YWwgPSBzZXJpZXMubWFwKHNlcmllID0+IHNlcmllLnZhbHVlKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcclxuICAgICAgICByZXR1cm4gc2VyaWVzLm1hcChzZXJpZSA9PiAoe1xyXG4gICAgICAgICAgICByYWRpYW5zOiBzZXJpZS52YWx1ZSAqIDIgKiBNYXRoLlBJIC8gdG90YWwsXHJcbiAgICAgICAgICAgIGNvbG9yOiBzZXJpZS5vcHRpb25zLmNvbG9yLFxyXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogc2VyaWUub3B0aW9ucy5ib3JkZXJXaWR0aCxcclxuICAgICAgICAgICAgc2hhcGU6IHNlcmllLm9wdGlvbnMuc2hhcGUsXHJcbiAgICAgICAgICAgIHNob3dWYWx1ZTogc2VyaWUub3B0aW9ucy5zaG93VmFsdWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBzZXJpZS52YWx1ZVxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1ha2VQaWVQYXJ0UGF0aCh4Q2VudGVyOiBudW1iZXIsIHlDZW50ZXI6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4Q2VudGVyLCB5Q2VudGVyKTtcclxuICAgICAgICB0aGlzLmN0eC5hcmMoeENlbnRlciwgeUNlbnRlciwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHhDZW50ZXIsIHlDZW50ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3Ryb2tlQm9yZGVyKHdpZHRoOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZFBpZVZhbHVlKHZhbHVlOiBudW1iZXIsIHhDZW50ZXI6IG51bWJlciwgeUNlbnRlcjogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgcmFkaWFuczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IFN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQgfSA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRleHQpO1xyXG4gICAgICAgIGNvbnN0IHggPSAoeENlbnRlciArIE1hdGguY29zKHJhZGlhbnMpICogKHJhZGl1cyArIHdpZHRoKSkgLSAod2lkdGggLyAyKTtcclxuICAgICAgICBjb25zdCB5ID0gKHlDZW50ZXIgKyBNYXRoLnNpbihyYWRpYW5zKSAqIChyYWRpdXMgKyBhY3R1YWxCb3VuZGluZ0JveEFzY2VudCkpICsgKGFjdHVhbEJvdW5kaW5nQm94QXNjZW50IC8gMik7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dCh0ZXh0LCB4LCB5KTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgU2luZ2xlU2VyaWVEYXRhLCBDb250ZXh0U291cmNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiLi9DaGFydFwiO1xyXG5pbXBvcnQgQ2hhcnRVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgUGllUGxvdCBmcm9tIFwiLi4vcGxvdC9QaWVQbG90XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGllQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XHJcblxyXG4gICAgc2VyaWVzRGF0YTogU2luZ2xlU2VyaWVEYXRhW107XHJcbiAgICBwbG90OiBQaWVQbG90O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQ29udGV4dFNvdXJjZSkge1xyXG4gICAgICAgIHN1cGVyKHNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy5wbG90ID0gbmV3IFBpZVBsb3QodGhpcy5jb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IFgobGFiZWxzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuc2VyaWVzRGF0YSA9XHJcbiAgICAgICAgICAgIGxhYmVscy5tYXAoKGxhYmVsKSA9PiB0aGlzLmdldERlZmF1bHRTZXJpZU9iamVjdChsYWJlbCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgWSh2YWx1ZXM6IG51bWJlcltdKSB7XHJcbiAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXMuc2VyaWVzRGF0YTtcclxuICAgICAgICBpZiAoIWxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1ZhbHVlcyBvbiBcIlhcIiBheGlzIG11c3QgYmUgc3BlY2lmaWVkIGJlZm9yZSBzZXR0aW5nIFwiWVwiIHZhbHVlcy4nKTtcclxuICAgICAgICBjb25zdCBtYXBwZWRWYWx1ZXMgPSBDaGFydFV0aWxzLnNsaWNlT3JGaWxsKHZhbHVlcywgbGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnNlcmllc0RhdGEubWFwKChvcHRpb24sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IG1hcHBlZFZhbHVlc1tpbmRleF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0U2VyaWVPYmplY3QobGFiZWw6IHN0cmluZyk6IFNpbmdsZVNlcmllRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgIG5hbWU6IGxhYmVsLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTY3NzcyMTUpLnRvU3RyaW5nKDE2KSxcclxuICAgICAgICAgICAgICAgIHNob3dWYWx1ZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93T25MZWdlbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBzaGFwZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBsb3QuZHJhd1BpZSh0aGlzLnNlcmllc0RhdGEsIHRoaXMuY2hhcnRPcHRpb25zKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbnRleHRTb3VyY2UgfSBmcm9tIFwiLi4vbW9kZWwvdHlwZXNcIjtcclxuaW1wb3J0IHsgQmFyQ2hhcnQgfSBmcm9tIFwiLi4vbW9kZWwvQmFyQ2hhcnRcIjtcclxuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiLi4vbW9kZWwvQ2hhcnRcIjtcclxuaW1wb3J0IHsgUGllQ2hhcnQgfSBmcm9tIFwiLi4vbW9kZWwvUGllQ2hhcnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlcnZlQ2hhcnQodHlwZTogc3RyaW5nLCBzb3VyY2U6IENvbnRleHRTb3VyY2UpOiBDaGFydCB7XHJcbiAgICBzd2l0Y2ggKHR5cGUudG9Mb3dlckNhc2UoKS50cmltKCkpIHtcclxuICAgICAgICBjYXNlIFwicGllXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGllQ2hhcnQoc291cmNlKTtcclxuICAgICAgICBjYXNlIFwiYmFyXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmFyQ2hhcnQoc291cmNlKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZX0gY2hhcnQgaXMgbm90IGRlZmluZWQuYCk7XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkJBQ0tHUk9VTkRfQ09MT1IiLCJQQVRURVJOX0NPTE9SIiwiUE9JTlRfU1RZTEUiLCJjbGFzc0NhbGxDaGVjayIsIkF3YWl0VmFsdWUiLCJ2YWx1ZSIsInRoaXMiLCJBc3luY0dlbmVyYXRvciIsImdlbiIsImZyb250IiwiYmFjayIsInJlc3VtZSIsImtleSIsImFyZyIsInJlc3VsdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInNldHRsZSIsImRvbmUiLCJlcnIiLCJ0eXBlIiwicmVqZWN0IiwibmV4dCIsIl9pbnZva2UiLCJyZXF1ZXN0IiwicmV0dXJuIiwidW5kZWZpbmVkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInByb3RvdHlwZSIsInRocm93IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIlNoYXBlIiwic2l6ZSIsImJhY2tncm91bmRDb2xvciIsInBhdHRlcm5Db2xvciIsIl9jYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJfY29udGV4dCIsImdldENvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiX3NpemUiLCJfcGF0dGVybkNvbG9yIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJsaW5lSm9pbiIsImxpbmVDYXAiLCJQbHVzIiwiX1NoYXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJhcHBseSIsImhhbGZTaXplIiwiYmVnaW5QYXRoIiwic2V0U3Ryb2tlUHJvcHMiLCJkcmF3UGx1cyIsInN0cm9rZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicXVhcnRlclNpemUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJDcm9zcyIsImRyYXdDcm9zcyIsImdhcCIsIkRhc2giLCJkcmF3RGFzaCIsIkNyb3NzRGFzaCIsIkRvdCIsInNldEZpbGxQcm9wcyIsImRyYXdEb3QiLCJmaWxsIiwiZGlhbWV0ZXIiLCJ4IiwieSIsImFyYyIsIk1hdGgiLCJQSSIsIkRvdERhc2giLCJEaXNjIiwiX0RvdCIsIlJpbmciLCJMaW5lIiwiZHJhd0xpbmUiLCJWZXJ0aWNhbExpbmUiLCJfTGluZSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsImRyYXdUaWxlIiwiV2VhdmUiLCJkcmF3V2VhdmUiLCJaaWd6YWciLCJkcmF3WmlnemFnIiwidGVudGhTaXplIiwiWmlnemFnVmVydGljYWwiLCJfWmlnemFnIiwiRGlhZ29uYWwiLCJkcmF3RGlhZ29uYWxMaW5lIiwiRGlhZ29uYWxSaWdodExlZnQiLCJfRGlhZ29uYWwiLCJTcXVhcmUiLCJkcmF3U3F1YXJlIiwiQm94IiwiZHJhd0JveCIsInN0cm9rZVJlY3QiLCJUcmlhbmdsZSIsImRyYXdUcmlhbmdsZSIsIlRyaWFuZ2xlVmVydGljYWwiLCJfVHJpYW5nbGUiLCJEaWFtb25kIiwiZHJhd0RpYW1vbmQiLCJEaWFtb25kQm94IiwiX0RpYW1vbmQiLCJzaGFwZXMiLCJjb21wbGV0ZVNoYXBlc0xpc3QiLCJnZXRSYW5kb21TaGFwZSIsImV4Y2x1ZGVkU2hhcGVUeXBlcyIsInNoYXBlc0xpc3QiLCJrZXlzIiwiZm9yRWFjaCIsInNoYXBlVHlwZSIsInNwbGljZSIsImluZGV4T2YiLCJyYW5kb21JbmRleCIsImZsb29yIiwicmFuZG9tIiwiZHJhdyIsInBhdHRlcm5DYW52YXMiLCJwYXR0ZXJuQ29udGV4dCIsIm91dGVyU2l6ZSIsInNoYXBlIiwicGF0dGVybiIsImNyZWF0ZVBhdHRlcm4iLCJnZW5lcmF0ZSIsImNvbG9yTGlzdCIsImZpcnN0U2hhcGVUeXBlIiwicHJldmlvdXNTaGFwZVR5cGUiLCJtYXAiLCJjb2xvciIsImluZGV4IiwibGlzdCIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZ2V0Iiwib2JqIiwicHJvcCIsInN0YXRpYyIsImFycmF5IiwibGVuIiwiZmlsbFdpdGgiLCJzbGljZSIsInB1c2giLCJuZXdPcHRpb25zIiwiYWN0dWFsT3B0aW9ucyIsImVudHJpZXMiLCJwYWlyIiwiaW5jbHVkZXMiLCJDaGFydCIsImFuYWx5emVkRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVwbGFjZSIsIkhUTUxDYW52YXNFbGVtZW50IiwiY29udGV4dCIsIkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCIsIkVycm9yIiwiY2hhcnRPcHRpb25zIiwidGl0bGUiLCJzaG93VGl0bGUiLCJzaG93TGVnZW5kIiwic2hvd0xhYmVscyIsInNlcmllc0RhdGEiLCJzZXRDaGFydE9wdGlvbnMiLCJvcHRpb25zIiwic2V0U2VyaWVPcHRpb25zIiwid2hpY2hTZXJpZXMiLCJzZXJpZU5hbWUiLCJhY3R1YWxTZXJpZSIsImZpbmQiLCJleGlzdGluZ1NlcmllIiwibmFtZSIsImNvbnNvbGUiLCJ3YXJuIiwic2VyaWUiLCJhcHBseVNoYXBlT3JDb2xvciIsImN0eCIsIlBsb3RLaXQiLCJMQUJFTFNfU1BBQ0VfTVVMVElQSUVSIiwicHJlcGFyZUNoYXJ0Rm9yRHJhd2luZyIsInNlcmllcyIsImNhbnZhcyIsImNsZWFyUmVjdCIsImNvbnRlbnRGcmFtZSIsImdldENvbnRlbnRGcmFtZSIsInN0cm9rZUZyYW1lIiwiZHJhd1RpdGxlIiwiZHJhd0xlZ2VuZCIsImRyYXdMYWJlbHMiLCJmcmFtZSIsImgiLCJ3IiwiZHJhd0dyaWRIb3Jpem9udGFsTGluZXMiLCJtYXgiLCJ2YWx1ZXMiLCJ0aWNrQ291bnQiLCJ0aWNrSGVpZ2h0IiwibGFyZ2VzdCIsIm1vc3RUaWNrcyIsIm1pbmltdW0iLCJtYWduaXR1ZGUiLCJwb3ciLCJsb2cxMCIsInJlc2lkdWFsIiwiZSIsImNlaWwiLCJnZXRUaWNrSW5mbyIsInNpbmdsZUgiLCJ2YWwiLCJTdHJpbmciLCJtZWFzdXJlVGV4dCIsImZpbGxUZXh0IiwicGFkZGluZyIsIm1pbiIsImdldFJlbWFpbmluZ0NvbnRlbnRGcmFtZSIsInByZXYiLCJyZWNlbnQiLCJnZXRMZWdlbmRGcmFtZSIsIm5ld0giLCJ0aXRsZUZyYW1lIiwiZ2V0VGl0bGVGcmFtZSIsImZvbnQiLCJ0ZXh0TWVhc3VyZW1lbnQiLCJ0ZXh0UG9zaXRpb25YIiwidGV4dFBvc2l0aW9uWSIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiZHJhd1NpbmdsZVNlcmllTGVnZW5kIiwib3JpZW5hdGlvbkxlbiIsImJveEVkZ2VXaWR0aCIsIm5ld0ZyYW1lIiwiY2VudGVyIiwibGVnZW5kRnJhbWUiLCJuZXdXIiwibGV2ZWxzIiwiZnJhbWVXIiwiZnJhbWVIIiwiUGxvdCIsInBsb3RLaXQiLCJCYXJQbG90Iiwic3VwZXIiLCJDT0xfU1BBQ0VfU0laRSIsIlZBTFVFX0JPVFRPTV9QQURESU5HIiwiZHJhd0JhcnMiLCJsYWJlbHMiLCJwbG90RnJhbWUiLCJsYWJlbEZyYW1lSCIsImJlZkZyYW1lSGVpZ2h0IiwiaFNwYWNlQmV0d2VlblRpY2tzIiwic2VyaWVDb3VudCIsImJhckFyZWFzIiwiYmFyQXJlYVdpZHRoIiwicGFkZGluZ1dpZHRoIiwiYmFyQXJlYVdpZHRoUGFkZGVkIiwib25lQ29sdW1uV2lkdGgiLCJ5Q29sdW1uQm90dG9tIiwicHhGb250Rm9yVmFsdWUiLCJhIiwieEFyZWFCZWdpbm5pbmciLCJ4TGFiZWwiLCJ5TGFiZWwiLCJzIiwieENvbHVtbiIsImhDb2x1bW4iLCJ5Q29sdW1uIiwiZHJhd0JhciIsInhwb3MiLCJ5cG9zIiwiZmlsbEJhciIsInNob3dWYWx1ZSIsImJvcmRlcldpZHRoIiwic3Ryb2tlQmFyIiwiYWRkQmFyVmFsdWUiLCJ2YWx1ZVN0cmluZyIsInhWYWx1ZUNlbnRlcmVkIiwiQmFyQ2hhcnQiLCJwbG90IiwiWCIsImRhdGFMYWJlbHMiLCJZIiwibWFwcGVkU2VyaWVzIiwiZ2V0RGVmYXVsdFNlcmllT2JqZWN0Iiwic2VyaWVOYW1lcyIsIm5hbWVzIiwidG9TdHJpbmciLCJzaG93T25MZWdlbmQiLCJQaWVQbG90IiwiUkFESVVTX0RJVklERVIiLCJkcmF3UGllIiwibWFwU2VyaWVzVG9QaWVQYXJ0RGF0YSIsInBpZVJhZGl1cyIsInBpZUNlbnRlciIsImFjY1JhZGlhbnMiLCJlbnRyeSIsIm1ha2VQaWVQYXJ0UGF0aCIsInJhZGlhbnMiLCJzdHJva2VCb3JkZXIiLCJhZGRQaWVWYWx1ZSIsInRvdGFsIiwicmVkdWNlIiwiYiIsInhDZW50ZXIiLCJ5Q2VudGVyIiwicmFkaXVzIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwidGV4dCIsImNvcyIsInNpbiIsIlBpZUNoYXJ0IiwibGFiZWwiLCJtYXBwZWRWYWx1ZXMiLCJvcHRpb24iLCJzZXJ2ZUNoYXJ0IiwidG9Mb3dlckNhc2UiLCJ0cmltIl0sInNvdXJjZVJvb3QiOiIifQ==