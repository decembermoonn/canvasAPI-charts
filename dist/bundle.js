var t={d:(r,e)=>{for(var a in e)t.o(e,a)&&!t.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:e[a]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{Z:()=>i});class e{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(t,r){return[2/t,0,0,0,-2/r,0,-1,1,1]}translationMatrix(t,r){return[1,0,0,0,1,0,t,r,1]}rotationMatrix(t){const r=t/180*Math.PI,e=Math.sin(r),a=Math.cos(r);return[a,-e,0,e,a,0,0,0,1]}scaleMatrix(t,r){return[t,0,0,0,r,0,0,0,1]}arrayToMatrix(t,r){const e=[];for(let a=0;a<t.length;a+=r)e.push(t.slice(a,a+r));return e}multiplyMatrices(t,r){if(t.length===r.length&&[1,4,9,16].includes(t.length)){const e=Math.sqrt(t.length),a=this.arrayToMatrix(t,e),o=this.arrayToMatrix(r,e);return a.map(((t,r)=>o[0].map(((e,n)=>t.reduce(((t,e,i)=>t+a[r][i]*o[i][n]),0))))).flat(1)}}}function a(t,r,e){const a=t.createShader(r);if(t.shaderSource(a,e),t.compileShader(a),t.getShaderParameter(a,t.COMPILE_STATUS))return a;console.log(t.getShaderInfoLog(a)),t.deleteShader(a)}class o{drawF(t){const r=function(t){const r=function(t,r,e){const a=t.createProgram();if(t.attachShader(a,r),t.attachShader(a,e),t.linkProgram(a),t.getProgramParameter(a,t.LINK_STATUS))return a;console.log(t.getProgramInfoLog(a)),t.deleteProgram(a)}(t,a(t,t.VERTEX_SHADER,"attribute vec2 a_position;\r\nvarying vec4 v_color;\r\nuniform mat3 u_matrix;\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_color = gl_Position;\r\n}"),a(t,t.FRAGMENT_SHADER,"precision mediump float;\r\nvarying vec4 v_color;\r\nvoid main() {\r\n    gl_FragColor = v_color;\r\n}"));return r}(t);t.useProgram(r);const o=t.getAttribLocation(r,"a_position"),n=t.getUniformLocation(r,"u_matrix");!function(t){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)}(t);const i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),this.setGeometry(t),t.enableVertexAttribArray(o);const s=t.FLOAT;t.vertexAttribPointer(o,2,s,!1,0,0);const l=function(t){const r=new e,a=r.identityMatrix(),o=r.projectionMatrix(t.canvas.width,t.canvas.height),n=r.translationMatrix(0,0),i=r.rotationMatrix(0),s=r.scaleMatrix(1,1);let l=r.multiplyMatrices(a,o);return l=r.multiplyMatrices(l,n),l=r.multiplyMatrices(l,i),l=r.multiplyMatrices(l,s),l}(t);t.uniformMatrix3fv(n,!1,l);const c=t.TRIANGLES;t.drawArrays(c,0,18)}setGeometry(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,30,0,0,150,0,150,30,0,30,150,30,0,100,0,30,30,30,30,100,0,100,30,30,60,67,60,30,90,30,90,67,60,67,90]),t.STATIC_DRAW)}}class n extends class{constructor(t){let r=t;if("string"==typeof r&&(r=document.getElementById(r.replace("/^#/",""))),r instanceof HTMLCanvasElement)this.context=r.getContext("webgl");else{if(!(r instanceof WebGLRenderingContext))throw Error("Argument must be valid ID, HTMLCanvasElement or WebGLRenderingContext");this.context=r}}}{constructor(t){super(t),this.options={boldEdges:!1,showValues:!0,valueType:"fixed",showLegend:!0,legendPlaement:"bottom"},this.data=[],this.deleteMe=new o}draw(){this.data.length||(this.fillWithExampleData(),console.warn("No data for chart set. Drawing with example data."))}fillWithExampleData(){this.data=Array(5).map(((t,r)=>({key:`element${r}`,value:Math.floor(10*Math.random()),color:{r:Math.floor(256*Math.random()),g:Math.floor(256*Math.random()),b:Math.floor(256*Math.random()),a:255}})))}set X(t){this.data=this.mapArrayToEntries(t)}set Y(t){if(!this.data)throw Error('Values on "X" axis must be specified before setting "Y" values.');if(this.data.length!==t.length)throw Error('Passed array differs in length from values on "X" axis count.');this.data.forEach(((r,e)=>r.value=t[e]))}set configuration(t){Object.entries(t).forEach((t=>{Object.assign(this.options,{[t[0]]:t[1]})}))}set colors(t){if(!this.data)throw Error('Values on "X" axis must be specified before setting "color" values.');if(this.data.length!==t.length)throw Error('Passed array differs in length from values on "X" axis count.');this.data.forEach(((r,e)=>r.color=t[e]))}setSerieColor(t,r){const e=this.data.find((r=>r.key===t));if(null==e)throw new Error(`Serie with name ${t} doesnt exist.`);e.color=r}mapArrayToEntries(t){return t.map((t=>({key:t,value:0})))}}function i(t,r){if("pie"===t.toLowerCase().trim())return new n(r);throw new Error(`${t} chart is not defined.`)}var s=r.Z;export{s as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,