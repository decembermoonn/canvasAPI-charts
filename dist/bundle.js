var t={744:function(t){t.exports=function(){var t="rgba(100, 100, 100, 0.7)",e="rgba(255, 255, 255, 0.8)",i="round",s=(function(){function t(t){this.value=t}function e(e){var i,s;function n(i,s){try{var r=e[i](s),a=r.value;a instanceof t?Promise.resolve(a.value).then((function(t){n("next",t)}),(function(t){n("throw",t)})):o(r.done?"return":"normal",r.value)}catch(t){o("throw",t)}}function o(t,e){switch(t){case"return":i.resolve({value:e,done:!0});break;case"throw":i.reject(e);break;default:i.resolve({value:e,done:!1})}(i=i.next)?n(i.key,i.arg):s=null}this._invoke=function(t,e){return new Promise((function(o,r){var a={key:t,arg:e,resolve:o,reject:r,next:null};s?s=s.next=a:(i=s=a,n(t,e))}))},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),n=function(){function t(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,i,s){return i&&t(e.prototype,i),s&&t(e,s),e}}(),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},h=function(){function o(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;return s(this,o),this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.width=i,this._canvas.height=i,this._context.fillStyle=n,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._size=i,this._patternColor=r,this}return n(o,[{key:"setStrokeProps",value:function(){this._context.strokeStyle=this._patternColor,this._context.lineWidth=this._size/10,this._context.lineJoin=i,this._context.lineCap=i}},{key:"setFillProps",value:function(){this._context.fillStyle=this._patternColor}}]),o}(),l=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawPlus(),this.drawPlus(t,t),this._context.stroke(),this._canvas}},{key:"drawPlus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,0+e),this._context.lineTo(n+t,s+e),this._context.moveTo(0+t,n+e),this._context.lineTo(s+t,n+e),this._context.closePath()}}]),e}(h),c=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawCross(),this.drawCross(t,t),this._context.stroke(),this._canvas}},{key:"drawCross",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,s=2;this._context.moveTo(t+s,e+s),this._context.lineTo(i-s+t,i-s+e),this._context.moveTo(t+s,i-s+e),this._context.lineTo(i-s+t,e+s),this._context.closePath()}}]),e}(h),u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDash(),this.drawDash(t,t),this._context.stroke(),this._canvas}},{key:"drawDash",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,s=2;this._context.moveTo(t+s,e+s),this._context.lineTo(i-s+t,i-s+e),this._context.closePath()}}]),e}(h),x=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new c).drawCross.call(this),(new u).drawDash.call(this,t,t),this._context.stroke(),this._canvas}}]),e}(h),d=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDot(),this.drawDot(t,t),this._context.fill(),this._canvas}},{key:"drawDot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._size/10,s=this._size/4,n=s+t,o=s+e;this._context.moveTo(n+s,o),this._context.arc(n,o,i,0,2*Math.PI),this._context.closePath()}}]),e}(h),p=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new u).drawDash.call(this,t,t),this._context.closePath(),this._context.stroke(),this.setFillProps(),(new d).drawDot.call(this),this._context.fill(),this._canvas}}]),e}(h),_=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setFillProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.fill(),this._canvas}}]),e}(d),f=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setStrokeProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.stroke(),this._canvas}}]),e}(d),g=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawLine(),this.drawLine(t,t),this._context.stroke(),this._canvas}},{key:"drawLine",value:function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=this._size/4;this._context.moveTo(0,e+t),this._context.lineTo(this._size,e+t),this._context.closePath()}}]),e}(h),w=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),g.prototype.drawTile.call(this),this._canvas}}]),e}(g),v=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawWeave(0,0),this._context.stroke(),this._canvas}},{key:"drawWeave",value:function(t,e){var i=this._size,s=i/2;this._context.moveTo(t+1,e+1),this._context.lineTo(s-1,s-1),this._context.moveTo(s+1,i-1),this._context.lineTo(i-1,s+1),this._context.closePath()}}]),e}(h),y=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawZigzag(),this.drawZigzag(this._size/2),this._context.stroke(),this._canvas}},{key:"drawZigzag",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this._size,i=e/4,s=e/2,n=e/10;this._context.moveTo(0,n+t),this._context.lineTo(i,s-n+t),this._context.lineTo(s,n+t),this._context.lineTo(e-i,s-n+t),this._context.lineTo(e,n+t)}}]),e}(h),m=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),y.prototype.drawTile.call(this),this._canvas}}]),e}(y),P=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiagonalLine(),this.drawDiagonalLine(t,t),this._context.stroke(),this._canvas}},{key:"drawDiagonalLine",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=1;this._context.moveTo(s-n-t,-1*n+e),this._context.lineTo(i+1-t,s+1+e),this._context.closePath()}}]),e}(h),T=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),P.prototype.drawTile.call(this),this._canvas}}]),e}(P),S=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawSquare(),this.drawSquare(t,t),this._context.fill(),this._canvas}},{key:"drawSquare",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/20;this._context.fillRect(t+n,e+n,s-2*n,s-2*n),this._context.closePath()}}]),e}(h),b=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawBox(),this.drawBox(t,t),this._context.stroke(),this._canvas}},{key:"drawBox",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/20;this._context.strokeRect(t+n,e+n,s-4*n,s-4*n),this._context.closePath()}}]),e}(h),k=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawTriangle(),this.drawTriangle(t,t),this._context.fill(),this._canvas}},{key:"drawTriangle",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,e),this._context.lineTo(s+t,s+e),this._context.lineTo(t,s+e),this._context.closePath()}}]),e}(h),O=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size;return this._context.translate(t,t),this._context.rotate(180*Math.PI/180),k.prototype.drawTile.call(this),this._canvas}}]),e}(k),D=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.fill(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,e),this._context.lineTo(s+t,n+e),this._context.lineTo(n+t,s+e),this._context.lineTo(t,n+e),this._context.closePath()}}]),e}(h),E=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.stroke(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2-1,n=i/4;this._context.moveTo(n+t,e+1),this._context.lineTo(s+t,n+e),this._context.lineTo(n+t,s+e),this._context.lineTo(t+1,n+e),this._context.closePath()}}]),e}(D),L={plus:l,cross:c,dash:u,"cross-dash":x,dot:d,"dot-dash":p,disc:_,ring:f,line:g,"line-vertical":w,weave:v,zigzag:y,"zigzag-vertical":m,diagonal:P,"diagonal-right-left":T,square:S,box:b,triangle:k,"triangle-inverted":O,diamond:D,"diamond-box":E},I=[];function F(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=Object.keys(L);t.forEach((function(t){e.splice(e.indexOf(t),1)}));var i=Math.floor(Math.random()*e.length);return e[i]}function M(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"square",e=arguments[1],i=arguments[2],s=arguments[3],n=document.createElement("canvas"),o=n.getContext("2d"),r=2*s,a=new(0,I[t])(s,e,i),h=o.createPattern(a.drawTile(),"repeat");return n.width=r,n.height=r,h.shapeType=t,h}return o(I,L,{circle:L.disc,"triangle-vertical":L["triangle-inverted"],"line-horizontal":L.line,"line-diagonal-lr":L.diagonal,"line-diagonal-rl":L["diagonal-right-left"],"zigzag-horizontal":L.zigzag,"diamond-outline":L["diamond-box"]}),{draw:M,generate:function(t){var e=void 0,i=void 0;return t.map((function(t,s,n){var o=void 0;return 0===s?(o=F(),e=i=o):s===n.length-1?o=F([i,e]):(o=F([i]),i=o),M(o,t)}))}}}()}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var s={};(()=>{i.d(s,{Z:()=>T});const t=class{static sliceOrFill(t,e,i){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=i?i:0);return t}static mergeRight(t,e){const i=Object.keys(e);Object.entries(t).forEach((t=>{const s=t[0];if(i.includes(s)){const i=t[1];e[s]=i}}))}};class e{constructor(t){this.ctx=t}}class n extends e{draw(t,e){null==this.plotKit&&(this.plotKit=new d(this.ctx,this));const i=this.plotKit.prepareChartForDrawing(e,t);let s=i.find((t=>"content"===t.id));const n=i.find((t=>"labels"===t.id)),o=this.getMinMaxForSeries(t,"x"),r=this.getMinMaxForSeries(t,"y"),{tickCount:a,tickFrame:h}=this.plotKit.drawGridHorizontalLines(s,r.min,r.max);s=h;const l=s.h/(a+1),c={beginningInPixels:s.x+10,widthOrHeightInPixels:s.w-20,minValueFromSeries:o.min,maxValueFromSeries:o.max},u={beginningInPixels:s.y+l,widthOrHeightInPixels:s.h-l,minValueFromSeries:r.min,maxValueFromSeries:r.max},x=this.xGetValueToPixelMapperFunc(c),p=this.yGetValueToPixelMapperFunc(u);this.performDrawing(t,{xFunc:x,yFunc:p},n)}performDrawing(t,e,i){t.forEach((t=>{t.points.forEach((s=>{const n=this.mapSpacePointToPixelPoint(s,e.xFunc,e.yFunc);this.plotKit.pointTools.performDrawPoint(n,t.options),this.drawValueForPoint(s.x,n.x,i)}))}))}getMinMaxForSeries(t,e){if(t.length){const i=t.findIndex((t=>t.points.length));if(i>=0){const s=t[i].points[0][e],n={x:s,y:s},o=this.minMaxReduceFuncFactory(e),r=t.map((t=>t.points.reduce(o,n))),a=r.reduce(o,r[0]);return{min:a.x,max:a.y}}}return{min:0,max:0}}minMaxReduceFuncFactory(t){return(e,i)=>({x:e.x>i[t]?i[t]:e.x,y:e.y<i[t]?i[t]:e.y})}xGetValueToPixelMapperFunc(t){return e=>t.beginningInPixels+t.widthOrHeightInPixels*((e-t.minValueFromSeries)/(t.maxValueFromSeries-t.minValueFromSeries))}yGetValueToPixelMapperFunc(t){return e=>t.beginningInPixels+t.widthOrHeightInPixels*(1-(e-t.minValueFromSeries)/(t.maxValueFromSeries-t.minValueFromSeries))}mapSpacePointToPixelPoint(t,e,i){return{x:e(t.x),y:i(t.y)}}drawValueForPoint(t,e,i){const s=String(t),{width:n,actualBoundingBoxAscent:o}=this.ctx.measureText(s);this.ctx.fillText(String(t),e-n/2,i.y+i.h/2+o/2)}}class o extends n{performDrawing(t,e,i){null==this.plotKit&&(this.plotKit=new d(this.ctx,this)),t.forEach((t=>{this.plotKit.lineTools.setLineStyle(t.options),this.ctx.beginPath(),t.points.forEach(((t,s)=>{const n=this.mapSpacePointToPixelPoint(t,e.xFunc,e.yFunc);0==s||this.ctx.lineTo(n.x,n.y),this.ctx.moveTo(n.x,n.y),this.drawValueForPoint(t.x,n.x,i)})),this.ctx.closePath(),this.ctx.stroke()})),this.ctx.setLineDash([])}}var r=i(744);function a(t,e,i){if(t.fillStyle=i,null!=e)try{t.fillStyle=(0,r.draw)(e,i,"black")}catch(t){console.warn(`${e} is invalid shape. See documentation.`)}}class h extends e{constructor(){super(...arguments),this.RADIUS_DIVIDER=2.5}drawPie(t,e){null==this.plotKit&&(this.plotKit=new d(this.ctx,this));const{ctx:i}=this,s=this.plotKit.prepareChartForDrawing(e,t).find((t=>"content"===t.id)),n=this.mapSeriesToPiePartData(t),o=Math.min(s.w,s.h)/this.RADIUS_DIVIDER,r={x:s.x+s.w/2,y:s.y+s.h/2};let h=0;i.strokeStyle="black",i.font=`${Math.floor(o/5)}px sans-serif`,n.forEach((t=>{this.makePiePartPath(r.x,r.y,o,h,h+t.radians),a(i,t.shape,t.color),i.fill(),t.borderWidth>0&&this.strokeBorder(t.borderWidth),t.showValue&&this.addPieValue(t.value,r.x,r.y,o,h+t.radians/2),h+=t.radians}))}mapSeriesToPiePartData(t){const e=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({radians:2*t.value*Math.PI/e,color:t.options.color,borderWidth:t.options.borderWidth,shape:t.options.shape,showValue:t.options.showValue,value:t.value})))}makePiePartPath(t,e,i,s,n){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.arc(t,e,i,s,n),this.ctx.lineTo(t,e)}strokeBorder(t){this.ctx.lineWidth=t,this.ctx.stroke()}addPieValue(t,e,i,s,n){const o=String(t),{width:r,actualBoundingBoxAscent:a}=this.ctx.measureText(o),h=e+Math.cos(n)*(s+r)-r/2,l=i+Math.sin(n)*(s+a)+a/2;this.ctx.fillStyle="black",this.ctx.fillText(o,h,l)}}class l{constructor(t){this.ctx=t}}class c extends l{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{options:s,name:n}=e,{boxFrame:o,textCoords:r}=t,a=o.y+o.h/2,h={x:o.x,y:a},l={x:o.x+o.w,y:a};this.setLineStyle(s),this.drawSingleLine(h,l),i.fillStyle="black",i.fillText(n,r.x,r.y,r.maxW)}drawSingleLine(t,e){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),this.ctx.setLineDash([])}setLineStyle(t){const{ctx:e}=this;let{dash:i}=t;const{color:s,dashWidth:n}=t;e.lineWidth=null!=n?n:1,"string"==typeof i&&(i=this.dashStringToArray(i).map((t=>t*e.lineWidth))),e.setLineDash(null!=i?i:[]),e.strokeStyle=null!=s?s:"black"}dashStringToArray(t){switch(t){default:return[];case"p":return[1,1];case"ls":return[10,5];case"lls":return[20,5];case"lp":return[15,3,3,3];case"lppp":return[20,3,3,3,3,3,3,3];case"lpsp":return[8,2,2]}}}class u extends l{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{name:s}=e,n=e.options,{boxFrame:o,textCoords:r}=t;a(i,n.shape,n.color),i.strokeStyle="black",i.lineWidth=3,i.fillRect(o.x,o.y,o.w,o.h),i.strokeRect(o.x,o.y,o.w,o.h),i.fillStyle="black",i.fillText(s,r.x,r.y,r.maxW)}}class x extends l{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{options:s,name:n}=e,{boxFrame:o,textCoords:r}=t;this.performDrawPoint({x:o.x+o.w/2,y:o.y+o.h/2},s),i.fillText(n,r.x,r.y,r.maxW)}performDrawPoint(t,e){const{pointShape:i,pointSize:s,color:n}=e;if(null==i)return;const o={e:t.x-s/2,f:t.y-s/2};let a;try{a=(0,r.draw)(i,"rgba(0,0,0,0)",n,2*s)}catch(t){return void console.warn(`${i} is invalid shape. See documentation.`)}a.setTransform(o),this.ctx.fillStyle=a,this.ctx.fillRect(o.e,o.f,s,s),this.ctx.fillStyle="black"}}class d{constructor(t,e){this.CHART_BORDER_COLOR="#202020",this.DIVIDER_LINE_COLOR="#484848",this.HORIZONTAL_LINE_COLOR="#808080",this.TITLE_AREA_MULTIPIER=.1,this.LEGEND_AREA_MULTIPIER=.1,this.LEGEND_PADDING_MULTIPIER=1,this.SERIE_LEGEND_PER_LEVEL=5,this.SERIE_PADDING_MULTIPIER=.6,this.LABELS_AREA_MULTIPIER=.05,this.MOST_TICKS=10,this.ctx=t,this.plot=e,this.lineTools=new c(t),this.patternTools=new u(t),this.pointTools=new x(t)}prepareChartForDrawing(t,e){const{ctx:i}=this,{width:s,height:n}=i.canvas;this.ctx.clearRect(0,0,s,n);const o=[];let r=this.getFrame(0,0,s,n,"content");if(this.strokeFrame(r,this.DIVIDER_LINE_COLOR,5),t.showTitle&&t.title){const e=this.getTitleFrame(r);o.push(e),this.drawTitle(t.title,e),r=this.cutFrames(r,e)}if(t.showLegend){const t=this.getLegendFrame(r);o.push(t),this.drawLegend(e,t),r=this.cutFrames(r,t)}if(t.showLabels){const t=this.getLabelsFrame(r);o.push(t),r=this.cutFrames(r,t)}return o.push(r),o}getTitleFrame(t){const{x:e,y:i,w:s,h:n}=t,o=n*this.TITLE_AREA_MULTIPIER;return this.getFrame(e,i,s,o,"title")}getLegendFrame(t){const{x:e,y:i,w:s,h:n}=t,o=n*this.LEGEND_AREA_MULTIPIER;return this.getFrame(e,i+n-o,s,o,"legend")}getLabelsFrame(t){const{x:e,y:i,w:s,h:n}=t,o=n*this.LABELS_AREA_MULTIPIER;return this.getFrame(e,i+n-o,s,o,"labels")}getFrame(t,e,i,s,n){return{id:n,x:t,y:e,w:i,h:s}}cutFrames(t,e){const i=t.h===e.h?t.h:t.h-e.h,s=t.y===e.y?t.y+e.h:t.y,{x:n,w:o,id:r}=t;return{x:n,y:s,w:o,h:i,id:r}}strokeFrame(t,e,i){this.ctx.strokeStyle=e,this.ctx.lineWidth=null!=i?i:1,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black"}measureTickTextMaxWidth(t,e,i){let s=0;for(let n=1;n<=t+1;n++){const o=this.ctx.measureText(String(i+(t+1-n)*e)).width;o>s&&(s=o)}return s}drawGridHorizontalLines(t,e=0,i=0){const{ctx:s}=this,{tickCount:n,tickHeight:o}=function(t,e=0,i=0){const s=Math.ceil(i-e),n=s/t,o=Math.pow(10,Math.floor(Math.log10(n))),r=n/o,a=(r<10?[1,1.5,2,3,5,7,10].find((t=>t>r)):10)*o;return{tickHeight:a,tickCount:Math.ceil(s/a)}}(this.MOST_TICKS,e,i),r=t.h/(n+1);s.lineWidth=1,s.strokeStyle=this.HORIZONTAL_LINE_COLOR;const a=this.measureTickTextMaxWidth(n,o,e);for(let i=1;i<=n+1;i++){const h=t.y+r*i,l=String(e+(n+1-i)*o),{width:c}=s.measureText(l);s.fillText(l,t.x+(a-c),h),s.beginPath(),s.moveTo(t.x+a,h),s.lineTo(t.x+t.w,h),s.stroke(),s.closePath()}return{tickCount:n,tickHeight:o,tickFrame:{x:t.x+a,y:t.y,w:t.w-a,h:t.h}}}drawTitle(t,e){const{ctx:i}=this,{x:s,y:n,w:o,h:r}=e;i.font=`${Math.floor(r/2)}px sans-serif`;const a=i.measureText(t),h=s+o/2-a.width/2,l=n+r/2+a.actualBoundingBoxAscent/2;i.fillText(t,h,l,o),this.strokeFrame(e,this.DIVIDER_LINE_COLOR,1)}drawLegend(t,e){this.strokeFrame(e,this.DIVIDER_LINE_COLOR,1);const i=Math.ceil(t.length/this.SERIE_LEGEND_PER_LEVEL),s=e.w/Math.min(t.length,this.SERIE_LEGEND_PER_LEVEL),n=e.h/i;for(let i=0;i<t.length;i++)this.drawSingleSerieLegend({x:e.x+s*(i%this.SERIE_LEGEND_PER_LEVEL),y:e.y+n*Math.floor(i/this.SERIE_LEGEND_PER_LEVEL),w:s,h:n},t[i])}drawSingleSerieLegend(t,e){const i=this.prepareSingleSerieLegend(t,e);this.performDrawSingleSerieLegend(i,e)}prepareSingleSerieLegend(t,e){const{ctx:i}=this,{name:s}=e,n=Math.min(t.w,t.h),o=n*this.SERIE_PADDING_MULTIPIER,r=(n-o)/2;i.font=`${Math.floor(n/3)}px sans-serif`;const{width:a,actualBoundingBoxAscent:h}=i.measureText(s),l=n+a-r,c={x:t.x+(t.w-l)/2,y:t.y+r,w:o,h:o};return{boxFrame:c,textCoords:{x:c.x+o+r,y:c.y+o/2+h/2,maxW:l-c.w-r}}}performDrawSingleSerieLegend(t,e){(this.plot instanceof p||this.plot instanceof h)&&this.patternTools.performDrawSingleSerieLegend(t,e),this.plot instanceof n&&this.pointTools.performDrawSingleSerieLegend(t,e),this.plot instanceof o&&this.lineTools.performDrawSingleSerieLegend(t,e)}}class p extends e{constructor(){super(...arguments),this.COL_SPACE_SIZE=.75,this.VALUE_BOTTOM_PADDING=4}drawBars(t,e,i){null==this.plotKit&&(this.plotKit=new d(this.ctx,this));const s=this.plotKit.prepareChartForDrawing(i,e);let n=s.find((t=>"content"===t.id));const o=s.find((t=>"labels"===t.id)),r=Math.max(...e.map((t=>Math.max(...t.values)))),{tickCount:a,tickHeight:h,tickFrame:l}=this.plotKit.drawGridHorizontalLines(n,0,r);n=l;const c=n.h/((a+1)*h),u=e.length,x=t.length,p=n.w/x,_=p*(1-this.COL_SPACE_SIZE),f=p-2*_,g=f/u;this.ctx.fillStyle="black";const w=n.y+n.h,v=Math.floor(.5*g);this.ctx.font=`${v}px sans-serif`;for(let s=0;s<x;s++){const r=n.x+s*p+_;if(i.showLabels){this.ctx.font=`${o.h}px sans-serif`,this.ctx.fillStyle="black";const{width:e}=this.ctx.measureText(t[s]),i=r+f/2-e/2,a=n.y+n.h+.8*o.h;this.ctx.fillText(t[s],i,a,p),this.ctx.font=`${v}px sans-serif`}for(let t=0;t<u;t++){const i=r+t*g,n=e[t].values[s]*c,o=w-n;this.drawBar(i,o,g,n,e[t].options,e[t].values[s])}}}drawBar(t,e,i,s,n,o){this.fillBar(t,e,i,s,n);const{showValue:r,borderWidth:a}=n;a&&this.strokeBar(t,e,i,s,a),r&&this.addBarValue(t,e,i,o)}fillBar(t,e,i,s,n){const{color:o,shape:r}=n;a(this.ctx,r,o),this.ctx.fillRect(t,e,i,s)}strokeBar(t,e,i,s,n){this.ctx.lineWidth=s?n:1,this.ctx.beginPath(),this.ctx.moveTo(t,e+s),this.ctx.lineTo(t,e),this.ctx.lineTo(t+i,e),this.ctx.lineTo(t+i,e+s),this.ctx.strokeStyle="black",this.ctx.stroke()}addBarValue(t,e,i,s){this.ctx.fillStyle="black";const n=String(s),o=t+i/2-this.ctx.measureText(n).width/2;this.ctx.fillText(n,o,e-this.VALUE_BOTTOM_PADDING,i)}}class _{constructor(t){let e=t;if("string"==typeof e&&(e=document.getElementById(e.replace("/^#/",""))),e instanceof HTMLCanvasElement)this.context=e.getContext("2d");else{if(!(e instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=e}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1,showLabels:!0},this.seriesData=[]}setChartOptions(e){t.mergeRight(e,this.chartOptions)}setSerieOptions(e,i){i?i.forEach((i=>{const s=this.seriesData.find((t=>t.name==i));s?t.mergeRight(e,s.options):console.warn(`Serie with name ${i} not found.`)})):this.seriesData.forEach((i=>t.mergeRight(e,i.options)))}}class f extends _{set serieNames(t){const e=Math.min(t.length,this.seriesData.length);for(let i=0;i<e;i++)this.seriesData[i].name=t[i]}}class g extends f{constructor(t){super(t),this.plot=new p(this.context)}set X(t){this.dataLabels=t}set Y(e){const{length:i}=this.dataLabels;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=e.map((e=>t.sliceOrFill(e,i)));this.seriesData=s.map(((t,e)=>this.getDefaultSerieObject(t,e)))}getDefaultSerieObject(t,e){return{values:t,name:`serie${e}`,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,borderWidth:0,shape:void 0}}}draw(){this.plot.drawBars(this.dataLabels,this.seriesData,this.chartOptions)}}class w extends _{constructor(t){super(t),this.plot=new h(this.context)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(e){const{length:i}=this.seriesData;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=t.sliceOrFill(e,i);this.seriesData.map(((t,e)=>{t.value=s[e]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,borderWidth:0,shape:void 0}}}draw(){this.plot.drawPie(this.seriesData,this.chartOptions)}}class v extends f{constructor(t,e){super(t),e||(this.plot=new n(this.context))}set points(t){const e=this.seriesData.filter((t=>t.name.startsWith("serie"))).length;this.seriesData.push(this.getDefaultSerieObject(t,e+1))}set X(t){this.seriesData=t.map(((t,e)=>this.getDefaultSerieObject(t.map((t=>({x:t,y:0}))),e)))}set Y(t){const{length:e}=this.seriesData;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const i=Math.min(t.length,e);for(let e=0;e<i;e++){const i=Math.min(t[e].length,this.seriesData[e].points.length);for(let s=0;s<i;s++)this.seriesData[e].points[s].y=t[e][s]}}getDefaultSerieObject(t,e){return{name:`serie${e}`,points:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,pointShape:void 0,pointSize:0}}}draw(){this.seriesData.forEach((t=>t.points.sort(((t,e)=>t.x-e.x)))),this.plot.draw(this.seriesData,this.chartOptions)}}class y extends v{constructor(t){super(t,!0),this.plot=new o(this.context)}draw(){this.seriesData.forEach((t=>t.points.sort(((t,e)=>t.x-e.x)))),this.plot.draw(this.seriesData,this.chartOptions)}getDefaultSerieObject(t,e){return{name:`serie${e}`,points:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showValue:!1,showOnLegend:!1,pointShape:void 0,pointSize:0,dash:[],dashWidth:1}}}}class m extends g{constructor(t){super(t)}draw(){throw Error("Not implemented yet")}}class P extends v{constructor(t){super(t)}draw(){throw this.seriesData.forEach((t=>t.points.sort(((t,e)=>e.x-t.x)))),Error("Not implemented yet")}}function T(t,e){switch(t.toLowerCase().trim()){case"pie":return new w(e);case"bar":return new g(e);case"histogram":return new m(e);case"points":return new v(e);case"line":return new y(e);case"area":return new P(e);default:throw new Error(`${t} chart is not (yet) defined.`)}}})();var n=s.Z;export{n as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,