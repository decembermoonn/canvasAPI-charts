var t={744:function(t){t.exports=function(){var t="rgba(100, 100, 100, 0.7)",e="rgba(255, 255, 255, 0.8)",i="round",s=(function(){function t(t){this.value=t}function e(e){var i,s;function n(i,s){try{var r=e[i](s),a=r.value;a instanceof t?Promise.resolve(a.value).then((function(t){n("next",t)}),(function(t){n("throw",t)})):o(r.done?"return":"normal",r.value)}catch(t){o("throw",t)}}function o(t,e){switch(t){case"return":i.resolve({value:e,done:!0});break;case"throw":i.reject(e);break;default:i.resolve({value:e,done:!1})}(i=i.next)?n(i.key,i.arg):s=null}this._invoke=function(t,e){return new Promise((function(o,r){var a={key:t,arg:e,resolve:o,reject:r,next:null};s?s=s.next=a:(i=s=a,n(t,e))}))},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),n=function(){function t(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,i,s){return i&&t(e.prototype,i),s&&t(e,s),e}}(),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},h=function(){function o(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;return s(this,o),this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.width=i,this._canvas.height=i,this._context.fillStyle=n,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._size=i,this._patternColor=r,this}return n(o,[{key:"setStrokeProps",value:function(){this._context.strokeStyle=this._patternColor,this._context.lineWidth=this._size/10,this._context.lineJoin=i,this._context.lineCap=i}},{key:"setFillProps",value:function(){this._context.fillStyle=this._patternColor}}]),o}(),l=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawPlus(),this.drawPlus(t,t),this._context.stroke(),this._canvas}},{key:"drawPlus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,0+e),this._context.lineTo(n+t,s+e),this._context.moveTo(0+t,n+e),this._context.lineTo(s+t,n+e),this._context.closePath()}}]),e}(h),c=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawCross(),this.drawCross(t,t),this._context.stroke(),this._canvas}},{key:"drawCross",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,s=2;this._context.moveTo(t+s,e+s),this._context.lineTo(i-s+t,i-s+e),this._context.moveTo(t+s,i-s+e),this._context.lineTo(i-s+t,e+s),this._context.closePath()}}]),e}(h),u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDash(),this.drawDash(t,t),this._context.stroke(),this._canvas}},{key:"drawDash",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,s=2;this._context.moveTo(t+s,e+s),this._context.lineTo(i-s+t,i-s+e),this._context.closePath()}}]),e}(h),p=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new c).drawCross.call(this),(new u).drawDash.call(this,t,t),this._context.stroke(),this._canvas}}]),e}(h),x=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDot(),this.drawDot(t,t),this._context.fill(),this._canvas}},{key:"drawDot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._size/10,s=this._size/4,n=s+t,o=s+e;this._context.moveTo(n+s,o),this._context.arc(n,o,i,0,2*Math.PI),this._context.closePath()}}]),e}(h),d=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new u).drawDash.call(this,t,t),this._context.closePath(),this._context.stroke(),this.setFillProps(),(new x).drawDot.call(this),this._context.fill(),this._canvas}}]),e}(h),f=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setFillProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.fill(),this._canvas}}]),e}(x),_=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setStrokeProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.stroke(),this._canvas}}]),e}(x),g=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawLine(),this.drawLine(t,t),this._context.stroke(),this._canvas}},{key:"drawLine",value:function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=this._size/4;this._context.moveTo(0,e+t),this._context.lineTo(this._size,e+t),this._context.closePath()}}]),e}(h),w=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),g.prototype.drawTile.call(this),this._canvas}}]),e}(g),y=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawWeave(0,0),this._context.stroke(),this._canvas}},{key:"drawWeave",value:function(t,e){var i=this._size,s=i/2;this._context.moveTo(t+1,e+1),this._context.lineTo(s-1,s-1),this._context.moveTo(s+1,i-1),this._context.lineTo(i-1,s+1),this._context.closePath()}}]),e}(h),v=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawZigzag(),this.drawZigzag(this._size/2),this._context.stroke(),this._canvas}},{key:"drawZigzag",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this._size,i=e/4,s=e/2,n=e/10;this._context.moveTo(0,n+t),this._context.lineTo(i,s-n+t),this._context.lineTo(s,n+t),this._context.lineTo(e-i,s-n+t),this._context.lineTo(e,n+t)}}]),e}(h),m=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),v.prototype.drawTile.call(this),this._canvas}}]),e}(v),P=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiagonalLine(),this.drawDiagonalLine(t,t),this._context.stroke(),this._canvas}},{key:"drawDiagonalLine",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=1;this._context.moveTo(s-n-t,-1*n+e),this._context.lineTo(i+1-t,s+1+e),this._context.closePath()}}]),e}(h),T=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),P.prototype.drawTile.call(this),this._canvas}}]),e}(P),b=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawSquare(),this.drawSquare(t,t),this._context.fill(),this._canvas}},{key:"drawSquare",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/20;this._context.fillRect(t+n,e+n,s-2*n,s-2*n),this._context.closePath()}}]),e}(h),S=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawBox(),this.drawBox(t,t),this._context.stroke(),this._canvas}},{key:"drawBox",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/20;this._context.strokeRect(t+n,e+n,s-4*n,s-4*n),this._context.closePath()}}]),e}(h),O=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawTriangle(),this.drawTriangle(t,t),this._context.fill(),this._canvas}},{key:"drawTriangle",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,e),this._context.lineTo(s+t,s+e),this._context.lineTo(t,s+e),this._context.closePath()}}]),e}(h),D=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size;return this._context.translate(t,t),this._context.rotate(180*Math.PI/180),O.prototype.drawTile.call(this),this._canvas}}]),e}(O),k=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.fill(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,e),this._context.lineTo(s+t,n+e),this._context.lineTo(n+t,s+e),this._context.lineTo(t,n+e),this._context.closePath()}}]),e}(h),E=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.stroke(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2-1,n=i/4;this._context.moveTo(n+t,e+1),this._context.lineTo(s+t,n+e),this._context.lineTo(n+t,s+e),this._context.lineTo(t+1,n+e),this._context.closePath()}}]),e}(k),L={plus:l,cross:c,dash:u,"cross-dash":p,dot:x,"dot-dash":d,disc:f,ring:_,line:g,"line-vertical":w,weave:y,zigzag:v,"zigzag-vertical":m,diagonal:P,"diagonal-right-left":T,square:b,box:S,triangle:O,"triangle-inverted":D,diamond:k,"diamond-box":E},F=[];function I(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=Object.keys(L);t.forEach((function(t){e.splice(e.indexOf(t),1)}));var i=Math.floor(Math.random()*e.length);return e[i]}function M(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"square",e=arguments[1],i=arguments[2],s=arguments[3],n=document.createElement("canvas"),o=n.getContext("2d"),r=2*s,a=new(0,F[t])(s,e,i),h=o.createPattern(a.drawTile(),"repeat");return n.width=r,n.height=r,h.shapeType=t,h}return o(F,L,{circle:L.disc,"triangle-vertical":L["triangle-inverted"],"line-horizontal":L.line,"line-diagonal-lr":L.diagonal,"line-diagonal-rl":L["diagonal-right-left"],"zigzag-horizontal":L.zigzag,"diamond-outline":L["diamond-box"]}),{draw:M,generate:function(t){var e=void 0,i=void 0;return t.map((function(t,s,n){var o=void 0;return 0===s?(o=I(),e=i=o):s===n.length-1?o=I([i,e]):(o=I([i]),i=o),M(o,t)}))}}}()}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var s={};(()=>{i.d(s,{Z:()=>v});const t=class{static sliceOrFill(t,e,i){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=i?i:0);return t}static mergeRight(t,e){const i=Object.keys(e);Object.entries(t).forEach((t=>{const s=t[0];if(i.includes(s)){const i=t[1];e[s]=i}}))}static checkIfArrayOfArrays(t){return Array.isArray(t[0])}};function e(t,e=0,i=0){const s=Math.ceil(i-e),n=s/t,o=Math.pow(10,Math.floor(Math.log10(n))),r=n/o,a=(r<10?[1,1.5,2,3,5,7,10].find((t=>t>r)):10)*o;return{tickHeight:a,tickCount:Math.ceil(s/a)}}function n(t,e){return parseFloat(t.toFixed(e))}class o{constructor(t){this.ctx=t}}class r extends o{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{options:s,name:n}=e,{boxFrame:o,textCoords:r}=t,a=o.y+o.h/2,h={x:o.x,y:a},l={x:o.x+o.w,y:a};this.setLineStyle(s),this.drawSingleLine(h,l),i.fillStyle="black",i.fillText(n,r.x,r.y,r.maxW)}drawSingleLine(t,e){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),this.ctx.setLineDash([])}setLineStyle(t){const{ctx:e}=this;let{dash:i}=t;const{color:s,dashWidth:n}=t;e.lineWidth=null!=n?n:1,"string"==typeof i&&(i=this.dashStringToArray(i).map((t=>t*e.lineWidth))),e.setLineDash(null!=i?i:[]),e.strokeStyle=null!=s?s:"black"}dashStringToArray(t){switch(t){default:return[];case"p":return[1,1];case"ls":return[10,5];case"lls":return[20,5];case"lp":return[15,3,3,3];case"lppp":return[20,3,3,3,3,3,3,3];case"lpsp":return[8,2,2]}}}var a=i(744);class h extends o{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{name:s}=e,n=e.options,{boxFrame:o,textCoords:r}=t;this.applyShapeOrColor(i,n.shape,n.color),i.strokeStyle="black",i.lineWidth=3,i.fillRect(o.x,o.y,o.w,o.h),i.strokeRect(o.x,o.y,o.w,o.h),i.fillStyle="black",i.fillText(s,r.x,r.y,r.maxW)}applyShapeOrColor(t,e,i){if(t.fillStyle=i,null!=e)try{t.fillStyle=(0,a.draw)(e,i,"black")}catch(t){console.warn(`${e} is invalid shape. See documentation.`)}}}class l extends o{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{options:s,name:n}=e,{boxFrame:o,textCoords:r}=t;this.performDrawPoint({x:o.x+o.w/2,y:o.y+o.h/2},s),i.fillText(n,r.x,r.y,r.maxW)}performDrawPoint(t,e){const{pointShape:i,pointSize:s,color:n}=e;if(null==i)return;const o={e:t.x-s/2,f:t.y-s/2};let r;try{r=(0,a.draw)(i,"rgba(0,0,0,0)",n,2*s)}catch(t){return void console.warn(`${i} is invalid shape. See documentation.`)}r.setTransform(o),this.ctx.fillStyle=r,this.ctx.fillRect(o.e,o.f,s,s),this.ctx.fillStyle="black"}}class c{constructor(t,e){this.CHART_BORDER_COLOR="#202020",this.DIVIDER_LINE_COLOR="#484848",this.HORIZONTAL_LINE_COLOR="#808080",this.TITLE_AREA_MULTIPIER=.1,this.LEGEND_AREA_MULTIPIER=.1,this.LEGEND_PADDING_MULTIPIER=1,this.SERIE_LEGEND_PER_LEVEL=5,this.SERIE_PADDING_MULTIPIER=.15,this.LABELS_AREA_MULTIPIER=.05,this.MOST_TICKS=10,this.ctx=t,this.plotType=e,this.lineTools=new r(t),this.patternTools=new h(t),this.pointTools=new l(t)}prepareChartForDrawing(t,e){const{ctx:i}=this,{width:s,height:n}=i.canvas;this.ctx.clearRect(0,0,s,n);const o=[];let r=this.getFrame(0,0,s,n,"content");if(this.strokeFrame(r,this.DIVIDER_LINE_COLOR,5),t.showTitle&&t.title){const e=this.getTitleFrame(r);o.push(e),this.drawTitle(t.title,e),r=this.cutFrames(r,e)}if(t.showLegend){const t=this.getLegendFrame(r,e.length);o.push(t),this.drawLegend(e,t),r=this.cutFrames(r,t)}return o.push(r),o}getTitleFrame(t){const{x:e,y:i,w:s,h:n}=t,o=n*this.TITLE_AREA_MULTIPIER;return this.getFrame(e,i,s,o,"title")}getLegendFrame(t,e){const{x:i,y:s,w:n,h:o}=t,r=o*(.1+(e>=10?Math.sqrt((e-10)/10):0)*this.LEGEND_AREA_MULTIPIER);return this.getFrame(i,s+o-r,n,r,"legend")}getBasicLabelsFrame(t){const{x:e,y:i,w:s,h:n}=t,o=n*this.LABELS_AREA_MULTIPIER;return this.getFrame(e,i+n-o,s,o,"labels")}getFrame(t,e,i,s,n){return{id:n,x:t,y:e,w:i,h:s}}cutFrames(t,e){const i=t.h===e.h?t.h:t.h-e.h,s=t.y===e.y?t.y+e.h:t.y,{x:n,w:o,id:r}=t;return{x:n,y:s,w:o,h:i,id:r}}getWidthOfValuesPane(t,e,i){const{tickCount:s,tickHeight:n}=t;return this.ctx.font=`${i}px sans-serif`,this.measureTickTextMaxWidth(s,n,e)}getLabelsFrameFilled(t,e,i,s,n){const o=Math.max(...i.map((t=>t.length))),r=i.find((t=>t.length===o));let a=t.h*this.LABELS_AREA_MULTIPIER;this.ctx.font=`${a}px sans-serif`;let h=this.ctx.measureText(r),l=1;for(;l<4&&h.width>s;l++){const t=Math.max(a-l,5);this.ctx.font=`${t}px sans-serif`,h=this.ctx.measureText(r)}let c=h.width;this.ctx.save();const u=4===l;u&&(a=1.1*h.width,c=h.actualBoundingBoxAscent);const p=(s-c)/2,x=(a-h.actualBoundingBoxAscent)/2,d=t.x+e+(u?2*p:p),f=t.y+t.h-(u?.1*a*.5:x);this.ctx.translate(d,f),u&&this.ctx.rotate(-Math.PI/2);for(let t=0;t<n;t++){this.ctx.fillStyle="black",this.ctx.fillText(i[t],0,0);const e=u?[0,s]:[s,0];this.ctx.translate(e[0],e[1])}this.ctx.restore();const _={id:"content",x:t.x,y:t.y,w:t.w,h:t.h-a};return[_,{id:"labels",x:t.x,y:_.y+_.h,w:_.w,h:a}]}strokeFrame(t,e,i){this.ctx.strokeStyle=e,this.ctx.lineWidth=null!=i?i:1,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black"}measureTickTextMaxWidth(t,e,i){let s=0;for(let o=1;o<=t+1;o++){const r=this.ctx.measureText(String(n(i+(t+1-o)*e,4))).width;r>s&&(s=r)}return s}drawGridHorizontalLines(t,e,i,s){const{ctx:o}=this,{tickCount:r,tickHeight:a}=e,h=t.h/(r+1);o.lineWidth=1,o.strokeStyle=this.HORIZONTAL_LINE_COLOR,o.font=`${s}px sans-serif`;const l=this.measureTickTextMaxWidth(r,a,i);for(let e=1;e<=r+1;e++){const s=t.y+h*e,c=String(n(i+(r+1-e)*a,4)),{width:u}=o.measureText(c);o.fillText(c,t.x+(l-u),s),o.beginPath(),o.moveTo(t.x+l,s),o.lineTo(t.x+t.w,s),o.stroke(),o.closePath()}return{x:t.x+l,y:t.y,w:t.w-l,h:t.h}}drawTitle(t,e){const{ctx:i}=this,{x:s,y:n,w:o,h:r}=e;i.font=`${Math.floor(r/2)}px sans-serif`;let a=i.measureText(t),h=a.width;h>o&&(i.font=`${Math.floor(r/2*(o/h))}px sans-serif`,a=i.measureText(t),h=a.width);const l=s+o/2-h/2,c=n+r/2+a.actualBoundingBoxAscent/2;i.fillText(t,l,c,o),this.strokeFrame(e,this.DIVIDER_LINE_COLOR,1)}drawLegend(t,e){this.strokeFrame(e,this.DIVIDER_LINE_COLOR,1);const i=Math.ceil(t.length/this.SERIE_LEGEND_PER_LEVEL),s=e.w/Math.min(t.length,this.SERIE_LEGEND_PER_LEVEL),n=e.h/i;for(let i=0;i<t.length;i++)this.drawSingleSerieLegend({x:e.x+s*(i%this.SERIE_LEGEND_PER_LEVEL),y:e.y+n*Math.floor(i/this.SERIE_LEGEND_PER_LEVEL),w:s,h:n},t[i],t.length)}drawSingleSerieLegend(t,e,i){const s=this.prepareSingleSerieLegend(t,e,i);this.performDrawSingleSerieLegend(s,e)}prepareSingleSerieLegend(t,e,i){const{ctx:s}=this,{name:n}=e,o=Math.min(t.w,t.h),r=o*this.SERIE_PADDING_MULTIPIER,a=o-2*r,h=i>this.SERIE_LEGEND_PER_LEVEL,l=h?2:3;s.font=`${Math.floor(o/l)}px sans-serif`;const{width:c,actualBoundingBoxAscent:u}=s.measureText(n),p=c>t.w-o,x=c+o,d={x:t.x+(p||h?r:(t.w-x)/2),y:t.y+r,w:a,h:a};return{boxFrame:d,textCoords:{x:d.x+a+r,y:d.y+a/2+u/2,maxW:p||h?t.w-o:t.w-(t.w-x)/2-o}}}performDrawSingleSerieLegend(t,e){["bar","pie","area"].includes(this.plotType)&&this.patternTools.performDrawSingleSerieLegend(t,e),"points"===this.plotType&&this.pointTools.performDrawSingleSerieLegend(t,e),"line"===this.plotType&&this.lineTools.performDrawSingleSerieLegend(t,e)}}class u{constructor(t,e){this.ctx=t,this.plotKit=new c(t,e)}}class p extends u{constructor(){super(...arguments),this.PIXEL_PADDING=10}draw(t){const i=t.series,s=t.chartOptions;let n=this.plotKit.prepareChartForDrawing(s,i).find((t=>"content"===t.id));const o=this.plotKit.getBasicLabelsFrame(n);n=this.plotKit.cutFrames(n,o);const r=this.getMinMaxForSeries(i,"x"),a=this.getMinMaxForSeries(i,"y"),h=e(10,a.min,a.max),l=h.tickCount;n=this.plotKit.drawGridHorizontalLines(n,h,a.min,18);const c=n.h/(l+1),u={beginningInPixels:n.x+this.PIXEL_PADDING,widthOrHeightInPixels:n.w-2*this.PIXEL_PADDING,minValueFromSeries:r.min,maxValueFromSeries:r.max},p={beginningInPixels:n.y+c,widthOrHeightInPixels:n.h-c,minValueFromSeries:a.min,maxValueFromSeries:a.max},x=this.xGetValueToPixelMapperFunc(u),d=this.yGetValueToPixelMapperFunc(p),f={series:i,labelFrame:o,yMinForSeries:a.min,mappers:{xFunc:x,yFunc:d}};this.performDrawing(f)}performDrawing(t){const{series:e,mappers:i,labelFrame:s}=t;e.forEach((t=>{t.points.forEach((e=>{const n=this.mapSpacePointToPixelPoint(e,i.xFunc,i.yFunc);this.plotKit.pointTools.performDrawPoint(n,t.options),t.options.showValue&&this.drawValueForPoint(e.x,n.x,s)}))}))}getMinMaxForSeries(t,e){if(t.length){const i=t.findIndex((t=>t.points.length));if(i>=0){const s=t[i].points[0][e],n={x:s,y:s},o=this.minMaxReduceFuncFactory(e),r=t.map((t=>t.points.reduce(o,n))),a=r.reduce(o,r[0]);return{min:a.x,max:a.y}}}return{min:0,max:0}}minMaxReduceFuncFactory(t){return(e,i)=>({x:e.x>i[t]?i[t]:e.x,y:e.y<i[t]?i[t]:e.y})}xGetValueToPixelMapperFunc(t){return e=>t.beginningInPixels+t.widthOrHeightInPixels*((e-t.minValueFromSeries)/(t.maxValueFromSeries-t.minValueFromSeries))}yGetValueToPixelMapperFunc(t){return e=>t.beginningInPixels+t.widthOrHeightInPixels*(1-(e-t.minValueFromSeries)/(t.maxValueFromSeries-t.minValueFromSeries))}mapSpacePointToPixelPoint(t,e,i){return{x:e(t.x),y:i(t.y)}}drawValueForPoint(t,e,i){const s=String(t),{width:n,actualBoundingBoxAscent:o}=this.ctx.measureText(s);this.ctx.fillStyle="black",this.ctx.fillText(String(t),e-n/2,i.y+i.h/2+o/2)}}class x extends p{performDrawing(t){const{series:e,mappers:i,labelFrame:s}=t;for(let t=0;t<e.length;t++){const n=e[t].points.length;if(n<2)continue;const o=new Path2D,{points:r,options:a}=e[t],h=this.mapSpacePointToPixelPoint(r[0],i.xFunc,i.yFunc);o.moveTo(h.x,h.y),this.drawValueForPoint(r[0].x,h.x,s),this.plotKit.pointTools.performDrawPoint(h,a);for(let t=1;t<n;t++){const e=this.mapSpacePointToPixelPoint(r[t],i.xFunc,i.yFunc);o.lineTo(e.x,e.y),this.drawValueForPoint(r[t].x,e.x,s),this.plotKit.pointTools.performDrawPoint(e,a)}this.plotKit.lineTools.setLineStyle(a),this.ctx.stroke(o)}this.ctx.setLineDash([])}}const d={pie:class extends u{constructor(){super(...arguments),this.RADIUS_DIVIDER=2.5}draw(t){const e=t.series,i=t.chartOptions,{ctx:s}=this,n=this.plotKit.prepareChartForDrawing(i,e).find((t=>"content"===t.id)),o=this.mapSeriesToPiePartData(e,i.precentageValues),r=Math.min(n.w,n.h)/this.RADIUS_DIVIDER,a={x:n.x+n.w/2,y:n.y+n.h/2};let h=0;s.strokeStyle="black",s.font=`${Math.floor(r/5)}px sans-serif`,o.forEach((t=>{this.makePiePartPath(a.x,a.y,r,h,h+t.radians),this.plotKit.patternTools.applyShapeOrColor(s,t.shape,t.color),s.fill(),"number"==typeof t.borderWidth&&t.borderWidth>0&&this.strokeBorder(t.borderWidth),t.showValue&&this.addPieValue(t.value,a.x,a.y,r,h+t.radians/2,n,i.precentageValues),h+=t.radians}))}mapSeriesToPiePartData(t,e=!1){const i=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({radians:2*t.value*Math.PI/i,color:t.options.color,borderWidth:t.options.borderWidth,shape:t.options.shape,showValue:t.options.showValue,value:e?t.value/i:t.value})))}makePiePartPath(t,e,i,s,n){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.arc(t,e,i,s,n),this.ctx.lineTo(t,e)}strokeBorder(t){this.ctx.lineWidth=t,this.ctx.stroke()}addPieValue(t,e,i,s,n,o,r){const a=r?`${(100*t).toPrecision(4)}%`:`${t}`,{width:h,actualBoundingBoxAscent:l}=this.ctx.measureText(a),c=o.w/2-s,u=e+Math.cos(n)*s-(n>Math.PI/2&&n<1.5*Math.PI?Math.min(c,h):0),p=i+Math.sin(n)*(s+l)+l/2;this.ctx.fillStyle="black",this.ctx.fillText(a,u,p,c)}},bar:class extends u{constructor(){super(...arguments),this.COL_SPACE_SIZE=.75,this.VALUE_BOTTOM_PADDING=4}draw(t){const i=t.series,s=t.chartOptions,n=t.dataLabels,o=i.length,r=n.length;let a=this.plotKit.prepareChartForDrawing(s,i),h=a.find((t=>"content"===t.id));const l=Math.max(...i.map((t=>Math.max(...t.values)))),c=e(this.plotKit.MOST_TICKS,0,l),u=this.plotKit.getWidthOfValuesPane(c,0,18),p=(h.w-u)/r,x=p*(1-this.COL_SPACE_SIZE),d=(p-2*x)/o;if(s.showLabels){const t=this.plotKit.getLabelsFrameFilled(h,u,n,p,r);a=a.filter((t=>"content"!==t.id)),a.push(...t)}const{tickCount:f,tickHeight:_}=c;h=a.find((t=>"content"===t.id)),h=this.plotKit.drawGridHorizontalLines(h,c,0,18);const g=h.h/((f+1)*_);this.ctx.fillStyle="black";const w=h.y+h.h,y=Math.floor(.5*d);this.ctx.font=`${y}px sans-serif`;for(let t=0;t<r;t++){const e=h.x+t*p+x;for(let s=0;s<o;s++){const n=e+s*d,o=i[s].values[t]*g,r=w-o;this.drawBar(n,r,d,o,i[s].options,i[s].values[t])}}}drawBar(t,e,i,s,n,o){this.fillBar(t,e,i,s,n);const{showValue:r,borderWidth:a}=n;a&&this.strokeBar(t,e,i,s,a),r&&this.addBarValue(t,e,i,o)}fillBar(t,e,i,s,n){const{color:o,shape:r}=n;this.plotKit.patternTools.applyShapeOrColor(this.ctx,r,o),this.ctx.fillRect(t,e,i,s)}strokeBar(t,e,i,s,n){this.ctx.lineWidth=s?n:1,this.ctx.beginPath(),this.ctx.moveTo(t,e+s),this.ctx.lineTo(t,e),this.ctx.lineTo(t+i,e),this.ctx.lineTo(t+i,e+s),this.ctx.strokeStyle="black",this.ctx.stroke()}addBarValue(t,e,i,s){this.ctx.fillStyle="black";const n=String(s),o=t+i/2-this.ctx.measureText(n).width/2;this.ctx.fillText(n,o,e-this.VALUE_BOTTOM_PADDING,i)}},points:p,line:x,area:class extends x{performDrawing(t){const{series:e,mappers:i,labelFrame:s,yMinForSeries:n}=t,o=i.yFunc(n);for(let t=0;t<e.length;t++){const n=e[t].points.length;if(n<2)continue;const r=new Path2D,{points:a,options:h}=e[t],l=this.mapSpacePointToPixelPoint(a[0],i.xFunc,i.yFunc);r.moveTo(l.x,o),r.lineTo(l.x,l.y),this.drawValueForPoint(a[0].x,l.x,s),this.plotKit.pointTools.performDrawPoint(l,h);for(let t=1;t<n-1;t++){const e=this.mapSpacePointToPixelPoint(a[t],i.xFunc,i.yFunc);r.lineTo(e.x,e.y),this.drawValueForPoint(a[t].x,e.x,s),this.plotKit.pointTools.performDrawPoint(l,h)}const c=this.mapSpacePointToPixelPoint(a[n-1],i.xFunc,i.yFunc);r.lineTo(c.x,c.y),r.lineTo(c.x,o),this.drawValueForPoint(a[n-1].x,c.x,s),this.plotKit.pointTools.performDrawPoint(c,h),this.plotKit.lineTools.setLineStyle(h),this.plotKit.patternTools.applyShapeOrColor(this.ctx,h.shape,h.color),this.ctx.fill(r),this.ctx.strokeStyle="black",this.ctx.stroke(r)}this.ctx.setLineDash([])}}};class f{constructor(t,e){this.seriesData=[];let i=t;if("string"==typeof i&&(i=document.getElementById(i.replace("/^#/",""))),i instanceof HTMLCanvasElement)this.context=i.getContext("2d");else{if(!(i instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=i}this.setDefaultChartOptions(),this.plot=function(t,e){const i=d[e];if(i)return new i(t,e);throw new Error(`Plotter for ${e} is not defined.`)}(this.context,e)}setDefaultChartOptions(){return this.chartOptions={title:"Title",showTitle:!0,showLegend:!1},this.chartOptions}getDefaultSerieObjectBase(){return{name:"unnamed",options:{color:`#${Math.floor(16777215*Math.random()).toString(16)}`,showValue:!1,showOnLegend:!1}}}setChartOptions(e){t.mergeRight(e,this.chartOptions)}setSerieOptions(e,i){i?i.forEach((i=>{const s=this.seriesData.find((t=>t.name==i));s?t.mergeRight(e,s.options):console.warn(`Serie with name ${i} not found.`)})):this.seriesData.forEach((i=>t.mergeRight(e,i.options)))}draw(t){this.plot.draw(t)}}class _ extends f{set serieNames(t){const e=Math.min(t.length,this.seriesData.length);for(let i=0;i<e;i++)this.seriesData[i].name=t[i]}setDefaultChartOptions(){return super.setDefaultChartOptions(),Object.assign(this.chartOptions,{showLabels:!0}),this.chartOptions}}class g extends _{set points(t){const e=this.seriesData.filter((t=>t.name.startsWith("serie"))).length;this.seriesData.push(this.getDefaultSerieObject(t,e+1))}set X(t){this.seriesData=t.map(((t,e)=>this.getDefaultSerieObject(t.map((t=>({x:t,y:0}))),e)))}set Y(t){const{length:e}=this.seriesData;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const i=Math.min(t.length,e);for(let e=0;e<i;e++){const i=Math.min(t[e].length,this.seriesData[e].points.length);for(let s=0;s<i;s++)this.seriesData[e].points[s].y=t[e][s]}}getDefaultSerieObject(t,e){const i=super.getDefaultSerieObjectBase();return i.name=`serie${e}`,Object.assign(i,{points:t}),Object.assign(i.options,{pointShape:void 0,pointSize:0}),i}draw(){this.seriesData.forEach((t=>t.points.sort(((t,e)=>t.x-e.x)))),super.draw({series:this.seriesData,chartOptions:this.chartOptions})}}class w extends g{getDefaultSerieObject(t,e){const i=super.getDefaultSerieObject(t,e);return Object.assign(i.options,{dash:[],dashWidth:1}),i}}const y={pie:class extends f{set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(e){const{length:i}=this.seriesData;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=t.sliceOrFill(e,i);this.seriesData.map(((t,e)=>{if(s[e]<0)throw Error("Pie Chart cannot have negative values!");t.value=s[e]}))}setDefaultChartOptions(){const t=super.setDefaultChartOptions();return Object.assign(t,{precentageValues:!1}),t}getDefaultSerieObject(t){const e=super.getDefaultSerieObjectBase();return e.name=t,Object.assign(e,{value:0}),Object.assign(e.options,{borderWidth:1,shape:void 0}),e}draw(){super.draw({series:this.seriesData,chartOptions:this.chartOptions})}},bar:class extends _{constructor(){super(...arguments),this.dataLabels=[]}set X(t){this.dataLabels=t}set Y(e){if(!t.checkIfArrayOfArrays(e))return void(this.seriesData=e.map(((t,e)=>this.getDefaultSerieObject([t],e))));const{length:i}=this.dataLabels;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=e.map((e=>t.sliceOrFill(e,i)));this.seriesData=s.map(((t,e)=>this.getDefaultSerieObject(t,e)))}getDefaultSerieObject(t,e){const i=super.getDefaultSerieObjectBase();return i.name=`serie${e}`,Object.assign(i,{values:t}),Object.assign(i.options,{borderWidth:0,shape:void 0}),i}draw(){super.draw({dataLabels:this.dataLabels,series:this.seriesData,chartOptions:this.chartOptions})}},points:g,line:w,area:class extends w{getDefaultSerieObject(t,e){const i=super.getDefaultSerieObject(t,e);return Object.assign(i.options,{shape:void 0}),i}}};function v(t,e){const i=y[t.toLowerCase().trim()];if(i)return new i(e,t);throw new Error(`${t} chart is not defined.`)}})();var n=s.Z;export{n as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUN4QixJQUFLNVksRUFDRCxNQUFNZ2IsTUFBTSxtRUFDaEIsTUFBTW1DLEVBQWV0TyxFQUFPdkcsS0FBSXVELEdBQVMsY0FBdUJBLEVBQU83TCxLQUN2RWxDLEtBQUsyYyxXQUFhMEMsRUFBYTdVLEtBQUksQ0FBQ3VELEVBQU9yRCxJQUFVMUssS0FBS3VlLHNCQUFzQnhRLEVBQU9yRCxLQUdqRjZULHNCQUFzQnhRLEVBQWlCckQsR0FDN0MsTUFBTVksRUFBTTZTLE1BQU1aLDRCQVNsQixPQVJBalMsRUFBSTJDLEtBQU8sUUFBUXZELElBQ25CbkksT0FBT0ssT0FBTzBJLEVBQUssQ0FDZjJQLE9BQVFsTixJQUVaeEwsT0FBT0ssT0FBTzBJLEVBQUkwQyxRQUFTLENBQ3ZCNEwsWUFBYSxFQUNiM1AsV0FBTzVJLElBRUppSyxFQUdKekIsT0FDSHNVLE1BQU10VSxLQUFLLENBQ1BpUixXQUFZOWEsS0FBSzhhLFdBQ2pCL0osT0FBUS9RLEtBQUsyYyxXQUNiN0wsYUFBYzlRLEtBQUs4USxpQkZoQzNCLE9BQVVzTixFQUNWLEtBQVFhLEVBQ1IsS0dWRyxjQUF3QkEsRUFDakJWLHNCQUFzQm5ILEVBQWlCMU0sR0FDN0MsTUFBTVksRUFBTTZTLE1BQU1JLHNCQUFzQm5ILEVBQVExTSxHQUloRCxPQUhBbkksT0FBT0ssT0FBTzBJLEVBQUkwQyxRQUFTLENBQ3ZCL0QsV0FBTzVJLElBRUppSyxLSE9BLFNBQVNnVSxFQUFXdmUsRUFBYytCLEdBQzdDLE1BQU11YSxFQUFXLEVBQWlCdGMsRUFBS3dlLGNBQWNDLFFBQ3JELEdBQUluQyxFQUNBLE9BQU8sSUFBSUEsRUFBU3ZhLEVBQVEvQixHQUNoQyxNQUFNLElBQUltYyxNQUFNLEdBQUduYyw2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9wYXR0ZXJub21hbHkvZGlzdC9wYXR0ZXJub21hbHkuanMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL21vZGVsL3V0aWxzLnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L3V0aWxzLnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L3Bsb3RLaXRzL0Fic3RyYWN0UGxvdFRvb2xzLnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L3Bsb3RLaXRzL0xpbmVQbG90VG9vbHMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL3Bsb3QvcGxvdEtpdHMvUGF0dGVyblBsb3RUb29scy50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvcGxvdC9wbG90S2l0cy9Qb2ludFBsb3RUb29scy50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvcGxvdC9wbG90S2l0cy9QbG90S2l0LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L1Bsb3QudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL3Bsb3QvcGxvdHMvUG9pbnRQbG90LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L3Bsb3RzL0xpbmVQbG90LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L1Bsb3RTZXJ2YW50LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9wbG90L3Bsb3RzL1BpZVBsb3QudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL3Bsb3QvcGxvdHMvQmFyUGxvdC50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvcGxvdC9wbG90cy9BcmVhUGxvdC50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvbW9kZWwvQ2hhcnQudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL21vZGVsL011bHRpQ2hhcnQudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL21vZGVsL2NoYXJ0cy9Qb2ludENoYXJ0LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9tb2RlbC9jaGFydHMvTGluZUNoYXJ0LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9pbnRlcmZhY2UvQ2hhcnRTZXJ2YW50LnRzIiwid2VicGFjazovL2NhbnZhczJkLWNoYXJ0cy8uL3NyYy9tb2RlbC9jaGFydHMvUGllQ2hhcnQudHMiLCJ3ZWJwYWNrOi8vY2FudmFzMmQtY2hhcnRzLy4vc3JjL21vZGVsL2NoYXJ0cy9CYXJDaGFydC50cyIsIndlYnBhY2s6Ly9jYW52YXMyZC1jaGFydHMvLi9zcmMvbW9kZWwvY2hhcnRzL0FyZWFDaGFydC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwucGF0dGVybiA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIEJBQ0tHUk9VTkRfQ09MT1IgPSAncmdiYSgxMDAsIDEwMCwgMTAwLCAwLjcpJztcbnZhciBQQVRURVJOX0NPTE9SID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KSc7XG52YXIgUE9JTlRfU1RZTEUgPSAncm91bmQnO1xuXG52YXIgYXN5bmNHZW5lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEF3YWl0VmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0dlbmVyYXRvcihnZW4pIHtcbiAgICB2YXIgZnJvbnQsIGJhY2s7XG5cbiAgICBmdW5jdGlvbiBzZW5kKGtleSwgYXJnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgIHJlamVjdDogcmVqZWN0LFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYmFjaykge1xuICAgICAgICAgIGJhY2sgPSBiYWNrLm5leHQgPSByZXF1ZXN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZyb250ID0gYmFjayA9IHJlcXVlc3Q7XG4gICAgICAgICAgcmVzdW1lKGtleSwgYXJnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzdW1lKGtleSwgYXJnKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZ2VuW2tleV0oYXJnKTtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0VmFsdWUpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUodmFsdWUudmFsdWUpLnRoZW4oZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmVzdW1lKFwibmV4dFwiLCBhcmcpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJlc3VtZShcInRocm93XCIsIGFyZyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0dGxlKHJlc3VsdC5kb25lID8gXCJyZXR1cm5cIiA6IFwibm9ybWFsXCIsIHJlc3VsdC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzZXR0bGUoXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHRsZSh0eXBlLCB2YWx1ZSkge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJyZXR1cm5cIjpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwidGhyb3dcIjpcbiAgICAgICAgICBmcm9udC5yZWplY3QodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZnJvbnQucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmcm9udCA9IGZyb250Lm5leHQ7XG5cbiAgICAgIGlmIChmcm9udCkge1xuICAgICAgICByZXN1bWUoZnJvbnQua2V5LCBmcm9udC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW52b2tlID0gc2VuZDtcblxuICAgIGlmICh0eXBlb2YgZ2VuLnJldHVybiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnJldHVybiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yKSB7XG4gICAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gIH1cblxuICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwibmV4dFwiLCBhcmcpO1xuICB9O1xuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwidGhyb3dcIiwgYXJnKTtcbiAgfTtcblxuICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJyZXR1cm5cIiwgYXJnKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHdyYXA6IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBc3luY0dlbmVyYXRvcihmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBhd2FpdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmV3IEF3YWl0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfTtcbn0oKTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG52YXIgU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgIHZhciBzaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAyMDtcbiAgICB2YXIgYmFja2dyb3VuZENvbG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBCQUNLR1JPVU5EX0NPTE9SO1xuICAgIHZhciBwYXR0ZXJuQ29sb3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFBBVFRFUk5fQ09MT1I7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hhcGUpO1xuXG4gICAgdGhpcy5fY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5fY29udGV4dCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgdGhpcy5fY2FudmFzLndpZHRoID0gc2l6ZTtcbiAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gc2l6ZTtcblxuICAgIHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgIHRoaXMuX2NvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KTtcblxuICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgIHRoaXMuX3BhdHRlcm5Db2xvciA9IHBhdHRlcm5Db2xvcjtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2hhcGUsIFt7XG4gICAga2V5OiAnc2V0U3Ryb2tlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdHJva2VQcm9wcygpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLl9wYXR0ZXJuQ29sb3I7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuX3NpemUgLyAxMDtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZUpvaW4gPSBQT0lOVF9TVFlMRTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZUNhcCA9IFBPSU5UX1NUWUxFO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEZpbGxQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbGxQcm9wcygpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5fcGF0dGVybkNvbG9yO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2hhcGU7XG59KCk7XG5cbnZhciBQbHVzID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhQbHVzLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIFBsdXMoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1cyk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBsdXMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQbHVzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhQbHVzLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdQbHVzKCk7XG4gICAgICB0aGlzLmRyYXdQbHVzKGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd1BsdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3UGx1cygpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIHF1YXJ0ZXJTaXplID0gc2l6ZSAvIDQ7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHF1YXJ0ZXJTaXplICsgb2Zmc2V0WCwgMCArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8ocXVhcnRlclNpemUgKyBvZmZzZXRYLCBoYWxmU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oMCArIG9mZnNldFgsIHF1YXJ0ZXJTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhoYWxmU2l6ZSArIG9mZnNldFgsIHF1YXJ0ZXJTaXplICsgb2Zmc2V0WSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQbHVzO1xufShTaGFwZSk7XG5cbnZhciBDcm9zcyA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoQ3Jvc3MsIF9TaGFwZSk7XG5cbiAgZnVuY3Rpb24gQ3Jvc3MoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3Jvc3MpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDcm9zcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENyb3NzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhDcm9zcywgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3Q3Jvc3MoKTtcbiAgICAgIHRoaXMuZHJhd0Nyb3NzKGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd0Nyb3NzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0Nyb3NzKCkge1xuICAgICAgdmFyIG9mZnNldFggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gICAgICB2YXIgZ2FwID0gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8ob2Zmc2V0WCArIGdhcCwgb2Zmc2V0WSArIGdhcCk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhoYWxmU2l6ZSAtIGdhcCArIG9mZnNldFgsIGhhbGZTaXplIC0gZ2FwICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhvZmZzZXRYICsgZ2FwLCBoYWxmU2l6ZSAtIGdhcCArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUgLSBnYXAgKyBvZmZzZXRYLCBvZmZzZXRZICsgZ2FwKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIENyb3NzO1xufShTaGFwZSk7XG5cbnZhciBEYXNoID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhEYXNoLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIERhc2goKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGFzaCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERhc2guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYXNoKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEYXNoLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdEYXNoKCk7XG4gICAgICB0aGlzLmRyYXdEYXNoKGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd0Rhc2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3RGFzaCgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIGdhcCA9IDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKG9mZnNldFggKyBnYXAsIG9mZnNldFkgKyBnYXApO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUgLSBnYXAgKyBvZmZzZXRYLCBoYWxmU2l6ZSAtIGdhcCArIG9mZnNldFkpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGFzaDtcbn0oU2hhcGUpO1xuXG52YXIgQ3Jvc3NEYXNoID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhDcm9zc0Rhc2gsIF9TaGFwZSk7XG5cbiAgZnVuY3Rpb24gQ3Jvc3NEYXNoKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENyb3NzRGFzaCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENyb3NzRGFzaC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENyb3NzRGFzaCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoQ3Jvc3NEYXNoLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdmFyIGNyb3NzID0gbmV3IENyb3NzKCk7XG4gICAgICBjcm9zcy5kcmF3Q3Jvc3MuY2FsbCh0aGlzKTtcblxuICAgICAgdmFyIGRhc2ggPSBuZXcgRGFzaCgpO1xuICAgICAgZGFzaC5kcmF3RGFzaC5jYWxsKHRoaXMsIGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDcm9zc0Rhc2g7XG59KFNoYXBlKTtcblxudmFyIERvdCA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoRG90LCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIERvdCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEb3QpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEb3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEb3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKERvdCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0RmlsbFByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd0RvdCgpO1xuICAgICAgdGhpcy5kcmF3RG90KGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuZmlsbCgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdEb3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3RG90KCkge1xuICAgICAgdmFyIG9mZnNldFggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICAgIHZhciBkaWFtZXRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdGhpcy5fc2l6ZSAvIDEwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgcXVhcnRlclNpemUgPSBzaXplIC8gNDtcbiAgICAgIHZhciB4ID0gcXVhcnRlclNpemUgKyBvZmZzZXRYO1xuICAgICAgdmFyIHkgPSBxdWFydGVyU2l6ZSArIG9mZnNldFk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyBxdWFydGVyU2l6ZSwgeSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCBkaWFtZXRlciwgMCwgMiAqIE1hdGguUEkpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRG90O1xufShTaGFwZSk7XG5cbnZhciBEb3REYXNoID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhEb3REYXNoLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIERvdERhc2goKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRG90RGFzaCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERvdERhc2guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEb3REYXNoKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEb3REYXNoLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB2YXIgZGFzaCA9IG5ldyBEYXNoKCk7XG4gICAgICBkYXNoLmRyYXdEYXNoLmNhbGwodGhpcywgaGFsZlNpemUsIGhhbGZTaXplKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHRoaXMuc2V0RmlsbFByb3BzKCk7XG5cbiAgICAgIHZhciBkb3QgPSBuZXcgRG90KCk7XG4gICAgICBkb3QuZHJhd0RvdC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmZpbGwoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERvdERhc2g7XG59KFNoYXBlKTtcblxudmFyIERpc2MgPSBmdW5jdGlvbiAoX0RvdCkge1xuICBpbmhlcml0cyhEaXNjLCBfRG90KTtcblxuICBmdW5jdGlvbiBEaXNjKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERpc2MpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEaXNjLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlzYykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoRGlzYywgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG4gICAgICB2YXIgZGlhbWV0ZXIgPSB0aGlzLl9zaXplIC8gNTtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRGaWxsUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3RG90KDAsIDAsIGRpYW1ldGVyKTtcbiAgICAgIHRoaXMuZHJhd0RvdChoYWxmU2l6ZSwgaGFsZlNpemUsIGRpYW1ldGVyKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5maWxsKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEaXNjO1xufShEb3QpO1xuXG52YXIgUmluZyA9IGZ1bmN0aW9uIChfRG90KSB7XG4gIGluaGVyaXRzKFJpbmcsIF9Eb3QpO1xuXG4gIGZ1bmN0aW9uIFJpbmcoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUmluZyk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJpbmcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSaW5nKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhSaW5nLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcbiAgICAgIHZhciBkaWFtZXRlciA9IHRoaXMuX3NpemUgLyA1O1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldFN0cm9rZVByb3BzKCk7XG5cbiAgICAgIHRoaXMuZHJhd0RvdCgwLCAwLCBkaWFtZXRlcik7XG4gICAgICB0aGlzLmRyYXdEb3QoaGFsZlNpemUsIGhhbGZTaXplLCBkaWFtZXRlcik7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSaW5nO1xufShEb3QpO1xuXG52YXIgTGluZSA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoTGluZSwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBMaW5lKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmUpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMaW5lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGluZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTGluZSwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3TGluZSgpO1xuICAgICAgdGhpcy5kcmF3TGluZShoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdMaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0xpbmUoKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgcXVhcnRlclNpemUgPSBzaXplIC8gNDtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oMCwgcXVhcnRlclNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3NpemUsIHF1YXJ0ZXJTaXplICsgb2Zmc2V0WSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBMaW5lO1xufShTaGFwZSk7XG5cbnZhciBWZXJ0aWNhbExpbmUgPSBmdW5jdGlvbiAoX0xpbmUpIHtcbiAgaW5oZXJpdHMoVmVydGljYWxMaW5lLCBfTGluZSk7XG5cbiAgZnVuY3Rpb24gVmVydGljYWxMaW5lKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFZlcnRpY2FsTGluZSk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFZlcnRpY2FsTGluZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZlcnRpY2FsTGluZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoVmVydGljYWxMaW5lLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LnRyYW5zbGF0ZSh0aGlzLl9zaXplLCAwKTtcbiAgICAgIHRoaXMuX2NvbnRleHQucm90YXRlKDkwICogTWF0aC5QSSAvIDE4MCk7XG5cbiAgICAgIExpbmUucHJvdG90eXBlLmRyYXdUaWxlLmNhbGwodGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBWZXJ0aWNhbExpbmU7XG59KExpbmUpO1xuXG52YXIgV2VhdmUgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKFdlYXZlLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIFdlYXZlKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYXZlKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV2VhdmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXZWF2ZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoV2VhdmUsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3V2VhdmUoMCwgMCk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd1dlYXZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1dlYXZlKG9mZnNldFgsIG9mZnNldFkpIHtcbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhvZmZzZXRYICsgMSwgb2Zmc2V0WSArIDEpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUgLSAxLCBoYWxmU2l6ZSAtIDEpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhoYWxmU2l6ZSArIDEsIHNpemUgLSAxKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHNpemUgLSAxLCBoYWxmU2l6ZSArIDEpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gV2VhdmU7XG59KFNoYXBlKTtcblxudmFyIFppZ3phZyA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoWmlnemFnLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIFppZ3phZygpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBaaWd6YWcpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChaaWd6YWcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihaaWd6YWcpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFppZ3phZywgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdaaWd6YWcoKTtcbiAgICAgIHRoaXMuZHJhd1ppZ3phZyh0aGlzLl9zaXplIC8gMik7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd1ppZ3phZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdaaWd6YWcoKSB7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIHF1YXJ0ZXJTaXplID0gc2l6ZSAvIDQ7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcbiAgICAgIHZhciB0ZW50aFNpemUgPSBzaXplIC8gMTA7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKDAsIHRlbnRoU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8ocXVhcnRlclNpemUsIGhhbGZTaXplIC0gdGVudGhTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhoYWxmU2l6ZSwgdGVudGhTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhzaXplIC0gcXVhcnRlclNpemUsIGhhbGZTaXplIC0gdGVudGhTaXplICsgb2Zmc2V0WSk7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhzaXplLCB0ZW50aFNpemUgKyBvZmZzZXRZKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFppZ3phZztcbn0oU2hhcGUpO1xuXG52YXIgWmlnemFnVmVydGljYWwgPSBmdW5jdGlvbiAoX1ppZ3phZykge1xuICBpbmhlcml0cyhaaWd6YWdWZXJ0aWNhbCwgX1ppZ3phZyk7XG5cbiAgZnVuY3Rpb24gWmlnemFnVmVydGljYWwoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgWmlnemFnVmVydGljYWwpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChaaWd6YWdWZXJ0aWNhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFppZ3phZ1ZlcnRpY2FsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhaaWd6YWdWZXJ0aWNhbCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdGhpcy5fY29udGV4dC50cmFuc2xhdGUodGhpcy5fc2l6ZSwgMCk7XG4gICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xuXG4gICAgICBaaWd6YWcucHJvdG90eXBlLmRyYXdUaWxlLmNhbGwodGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBaaWd6YWdWZXJ0aWNhbDtcbn0oWmlnemFnKTtcblxudmFyIERpYWdvbmFsID0gZnVuY3Rpb24gKF9TaGFwZSkge1xuICBpbmhlcml0cyhEaWFnb25hbCwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBEaWFnb25hbCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEaWFnb25hbCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERpYWdvbmFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlhZ29uYWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKERpYWdvbmFsLCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdEaWFnb25hbExpbmUoKTtcbiAgICAgIHRoaXMuZHJhd0RpYWdvbmFsTGluZShoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdEaWFnb25hbExpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3RGlhZ29uYWxMaW5lKCkge1xuICAgICAgdmFyIG9mZnNldFggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gICAgICB2YXIgZ2FwID0gMTtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oaGFsZlNpemUgLSBnYXAgLSBvZmZzZXRYLCBnYXAgKiAtMSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oc2l6ZSArIDEgLSBvZmZzZXRYLCBoYWxmU2l6ZSArIDEgKyBvZmZzZXRZKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERpYWdvbmFsO1xufShTaGFwZSk7XG5cbnZhciBEaWFnb25hbFJpZ2h0TGVmdCA9IGZ1bmN0aW9uIChfRGlhZ29uYWwpIHtcbiAgaW5oZXJpdHMoRGlhZ29uYWxSaWdodExlZnQsIF9EaWFnb25hbCk7XG5cbiAgZnVuY3Rpb24gRGlhZ29uYWxSaWdodExlZnQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlhZ29uYWxSaWdodExlZnQpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEaWFnb25hbFJpZ2h0TGVmdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpYWdvbmFsUmlnaHRMZWZ0KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEaWFnb25hbFJpZ2h0TGVmdCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdGhpcy5fY29udGV4dC50cmFuc2xhdGUodGhpcy5fc2l6ZSwgMCk7XG4gICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xuXG4gICAgICBEaWFnb25hbC5wcm90b3R5cGUuZHJhd1RpbGUuY2FsbCh0aGlzKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERpYWdvbmFsUmlnaHRMZWZ0O1xufShEaWFnb25hbCk7XG5cbnZhciBTcXVhcmUgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKFNxdWFyZSwgX1NoYXBlKTtcblxuICBmdW5jdGlvbiBTcXVhcmUoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3F1YXJlKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3F1YXJlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3F1YXJlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTcXVhcmUsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldEZpbGxQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdTcXVhcmUoKTtcbiAgICAgIHRoaXMuZHJhd1NxdWFyZShoYWxmU2l6ZSwgaGFsZlNpemUpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmZpbGwoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3U3F1YXJlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1NxdWFyZSgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIGdhcCA9IHNpemUgLyAyMDtcblxuICAgICAgdGhpcy5fY29udGV4dC5maWxsUmVjdChvZmZzZXRYICsgZ2FwLCBvZmZzZXRZICsgZ2FwLCBoYWxmU2l6ZSAtIGdhcCAqIDIsIGhhbGZTaXplIC0gZ2FwICogMik7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTcXVhcmU7XG59KFNoYXBlKTtcblxudmFyIEJveCA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgaW5oZXJpdHMoQm94LCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIEJveCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBCb3gpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCb3guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCb3gpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKEJveCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIGhhbGZTaXplID0gdGhpcy5fc2l6ZSAvIDI7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgIHRoaXMuc2V0U3Ryb2tlUHJvcHMoKTtcblxuICAgICAgdGhpcy5kcmF3Qm94KCk7XG4gICAgICB0aGlzLmRyYXdCb3goaGFsZlNpemUsIGhhbGZTaXplKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3Qm94JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0JveCgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgdmFyIGdhcCA9IHNpemUgLyAyMDtcblxuICAgICAgdGhpcy5fY29udGV4dC5zdHJva2VSZWN0KG9mZnNldFggKyBnYXAsIG9mZnNldFkgKyBnYXAsIGhhbGZTaXplIC0gZ2FwICogNCwgaGFsZlNpemUgLSBnYXAgKiA0KTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEJveDtcbn0oU2hhcGUpO1xuXG52YXIgVHJpYW5nbGUgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKFRyaWFuZ2xlLCBfU2hhcGUpO1xuXG4gIGZ1bmN0aW9uIFRyaWFuZ2xlKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRyaWFuZ2xlKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVHJpYW5nbGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUcmlhbmdsZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoVHJpYW5nbGUsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldEZpbGxQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdUcmlhbmdsZSgpO1xuICAgICAgdGhpcy5kcmF3VHJpYW5nbGUoaGFsZlNpemUsIGhhbGZTaXplKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5maWxsKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd1RyaWFuZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RyaWFuZ2xlKCkge1xuICAgICAgdmFyIG9mZnNldFggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgb2Zmc2V0WSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuICAgICAgdmFyIGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gICAgICB2YXIgcXVhcnRlclNpemUgPSBzaXplIC8gNDtcblxuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8ocXVhcnRlclNpemUgKyBvZmZzZXRYLCBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKGhhbGZTaXplICsgb2Zmc2V0WCwgaGFsZlNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKG9mZnNldFgsIGhhbGZTaXplICsgb2Zmc2V0WSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUcmlhbmdsZTtcbn0oU2hhcGUpO1xuXG52YXIgVHJpYW5nbGVWZXJ0aWNhbCA9IGZ1bmN0aW9uIChfVHJpYW5nbGUpIHtcbiAgaW5oZXJpdHMoVHJpYW5nbGVWZXJ0aWNhbCwgX1RyaWFuZ2xlKTtcblxuICBmdW5jdGlvbiBUcmlhbmdsZVZlcnRpY2FsKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRyaWFuZ2xlVmVydGljYWwpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUcmlhbmdsZVZlcnRpY2FsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVHJpYW5nbGVWZXJ0aWNhbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoVHJpYW5nbGVWZXJ0aWNhbCwgW3tcbiAgICBrZXk6ICdkcmF3VGlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdUaWxlKCkge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LnRyYW5zbGF0ZShzaXplLCBzaXplKTtcbiAgICAgIHRoaXMuX2NvbnRleHQucm90YXRlKDE4MCAqIE1hdGguUEkgLyAxODApO1xuXG4gICAgICBUcmlhbmdsZS5wcm90b3R5cGUuZHJhd1RpbGUuY2FsbCh0aGlzKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRyaWFuZ2xlVmVydGljYWw7XG59KFRyaWFuZ2xlKTtcblxudmFyIERpYW1vbmQgPSBmdW5jdGlvbiAoX1NoYXBlKSB7XG4gIGluaGVyaXRzKERpYW1vbmQsIF9TaGFwZSk7XG5cbiAgZnVuY3Rpb24gRGlhbW9uZCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEaWFtb25kKTtcbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGlhbW9uZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpYW1vbmQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKERpYW1vbmQsIFt7XG4gICAga2V5OiAnZHJhd1RpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3VGlsZSgpIHtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHRoaXMuX3NpemUgLyAyO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICB0aGlzLnNldEZpbGxQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdEaWFtb25kKCk7XG4gICAgICB0aGlzLmRyYXdEaWFtb25kKGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuZmlsbCgpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FudmFzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXdEaWFtb25kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0RpYW1vbmQoKSB7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBvZmZzZXRZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICB2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcbiAgICAgIHZhciBxdWFydGVyU2l6ZSA9IHNpemUgLyA0O1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhxdWFydGVyU2l6ZSArIG9mZnNldFgsIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oaGFsZlNpemUgKyBvZmZzZXRYLCBxdWFydGVyU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8ocXVhcnRlclNpemUgKyBvZmZzZXRYLCBoYWxmU2l6ZSArIG9mZnNldFkpO1xuICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8ob2Zmc2V0WCwgcXVhcnRlclNpemUgKyBvZmZzZXRZKTtcblxuICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERpYW1vbmQ7XG59KFNoYXBlKTtcblxudmFyIERpYW1vbmRCb3ggPSBmdW5jdGlvbiAoX0RpYW1vbmQpIHtcbiAgaW5oZXJpdHMoRGlhbW9uZEJveCwgX0RpYW1vbmQpO1xuXG4gIGZ1bmN0aW9uIERpYW1vbmRCb3goKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlhbW9uZEJveCk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERpYW1vbmRCb3guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEaWFtb25kQm94KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhEaWFtb25kQm94LCBbe1xuICAgIGtleTogJ2RyYXdUaWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1RpbGUoKSB7XG4gICAgICB2YXIgaGFsZlNpemUgPSB0aGlzLl9zaXplIC8gMjtcblxuICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgdGhpcy5zZXRTdHJva2VQcm9wcygpO1xuXG4gICAgICB0aGlzLmRyYXdEaWFtb25kKCk7XG4gICAgICB0aGlzLmRyYXdEaWFtb25kKGhhbGZTaXplLCBoYWxmU2l6ZSk7XG5cbiAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd0RpYW1vbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3RGlhbW9uZCgpIHtcbiAgICAgIHZhciBvZmZzZXRYID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyIC0gMTtcbiAgICAgIHZhciBxdWFydGVyU2l6ZSA9IHNpemUgLyA0O1xuXG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyhxdWFydGVyU2l6ZSArIG9mZnNldFgsIG9mZnNldFkgKyAxKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKGhhbGZTaXplICsgb2Zmc2V0WCwgcXVhcnRlclNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHF1YXJ0ZXJTaXplICsgb2Zmc2V0WCwgaGFsZlNpemUgKyBvZmZzZXRZKTtcbiAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKG9mZnNldFggKyAxLCBxdWFydGVyU2l6ZSArIG9mZnNldFkpO1xuXG4gICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGlhbW9uZEJveDtcbn0oRGlhbW9uZCk7XG5cbnZhciBzaGFwZXMgPSB7XG4gICdwbHVzJzogUGx1cyxcbiAgJ2Nyb3NzJzogQ3Jvc3MsXG4gICdkYXNoJzogRGFzaCxcbiAgJ2Nyb3NzLWRhc2gnOiBDcm9zc0Rhc2gsXG4gICdkb3QnOiBEb3QsXG4gICdkb3QtZGFzaCc6IERvdERhc2gsXG4gICdkaXNjJzogRGlzYyxcbiAgJ3JpbmcnOiBSaW5nLFxuICAnbGluZSc6IExpbmUsXG4gICdsaW5lLXZlcnRpY2FsJzogVmVydGljYWxMaW5lLFxuICAnd2VhdmUnOiBXZWF2ZSxcbiAgJ3ppZ3phZyc6IFppZ3phZyxcbiAgJ3ppZ3phZy12ZXJ0aWNhbCc6IFppZ3phZ1ZlcnRpY2FsLFxuICAnZGlhZ29uYWwnOiBEaWFnb25hbCxcbiAgJ2RpYWdvbmFsLXJpZ2h0LWxlZnQnOiBEaWFnb25hbFJpZ2h0TGVmdCxcbiAgJ3NxdWFyZSc6IFNxdWFyZSxcbiAgJ2JveCc6IEJveCxcbiAgJ3RyaWFuZ2xlJzogVHJpYW5nbGUsXG4gICd0cmlhbmdsZS1pbnZlcnRlZCc6IFRyaWFuZ2xlVmVydGljYWwsXG4gICdkaWFtb25kJzogRGlhbW9uZCxcbiAgJ2RpYW1vbmQtYm94JzogRGlhbW9uZEJveFxufTtcblxudmFyIGRlcHJlY2F0ZWRTaGFwZXMgPSB7XG4gICdjaXJjbGUnOiBzaGFwZXNbJ2Rpc2MnXSxcbiAgJ3RyaWFuZ2xlLXZlcnRpY2FsJzogc2hhcGVzWyd0cmlhbmdsZS1pbnZlcnRlZCddLFxuICAnbGluZS1ob3Jpem9udGFsJzogc2hhcGVzWydsaW5lJ10sXG4gICdsaW5lLWRpYWdvbmFsLWxyJzogc2hhcGVzWydkaWFnb25hbCddLFxuICAnbGluZS1kaWFnb25hbC1ybCc6IHNoYXBlc1snZGlhZ29uYWwtcmlnaHQtbGVmdCddLFxuICAnemlnemFnLWhvcml6b250YWwnOiBzaGFwZXNbJ3ppZ3phZyddLFxuICAnZGlhbW9uZC1vdXRsaW5lJzogc2hhcGVzWydkaWFtb25kLWJveCddXG59O1xuXG52YXIgY29tcGxldGVTaGFwZXNMaXN0ID0gW107XG5cbmZ1bmN0aW9uIGdldFJhbmRvbVNoYXBlKCkge1xuICB2YXIgZXhjbHVkZWRTaGFwZVR5cGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICB2YXIgc2hhcGVzTGlzdCA9IE9iamVjdC5rZXlzKHNoYXBlcyk7XG5cbiAgZXhjbHVkZWRTaGFwZVR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHNoYXBlVHlwZSkge1xuICAgIHNoYXBlc0xpc3Quc3BsaWNlKHNoYXBlc0xpc3QuaW5kZXhPZihzaGFwZVR5cGUpLCAxKTtcbiAgfSk7XG5cbiAgdmFyIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2hhcGVzTGlzdC5sZW5ndGgpO1xuXG4gIHJldHVybiBzaGFwZXNMaXN0W3JhbmRvbUluZGV4XTtcbn1cblxuX2V4dGVuZHMoY29tcGxldGVTaGFwZXNMaXN0LCBzaGFwZXMsIGRlcHJlY2F0ZWRTaGFwZXMpO1xuXG5mdW5jdGlvbiBkcmF3KCkge1xuICB2YXIgc2hhcGVUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3F1YXJlJztcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IGFyZ3VtZW50c1sxXTtcbiAgdmFyIHBhdHRlcm5Db2xvciA9IGFyZ3VtZW50c1syXTtcbiAgdmFyIHNpemUgPSBhcmd1bWVudHNbM107XG5cbiAgdmFyIHBhdHRlcm5DYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgdmFyIHBhdHRlcm5Db250ZXh0ID0gcGF0dGVybkNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB2YXIgb3V0ZXJTaXplID0gc2l6ZSAqIDI7XG5cbiAgdmFyIFNoYXBlID0gY29tcGxldGVTaGFwZXNMaXN0W3NoYXBlVHlwZV07XG4gIHZhciBzaGFwZSA9IG5ldyBTaGFwZShzaXplLCBiYWNrZ3JvdW5kQ29sb3IsIHBhdHRlcm5Db2xvcik7XG5cbiAgdmFyIHBhdHRlcm4gPSBwYXR0ZXJuQ29udGV4dC5jcmVhdGVQYXR0ZXJuKHNoYXBlLmRyYXdUaWxlKCksICdyZXBlYXQnKTtcblxuICBwYXR0ZXJuQ2FudmFzLndpZHRoID0gb3V0ZXJTaXplO1xuICBwYXR0ZXJuQ2FudmFzLmhlaWdodCA9IG91dGVyU2l6ZTtcblxuICBwYXR0ZXJuLnNoYXBlVHlwZSA9IHNoYXBlVHlwZTtcblxuICByZXR1cm4gcGF0dGVybjtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUoY29sb3JMaXN0KSB7XG4gIHZhciBmaXJzdFNoYXBlVHlwZSA9IHZvaWQgMDtcbiAgdmFyIHByZXZpb3VzU2hhcGVUeXBlID0gdm9pZCAwO1xuXG4gIHJldHVybiBjb2xvckxpc3QubWFwKGZ1bmN0aW9uIChjb2xvciwgaW5kZXgsIGxpc3QpIHtcbiAgICB2YXIgc2hhcGVUeXBlID0gdm9pZCAwO1xuXG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICBzaGFwZVR5cGUgPSBnZXRSYW5kb21TaGFwZSgpO1xuICAgICAgcHJldmlvdXNTaGFwZVR5cGUgPSBzaGFwZVR5cGU7XG4gICAgICBmaXJzdFNoYXBlVHlwZSA9IHByZXZpb3VzU2hhcGVUeXBlO1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGxpc3QubGVuZ3RoIC0gMSkge1xuICAgICAgc2hhcGVUeXBlID0gZ2V0UmFuZG9tU2hhcGUoW3ByZXZpb3VzU2hhcGVUeXBlLCBmaXJzdFNoYXBlVHlwZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaGFwZVR5cGUgPSBnZXRSYW5kb21TaGFwZShbcHJldmlvdXNTaGFwZVR5cGVdKTtcbiAgICAgIHByZXZpb3VzU2hhcGVUeXBlID0gc2hhcGVUeXBlO1xuICAgIH1cblxuICAgIHJldHVybiBkcmF3KHNoYXBlVHlwZSwgY29sb3IpO1xuICB9KTtcbn1cblxudmFyIHBhdHRlcm4gPSB7XG4gIGRyYXc6IGRyYXcsXG4gIGdlbmVyYXRlOiBnZW5lcmF0ZVxufTtcblxucmV0dXJuIHBhdHRlcm47XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXR0ZXJub21hbHkuanMubWFwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIC8qKlxyXG4gICAgICogSWYgbmVlZGVkLCBzbGljZSAnYXJyYXknIHRvICdsZW4nIGl0ZW1zIG9yIGZpbGwgdG8gJ2xlbicgaXRlbXMgdXNpbmcgJ2ZpbGxXaXRoJy5cclxuICAgICAqIEBwYXJhbSBhcnJheSAtIGFycmF5IHRvIHNsaWNlIG9yIGZpbGwuXHJcbiAgICAgKiBAcGFyYW0gbGVuIC0gdGhlIHJlc3VsdGluZyBsZW5ndGggb2YgYXJyYXkuXHJcbiAgICAgKiBAcGFyYW0gZmlsbFdpdGggLSBudW1iZXIgd2l0aCB3aGljaCBhcnJheSBzaG91bGQgYmUgZmlsbGVkLlxyXG4gICAgICogQHJldHVybnMgc2xpY2VkIG9yIGZpbGxlZCBhcnJheS5cclxuICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNsaWNlT3JGaWxsKGFycmF5OiBudW1iZXJbXSwgbGVuOiBudW1iZXIsIGZpbGxXaXRoPzogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IGxlbikgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPiBsZW4pIHJldHVybiBhcnJheS5zbGljZSgwLCBsZW4pO1xyXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPCBsZW4pXHJcbiAgICAgICAgICAgIHdoaWxlIChhcnJheS5sZW5ndGggIT09IGxlbilcclxuICAgICAgICAgICAgICAgIGFycmF5LnB1c2goZmlsbFdpdGggPz8gMCk7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVyZ2UgcHJvcGVydGllcyBmcm9tICduZXdPcHRpb25zJyB0byAnYWN0dWFsT3B0aW9ucycgKHJpZ2h0LWpvaW4gbGlrZSkuXHJcbiAgICAgKiBAcGFyYW0gbmV3T3B0aW9ucyAtIG9iamVjdCB3aXRoIHNvbWUgb3B0aW9ucy5cclxuICAgICAqIEBwYXJhbSBhY3R1YWxPcHRpb25zIC0gb2JqZWN0IHdpdGggYWxsIG9wdGlvbnMuXHJcbiAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBtZXJnZVJpZ2h0PFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4obmV3T3B0aW9uczogUGFydGlhbDxUPiwgYWN0dWFsT3B0aW9uczogVCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhY3R1YWxPcHRpb25zKTtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhuZXdPcHRpb25zKS5mb3JFYWNoKHBhaXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwYWlyWzBdO1xyXG4gICAgICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXJbMV07XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxPcHRpb25zW2tleSBhcyBrZXlvZiBUXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhcnJheSBpcyBhcnJheSBvZiBhcnJheXMgYW5kIHJldHVybiBhbnN3ZXIuXHJcbiAgICAgKiBAcGFyYW0gYXJyIC0gYXJyYXkgb3IgYXJyYXkgb2YgYXJyYXlzXHJcbiAgICAgKiBAcmV0dXJucyBmbGFnIGluZGljYXRpbmcgd2hldGhlciBhcnIgaXMgYXJyYXkgb2YgYXJyYXkgb3Igbm90XHJcbiAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjaGVja0lmQXJyYXlPZkFycmF5cyhhcnI6IHVua25vd25bXSB8IHVua25vd25bXVtdKTogYXJyIGlzIHVua25vd25bXVtdIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnJbMF0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVGlja0luZm8gfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlc2l6ZSBjYW52YXMgdG8gZGlzcGxheSBzaXplLlxyXG4gKiBAcGFyYW0gY2FudmFzIC0gY2FudmFzIG9iamVjdC5cclxuICogQHJldHVybnMgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgcmVzaXplIG9jY3VyZWQuXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNpemVDYW52YXNUb0Rpc3BsYXlTaXplKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xyXG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgIGlmIChjYW52YXMud2lkdGggIT09IHdpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT09IGhlaWdodCkge1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRpY2tzIGZvciBzZXZlcmFsIGNoYXJ0cy4gXHJcbiAqIEFsZ29yaXRobSBieSAnTWFyayBSYW5zb20nLiBQb3J0ZWQgdG8gSlMgYW5kIG1vZGlmaWVkIGJ5IG1lLlxyXG4gKiBAc2VlIHtAbGluayBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjE2ODEvfSBmb3Igb3JpZ2luYWwgYWxnb3JpdGhtIGNvZGUuXHJcbiAqIEBwYXJhbSBsYXJnZXN0IC0gcHJldmlvdXNseSBkZXRlcm1pbmVkIGxhcmdlc3QgdmFsdWUuXHJcbiAqIEBwYXJhbSBtb3N0VGlja3MgLSBtYXhpbWFsIG51bWJlciBvZiBwb3NzaWJsZSB0aWNrcy5cclxuICogQHJldHVybnMgdGljayBoZWlnaHQgYW5kIG51bWJlciBvZiB0aWNrcy4gIFxyXG4gKiBAc3VtbWFyeVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGlja0luZm8obW9zdFRpY2tzOiBudW1iZXIsIG1pbiA9IDAsIG1heCA9IDApOiBUaWNrSW5mbyB7XHJcbiAgICBjb25zdCBkaWZmID0gTWF0aC5jZWlsKG1heCAtIG1pbik7XHJcblxyXG4gICAgY29uc3QgbWluaW11bSA9IGRpZmYgLyBtb3N0VGlja3M7XHJcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZzEwKG1pbmltdW0pKSk7XHJcbiAgICBjb25zdCByZXNpZHVhbCA9IG1pbmltdW0gLyBtYWduaXR1ZGU7XHJcbiAgICBjb25zdCB0YWJsZSA9IFsxLCAxLjUsIDIsIDMsIDUsIDcsIDEwXTtcclxuICAgIGNvbnN0IHRpY2sgPSByZXNpZHVhbCA8IDEwID8gdGFibGUuZmluZCgoZSkgPT4gKGUgPiByZXNpZHVhbCkpIDogMTA7XHJcbiAgICBjb25zdCB0aWNrSGVpZ2h0ID0gdGljayAqIG1hZ25pdHVkZTtcclxuICAgIGNvbnN0IHRpY2tDb3VudCA9IE1hdGguY2VpbChkaWZmIC8gdGlja0hlaWdodCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpY2tIZWlnaHQsXHJcbiAgICAgICAgdGlja0NvdW50XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGbG9hdFdpdGhvdXRQYWRkaW5nKHZhbDogbnVtYmVyLCBmaXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWwudG9GaXhlZChmaXgpKTtcclxufSIsImltcG9ydCB7IFNlcmllRGF0YUNvbW1vbiB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgeyBCb3hGcmFtZUFuZFRleHRDb29yZHMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UGxvdFRvb2xzIHtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBwZXJmb3JtRHJhd1NpbmdsZVNlcmllTGVnZW5kKGJveEZyYW1lQW5kVGV4dENvb3JkczogQm94RnJhbWVBbmRUZXh0Q29vcmRzLCBzZXJpZTogU2VyaWVEYXRhQ29tbW9uKTogdm9pZDtcclxufSIsImltcG9ydCB7IERhc2gsIFBvaW50LCBTZXJpZURhdGFDb21tb24sIFNlcmllT3B0aW9uc0xpbmUgfSBmcm9tIFwiLi4vLi4vbW9kZWwvdHlwZXNcIjtcclxuaW1wb3J0IHsgQm94RnJhbWVBbmRUZXh0Q29vcmRzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCBBYnN0cmFjdFBsb3RUb29scyBmcm9tIFwiLi9BYnN0cmFjdFBsb3RUb29sc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZVBsb3RUb29scyBleHRlbmRzIEFic3RyYWN0UGxvdFRvb2xzIHtcclxuICAgIHB1YmxpYyBwZXJmb3JtRHJhd1NpbmdsZVNlcmllTGVnZW5kKGJveEZyYW1lQW5kVGV4dENvb3JkczogQm94RnJhbWVBbmRUZXh0Q29vcmRzLCBzZXJpZTogU2VyaWVEYXRhQ29tbW9uKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBuYW1lIH0gPSBzZXJpZTtcclxuICAgICAgICBjb25zdCB7IGJveEZyYW1lLCB0ZXh0Q29vcmRzIH0gPSBib3hGcmFtZUFuZFRleHRDb29yZHM7XHJcbiAgICAgICAgY29uc3QgeUJveEZyYW1lQ2VudGVyID0gYm94RnJhbWUueSArIGJveEZyYW1lLmggLyAyO1xyXG4gICAgICAgIGNvbnN0IHAxOiBQb2ludCA9IHtcclxuICAgICAgICAgICAgeDogYm94RnJhbWUueCxcclxuICAgICAgICAgICAgeTogeUJveEZyYW1lQ2VudGVyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcDI6IFBvaW50ID0ge1xyXG4gICAgICAgICAgICB4OiBib3hGcmFtZS54ICsgYm94RnJhbWUudyxcclxuICAgICAgICAgICAgeTogeUJveEZyYW1lQ2VudGVyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zZXRMaW5lU3R5bGUob3B0aW9ucyBhcyBTZXJpZU9wdGlvbnNMaW5lKTtcclxuICAgICAgICB0aGlzLmRyYXdTaW5nbGVMaW5lKHAxLCBwMik7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgY3R4LmZpbGxUZXh0KG5hbWUsIHRleHRDb29yZHMueCwgdGV4dENvb3Jkcy55LCB0ZXh0Q29vcmRzLm1heFcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZHJhd1NpbmdsZUxpbmUocDE6IFBvaW50LCBwMjogUG9pbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHAyLngsIHAyLnkpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIHRoaXMuY3R4LnNldExpbmVEYXNoKFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0TGluZVN0eWxlKG9wdGlvbnM6IFNlcmllT3B0aW9uc0xpbmUpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcztcclxuICAgICAgICBsZXQgeyBkYXNoIH0gPSBvcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IHsgY29sb3IsIGRhc2hXaWR0aCB9ID0gb3B0aW9ucztcclxuXHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGRhc2hXaWR0aCA/PyAxO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGFzaCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIGRhc2ggPSB0aGlzLmRhc2hTdHJpbmdUb0FycmF5KGRhc2gpLm1hcCh2YWx1ZSA9PiB2YWx1ZSAqIGN0eC5saW5lV2lkdGgpO1xyXG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaChkYXNoID8/IFtdKTtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvciA/PyAnYmxhY2snO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGFzaFN0cmluZ1RvQXJyYXkoZGFzaDogRGFzaCk6IG51bWJlcltdIHtcclxuICAgICAgICBzd2l0Y2ggKGRhc2gpIHtcclxuICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIGNhc2UgJ3AnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxLCAxXTtcclxuICAgICAgICAgICAgY2FzZSAnbHMnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxMCwgNV07XHJcbiAgICAgICAgICAgIGNhc2UgJ2xscyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIwLCA1XTtcclxuICAgICAgICAgICAgY2FzZSAnbHAnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxNSwgMywgMywgM107XHJcbiAgICAgICAgICAgIGNhc2UgJ2xwcHAnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyMCwgMywgMywgMywgMywgMywgMywgM107XHJcbiAgICAgICAgICAgIGNhc2UgJ2xwc3AnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs4LCAyLCAyXTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBkcmF3IH0gZnJvbSBcInBhdHRlcm5vbWFseVwiO1xyXG5pbXBvcnQgeyBTZXJpZURhdGFDb21tb24sIFNlcmllT3B0aW9uc1NoYXBlIH0gZnJvbSBcIi4uLy4uL21vZGVsL3R5cGVzXCI7XHJcbmltcG9ydCB7IEJveEZyYW1lQW5kVGV4dENvb3JkcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgQWJzdHJhY3RQbG90VG9vbHMgZnJvbSBcIi4vQWJzdHJhY3RQbG90VG9vbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdHRlcm5QbG90VG9vbHMgZXh0ZW5kcyBBYnN0cmFjdFBsb3RUb29scyB7XHJcbiAgICBwdWJsaWMgcGVyZm9ybURyYXdTaW5nbGVTZXJpZUxlZ2VuZChib3hGcmFtZUFuZFRleHRDb29yZHM6IEJveEZyYW1lQW5kVGV4dENvb3Jkcywgc2VyaWU6IFNlcmllRGF0YUNvbW1vbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gc2VyaWU7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHNlcmllLm9wdGlvbnMgYXMgU2VyaWVPcHRpb25zU2hhcGU7XHJcbiAgICAgICAgY29uc3QgeyBib3hGcmFtZSwgdGV4dENvb3JkcyB9ID0gYm94RnJhbWVBbmRUZXh0Q29vcmRzO1xyXG4gICAgICAgIHRoaXMuYXBwbHlTaGFwZU9yQ29sb3IoY3R4LCBvcHRpb25zLnNoYXBlLCBvcHRpb25zLmNvbG9yKTtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xyXG4gICAgICAgIGN0eC5maWxsUmVjdChib3hGcmFtZS54LCBib3hGcmFtZS55LCBib3hGcmFtZS53LCBib3hGcmFtZS5oKTtcclxuICAgICAgICBjdHguc3Ryb2tlUmVjdChib3hGcmFtZS54LCBib3hGcmFtZS55LCBib3hGcmFtZS53LCBib3hGcmFtZS5oKTtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICBjdHguZmlsbFRleHQobmFtZSwgdGV4dENvb3Jkcy54LCB0ZXh0Q29vcmRzLnksIHRleHRDb29yZHMubWF4Vyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFwcGx5U2hhcGVPckNvbG9yKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzaGFwZTogU2VyaWVPcHRpb25zU2hhcGVbJ3NoYXBlJ10sIGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgaWYgKHNoYXBlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGRyYXcoc2hhcGUsIGNvbG9yLCAnYmxhY2snKTtcclxuICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7c2hhcGV9IGlzIGludmFsaWQgc2hhcGUuIFNlZSBkb2N1bWVudGF0aW9uLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZHJhdyB9IGZyb20gXCJwYXR0ZXJub21hbHlcIjtcclxuaW1wb3J0IHsgUG9pbnQsIFNlcmllRGF0YUNvbW1vbiwgU2VyaWVPcHRpb25zUG9pbnQgfSBmcm9tIFwiLi4vLi4vbW9kZWwvdHlwZXNcIjtcclxuaW1wb3J0IHsgQm94RnJhbWVBbmRUZXh0Q29vcmRzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCBBYnN0cmFjdFBsb3RUb29scyBmcm9tIFwiLi9BYnN0cmFjdFBsb3RUb29sc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnRQbG90VG9vbHMgZXh0ZW5kcyBBYnN0cmFjdFBsb3RUb29scyB7XHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgcGVyZm9ybURyYXdTaW5nbGVTZXJpZUxlZ2VuZChib3hGcmFtZUFuZFRleHRDb29yZHM6IEJveEZyYW1lQW5kVGV4dENvb3Jkcywgc2VyaWU6IFNlcmllRGF0YUNvbW1vbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgbmFtZSB9ID0gc2VyaWU7XHJcbiAgICAgICAgY29uc3QgeyBib3hGcmFtZSwgdGV4dENvb3JkcyB9ID0gYm94RnJhbWVBbmRUZXh0Q29vcmRzO1xyXG4gICAgICAgIHRoaXMucGVyZm9ybURyYXdQb2ludCh7XHJcbiAgICAgICAgICAgIHg6IGJveEZyYW1lLnggKyBib3hGcmFtZS53IC8gMixcclxuICAgICAgICAgICAgeTogYm94RnJhbWUueSArIGJveEZyYW1lLmggLyAyXHJcbiAgICAgICAgfSwgb3B0aW9ucyBhcyBTZXJpZU9wdGlvbnNQb2ludCk7XHJcbiAgICAgICAgY3R4LmZpbGxUZXh0KG5hbWUsIHRleHRDb29yZHMueCwgdGV4dENvb3Jkcy55LCB0ZXh0Q29vcmRzLm1heFcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwZXJmb3JtRHJhd1BvaW50KGNvb3JkczogUG9pbnQsIG9wdGlvbnM6IFNlcmllT3B0aW9uc1BvaW50KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBwb2ludFNoYXBlLCBwb2ludFNpemUsIGNvbG9yIH0gPSBvcHRpb25zO1xyXG4gICAgICAgIGlmIChwb2ludFNoYXBlID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm06IERPTU1hdHJpeDJESW5pdCA9IHtcclxuICAgICAgICAgICAgZTogY29vcmRzLnggLSBwb2ludFNpemUgLyAyLFxyXG4gICAgICAgICAgICBmOiBjb29yZHMueSAtIHBvaW50U2l6ZSAvIDJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBjYW52YXNQYXR0ZXJuOiBDYW52YXNQYXR0ZXJuO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNhbnZhc1BhdHRlcm4gPSBkcmF3KHBvaW50U2hhcGUsICdyZ2JhKDAsMCwwLDApJywgY29sb3IsIHBvaW50U2l6ZSAqIDIpO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7cG9pbnRTaGFwZX0gaXMgaW52YWxpZCBzaGFwZS4gU2VlIGRvY3VtZW50YXRpb24uYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FudmFzUGF0dGVybi5zZXRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjYW52YXNQYXR0ZXJuO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KHRyYW5zZm9ybS5lLCB0cmFuc2Zvcm0uZiwgcG9pbnRTaXplLCBwb2ludFNpemUpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDaGFydE9wdGlvbnMsIE11bHRpQ2hhcnRPcHRpb25zLCBTZXJpZURhdGFDb21tb24gfSBmcm9tIFwiLi4vLi4vbW9kZWwvdHlwZXNcIjtcclxuaW1wb3J0IHsgQm94RnJhbWVBbmRUZXh0Q29vcmRzLCBGcmFtZVJlY3QsIFRpY2tJbmZvIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCB7IHBhcnNlRmxvYXRXaXRob3V0UGFkZGluZyB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5pbXBvcnQgTGluZVBsb3RUb29scyBmcm9tIFwiLi9MaW5lUGxvdFRvb2xzXCI7XHJcbmltcG9ydCBQYXR0ZXJuUGxvdFRvb2xzIGZyb20gXCIuL1BhdHRlcm5QbG90VG9vbHNcIjtcclxuaW1wb3J0IFBvaW50UGxvdFRvb2xzIGZyb20gXCIuL1BvaW50UGxvdFRvb2xzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbG90S2l0IHtcclxuICAgIHJlYWRvbmx5IENIQVJUX0JPUkRFUl9DT0xPUiA9ICcjMjAyMDIwJztcclxuICAgIHJlYWRvbmx5IERJVklERVJfTElORV9DT0xPUiA9ICcjNDg0ODQ4JztcclxuICAgIHJlYWRvbmx5IEhPUklaT05UQUxfTElORV9DT0xPUiA9ICcjODA4MDgwJztcclxuXHJcbiAgICByZWFkb25seSBUSVRMRV9BUkVBX01VTFRJUElFUiA9IDAuMTtcclxuICAgIHJlYWRvbmx5IExFR0VORF9BUkVBX01VTFRJUElFUiA9IDAuMTtcclxuICAgIHJlYWRvbmx5IExFR0VORF9QQURESU5HX01VTFRJUElFUiA9IDE7XHJcbiAgICByZWFkb25seSBTRVJJRV9MRUdFTkRfUEVSX0xFVkVMID0gNTtcclxuICAgIHJlYWRvbmx5IFNFUklFX1BBRERJTkdfTVVMVElQSUVSID0gMC4xNTtcclxuICAgIHJlYWRvbmx5IExBQkVMU19BUkVBX01VTFRJUElFUiA9IDAuMDU7XHJcbiAgICByZWFkb25seSBNT1NUX1RJQ0tTID0gMTA7XHJcbiAgICByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHJlYWRvbmx5IHBsb3RUeXBlOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBsaW5lVG9vbHM6IExpbmVQbG90VG9vbHM7XHJcbiAgICByZWFkb25seSBwYXR0ZXJuVG9vbHM6IFBhdHRlcm5QbG90VG9vbHM7XHJcbiAgICByZWFkb25seSBwb2ludFRvb2xzOiBQb2ludFBsb3RUb29scztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcGxvdFR5cGU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xyXG4gICAgICAgIHRoaXMucGxvdFR5cGUgPSBwbG90VHlwZTtcclxuICAgICAgICB0aGlzLmxpbmVUb29scyA9IG5ldyBMaW5lUGxvdFRvb2xzKGN0eCk7XHJcbiAgICAgICAgdGhpcy5wYXR0ZXJuVG9vbHMgPSBuZXcgUGF0dGVyblBsb3RUb29scyhjdHgpO1xyXG4gICAgICAgIHRoaXMucG9pbnRUb29scyA9IG5ldyBQb2ludFBsb3RUb29scyhjdHgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyBjYW52YXMgYW5kIHNwbGl0cyB3aG9sZSBjYW52YXMgaW4gdGhyZWUgYXJlYXM6XHJcbiAgICAgKiAtIFRpdGxlIGFyZWEgKGB0aXRsZWApLFxyXG4gICAgICogLSBDaGFydCBhcmVhIChgY29udGVudGApLFxyXG4gICAgICogLSBMZWdlbmQgYXJlYSAoYGxlZ2VuZGApXHJcbiAgICAgKiBcclxuICAgICAqIFRpdGxlIGFuZCBMZWdlbmQgZnJhbWVzIGFyZSBjb21wbGV0bHkgZHJhd24uIENoYXJ0IGZyYW1lIGlzIGVtcHR5LlxyXG4gICAgICogQHJldHVybnMgVGhvc2UgdGhyZWUgZnJhbWVzLlxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBwcmVwYXJlQ2hhcnRGb3JEcmF3aW5nKGNoYXJ0T3B0aW9uczogQ2hhcnRPcHRpb25zIHwgTXVsdGlDaGFydE9wdGlvbnMsIHNlcmllczogU2VyaWVEYXRhQ29tbW9uW10pOiBGcmFtZVJlY3RbXSB7XHJcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjdHguY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3QgZnJhbWVzOiBGcmFtZVJlY3RbXSA9IFtdO1xyXG4gICAgICAgIGxldCBlbXB0eUZyYW1lID0gdGhpcy5nZXRGcmFtZSgwLCAwLCB3aWR0aCwgaGVpZ2h0LCAnY29udGVudCcpO1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlRnJhbWUoZW1wdHlGcmFtZSwgdGhpcy5ESVZJREVSX0xJTkVfQ09MT1IsIDUpO1xyXG5cclxuICAgICAgICBpZiAoY2hhcnRPcHRpb25zLnNob3dUaXRsZSAmJiBjaGFydE9wdGlvbnMudGl0bGUpIHtcclxuICAgICAgICAgICAgY29uc3QgdGl0bGVGcmFtZSA9IHRoaXMuZ2V0VGl0bGVGcmFtZShlbXB0eUZyYW1lKTtcclxuICAgICAgICAgICAgZnJhbWVzLnB1c2godGl0bGVGcmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1RpdGxlKGNoYXJ0T3B0aW9ucy50aXRsZSwgdGl0bGVGcmFtZSk7XHJcbiAgICAgICAgICAgIGVtcHR5RnJhbWUgPSB0aGlzLmN1dEZyYW1lcyhlbXB0eUZyYW1lLCB0aXRsZUZyYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFydE9wdGlvbnMuc2hvd0xlZ2VuZCkge1xyXG4gICAgICAgICAgICBjb25zdCBsZWdlbmRGcmFtZSA9IHRoaXMuZ2V0TGVnZW5kRnJhbWUoZW1wdHlGcmFtZSwgc2VyaWVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKGxlZ2VuZEZyYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3TGVnZW5kKHNlcmllcywgbGVnZW5kRnJhbWUpO1xyXG4gICAgICAgICAgICBlbXB0eUZyYW1lID0gdGhpcy5jdXRGcmFtZXMoZW1wdHlGcmFtZSwgbGVnZW5kRnJhbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnJhbWVzLnB1c2goZW1wdHlGcmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGZyYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFRpdGxlRnJhbWUoZnJhbWU6IEZyYW1lUmVjdCk6IEZyYW1lUmVjdCB7XHJcbiAgICAgICAgY29uc3QgeyB4LCB5LCB3LCBoIH0gPSBmcmFtZTtcclxuICAgICAgICBjb25zdCBoU3BhY2UgPSBoICogdGhpcy5USVRMRV9BUkVBX01VTFRJUElFUjtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRGcmFtZSh4LCB5LCB3LCBoU3BhY2UsICd0aXRsZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TGVnZW5kRnJhbWUoZnJhbWU6IEZyYW1lUmVjdCwgc2VyaWVDb3VudDogbnVtYmVyKTogRnJhbWVSZWN0IHtcclxuICAgICAgICBjb25zdCB7IHgsIHksIHcsIGggfSA9IGZyYW1lO1xyXG4gICAgICAgIGNvbnN0IGRlbHRhID0gc2VyaWVDb3VudCA+PSAxMCA/IE1hdGguc3FydCgoc2VyaWVDb3VudCAtIDEwKSAvIDEwKSA6IDA7XHJcbiAgICAgICAgY29uc3QgaFNwYWNlID0gaCAqICgwLjEgKyBkZWx0YSAqIHRoaXMuTEVHRU5EX0FSRUFfTVVMVElQSUVSKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRGcmFtZSh4LCB5ICsgaCAtIGhTcGFjZSwgdywgaFNwYWNlLCAnbGVnZW5kJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG91bGQgYmUgcmVtb3ZlZCBhbmQgaW5zdGVhZCBnZXRMYWJlbHNGcmFtZUZpbGxlZCBzaG91bGQgYmUgdXNlZFxyXG4gICAgICogQnV0Li4uIE5vIHRpbWUgZm9yIGltcGxlbWVudGF0aW9uLi4uXHJcbiAgICAgKiBAcmV0dXJucyBsYWJlbCBmcmFtZSBiYXNpYy5cclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldEJhc2ljTGFiZWxzRnJhbWUoZnJhbWU6IEZyYW1lUmVjdCk6IEZyYW1lUmVjdCB7XHJcbiAgICAgICAgY29uc3QgeyB4LCB5LCB3LCBoIH0gPSBmcmFtZTtcclxuICAgICAgICBjb25zdCBoU3BhY2UgPSBoICogdGhpcy5MQUJFTFNfQVJFQV9NVUxUSVBJRVI7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnJhbWUoeCwgeSArIGggLSBoU3BhY2UsIHcsIGhTcGFjZSwgJ2xhYmVscycpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRGcmFtZSh4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIGlkPzogc3RyaW5nKTogRnJhbWVSZWN0IHtcclxuICAgICAgICByZXR1cm4geyBpZCwgeCwgeSwgdywgaCB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjdXRGcmFtZXMoZnJhbWU6IEZyYW1lUmVjdCwgY3V0OiBGcmFtZVJlY3QpOiBGcmFtZVJlY3Qge1xyXG4gICAgICAgIGNvbnN0IGggPSBmcmFtZS5oID09PSBjdXQuaCA/IGZyYW1lLmggOiBmcmFtZS5oIC0gY3V0Lmg7XHJcbiAgICAgICAgY29uc3QgeSA9IGZyYW1lLnkgPT09IGN1dC55ID8gZnJhbWUueSArIGN1dC5oIDogZnJhbWUueTtcclxuICAgICAgICBjb25zdCB7IHgsIHcsIGlkIH0gPSBmcmFtZTtcclxuICAgICAgICAvL2NvbnN0IHggPSBmcmFtZS54ID09PSBjdXQueCA/IGZyYW1lLnggOiBmcmFtZS54ICsgY3V0Lnc7XHJcbiAgICAgICAgLy9jb25zdCB3ID0gZnJhbWUudyA9PT0gY3V0LncgPyBmcmFtZS53IDogZnJhbWUudyAtIGN1dC53O1xyXG4gICAgICAgIHJldHVybiB7IHgsIHksIHcsIGgsIGlkIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGUgd2lkdGggb2YgT1kgdmFsdWVzIGluIGNvbnRlbnQgZnJhbWUuXHJcbiAgICAgKiBAcGFyYW0gdGlja0luZm8gLSBwcmV2aW91c2x5IGNhbGN1bGF0ZWQgVGlja0luZm9cclxuICAgICAqIEBwYXJhbSBtaW5WYWwgLSB2YWx1ZSB3aXRoIHdoaWNoIHRpY2tJbmZvIGJlZ2luc1xyXG4gICAgICogQHBhcmFtIGZvbnQgLSBmb250IG9mIE9ZIHZhbHVlc1xyXG4gICAgICogQHJldHVybnMgd2lkdGggb2YgT1kgdmFsdWVzIGluIGNvbnRlbnQgZnJhbWVcclxuICAgICovXHJcbiAgICBwdWJsaWMgZ2V0V2lkdGhPZlZhbHVlc1BhbmUodGlja0luZm86IFRpY2tJbmZvLCBtaW5WYWw6IG51bWJlciwgZm9udDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCB7IHRpY2tDb3VudCwgdGlja0hlaWdodCB9ID0gdGlja0luZm87XHJcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IGAke2ZvbnR9cHggc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgY29uc3QgeUF4aXNUZXh0TWF4V2lkdGggPSB0aGlzLm1lYXN1cmVUaWNrVGV4dE1heFdpZHRoKHRpY2tDb3VudCwgdGlja0hlaWdodCwgbWluVmFsKTtcclxuICAgICAgICByZXR1cm4geUF4aXNUZXh0TWF4V2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHR3byBmcmFtZXMgZnJvbSBwbG90IGZyYW1lXHJcbiAgICAgKiAtIENvbnRlbnQgZnJhbWUgKGBjb250ZW50YCksXHJcbiAgICAgKiAtIExhYmVscyBmcmFtZSAoYGxhYmVsc2ApLFxyXG4gICAgICogQHBhcmFtIHBsb3RGcmFtZVxyXG4gICAgICogQHBhcmFtIG95V2lkdGggLSB3aWR0aCBvZiBjYWxjdWxhdGVkIHBhbmUgZm9yIE9ZIHZhbHVlc1xyXG4gICAgICogQHBhcmFtIGxhYmVscyAtIGFycmF5IG9mIGxhYmVsc1xyXG4gICAgICogQHBhcmFtIGFyZWFXaWR0aCAtIHdpZHRoIG9mIHNpbmdsZSBhcmVhXHJcbiAgICAgKiBAcGFyYW0gYXJlYXMgLSBudW1iZXIgb2YgYWxsIGFyZWFzXHJcbiAgICAgKiBAcmV0dXJucyB3aWR0aCBvZiBPWSB2YWx1ZXMgaW4gY29udGVudCBmcmFtZVxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBnZXRMYWJlbHNGcmFtZUZpbGxlZChwbG90RnJhbWU6IEZyYW1lUmVjdCwgb3lXaWR0aDogbnVtYmVyLCBsYWJlbHM6IHN0cmluZ1tdLCBhcmVhV2lkdGg6IG51bWJlciwgYXJlYXM6IG51bWJlcik6IEZyYW1lUmVjdFtdIHtcclxuICAgICAgICAvLyBHZXQgaW5pdGlhbCBmcmFtZSBoZWlnaHQgYW5kIGxvbmdlc3QgbGFiZWwgc3RyaW5nXHJcbiAgICAgICAgY29uc3QgTUFYX0xPT1AgPSA0O1xyXG4gICAgICAgIGNvbnN0IG51bSA9IE1hdGgubWF4KC4uLmxhYmVscy5tYXAobGFiZWwgPT4gbGFiZWwubGVuZ3RoKSk7XHJcbiAgICAgICAgY29uc3QgdHh0ID0gbGFiZWxzLmZpbmQoZSA9PiBlLmxlbmd0aCA9PT0gbnVtKTtcclxuICAgICAgICBsZXQgbGFiZWxGcmFtZUggPSBwbG90RnJhbWUuaCAqIHRoaXMuTEFCRUxTX0FSRUFfTVVMVElQSUVSO1xyXG5cclxuICAgICAgICAvLyBTZXQgaW5pdGlhbCBmb250IGFuZCBtZWFzdXJlIHRleHRcclxuICAgICAgICB0aGlzLmN0eC5mb250ID0gYCR7bGFiZWxGcmFtZUh9cHggc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgbGV0IG1lYXN1cmVtZW50ID0gdGhpcy5jdHgubWVhc3VyZVRleHQodHh0KTtcclxuXHJcbiAgICAgICAgLy8gSWYgbWVhc3VyZWQgdGV4dCBpcyB0b28gbGFyZ2UsIHRyeSB0byBzaHJpbmsgaXQgZmV3IHRpbWVzXHJcbiAgICAgICAgbGV0IGlMb29wID0gMTtcclxuICAgICAgICBmb3IgKDsgaUxvb3AgPCBNQVhfTE9PUCAmJiBtZWFzdXJlbWVudC53aWR0aCA+IGFyZWFXaWR0aDsgaUxvb3ArKykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdGb250U2l6ZSA9IE1hdGgubWF4KGxhYmVsRnJhbWVIIC0gaUxvb3AsIDUpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5mb250ID0gYCR7bmV3Rm9udFNpemV9cHggc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgICAgIG1lYXN1cmVtZW50ID0gdGhpcy5jdHgubWVhc3VyZVRleHQodHh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHdpZHRoID0gbWVhc3VyZW1lbnQud2lkdGg7XHJcblxyXG4gICAgICAgIC8vIFNhdmUgY29udGV4dCBzdGF0ZVxyXG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcclxuXHJcbiAgICAgICAgLy8gSWYgc2hyaW5raW5nIGRpZG4ndCB3b3JrIC0gaXRzIHRpbWUgdG8gcm90YXRlIGFsbCBsYWJlbHMgOTAgZGVncmVlc1xyXG4gICAgICAgIGNvbnN0IHJvdCA9IGlMb29wID09PSBNQVhfTE9PUDtcclxuICAgICAgICBjb25zdCBST1RBVEVEX0hFSUdIVF9BRERJVElPTkFMX01VTFRJUCA9IDAuMTtcclxuICAgICAgICBpZiAocm90KSB7XHJcbiAgICAgICAgICAgIGxhYmVsRnJhbWVIID0gKDEgKyBST1RBVEVEX0hFSUdIVF9BRERJVElPTkFMX01VTFRJUCkgKiBtZWFzdXJlbWVudC53aWR0aDtcclxuICAgICAgICAgICAgd2lkdGggPSBtZWFzdXJlbWVudC5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERyYXcgbGFiZWxzXHJcbiAgICAgICAgY29uc3QgeEFyZWFBZGRpdGlvbmFsID0gKGFyZWFXaWR0aCAtIHdpZHRoKSAvIDI7XHJcbiAgICAgICAgY29uc3QgeUFyZWFBZGRpdGlvbmFsID0gKGxhYmVsRnJhbWVIIC0gbWVhc3VyZW1lbnQuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQpIC8gMjtcclxuXHJcbiAgICAgICAgY29uc3QgeEFyZWFCZWdpbm5pbmcgPSAocGxvdEZyYW1lLnggKyBveVdpZHRoKVxyXG4gICAgICAgICAgICArIChyb3QgPyAyICogeEFyZWFBZGRpdGlvbmFsIDogeEFyZWFBZGRpdGlvbmFsKTtcclxuICAgICAgICBjb25zdCB5QXJlYSA9IHBsb3RGcmFtZS55ICsgcGxvdEZyYW1lLmhcclxuICAgICAgICAgICAgLSAocm90ID8gbGFiZWxGcmFtZUggKiBST1RBVEVEX0hFSUdIVF9BRERJVElPTkFMX01VTFRJUCAqIDAuNSA6IHlBcmVhQWRkaXRpb25hbCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3R4LnRyYW5zbGF0ZSh4QXJlYUJlZ2lubmluZywgeUFyZWEpO1xyXG4gICAgICAgIGlmIChyb3QpIHRoaXMuY3R4LnJvdGF0ZSgtTWF0aC5QSSAvIDIpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGFyZWFzOyBhKyspIHtcclxuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFRleHQobGFiZWxzW2FdLCAwLCAwKTtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSByb3QgPyBbMCwgYXJlYVdpZHRoXSA6IFthcmVhV2lkdGgsIDBdO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC50cmFuc2xhdGUodHJhbnNsYXRpb25bMF0sIHRyYW5zbGF0aW9uWzFdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlc3RvcmUgZGVmYXVsdCBjb250ZXh0IHN0YXRlXHJcbiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZnJhXHJcbiAgICAgICAgY29uc3QgY29udGVudEZyYW1lID0ge1xyXG4gICAgICAgICAgICBpZDogJ2NvbnRlbnQnLFxyXG4gICAgICAgICAgICB4OiBwbG90RnJhbWUueCxcclxuICAgICAgICAgICAgeTogcGxvdEZyYW1lLnksXHJcbiAgICAgICAgICAgIHc6IHBsb3RGcmFtZS53LFxyXG4gICAgICAgICAgICBoOiBwbG90RnJhbWUuaCAtIGxhYmVsRnJhbWVIXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBsYWJlbHNGcmFtZSA9IHtcclxuICAgICAgICAgICAgaWQ6ICdsYWJlbHMnLFxyXG4gICAgICAgICAgICB4OiBwbG90RnJhbWUueCxcclxuICAgICAgICAgICAgeTogY29udGVudEZyYW1lLnkgKyBjb250ZW50RnJhbWUuaCxcclxuICAgICAgICAgICAgdzogY29udGVudEZyYW1lLncsXHJcbiAgICAgICAgICAgIGg6IGxhYmVsRnJhbWVIXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gW2NvbnRlbnRGcmFtZSwgbGFiZWxzRnJhbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3Ryb2tlRnJhbWUoZnJhbWU6IEZyYW1lUmVjdCwgY29sb3I6IHN0cmluZywgd2lkdGg/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHdpZHRoID8/IDE7XHJcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlUmVjdChmcmFtZS54LCBmcmFtZS55LCBmcmFtZS53LCBmcmFtZS5oKTtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtZWFzdXJlVGlja1RleHRNYXhXaWR0aCh0aWNrQ291bnQ6IG51bWJlciwgdGlja0hlaWdodDogbnVtYmVyLCBtaW46IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IG1heE1lYXN1cmVtZW50ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0aWNrQ291bnQgKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbWVhc3VyZW1lbnQgPSB0aGlzLmN0eC5tZWFzdXJlVGV4dChcclxuICAgICAgICAgICAgICAgIFN0cmluZyhcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0V2l0aG91dFBhZGRpbmcobWluICsgKHRpY2tDb3VudCArIDEgLSBpKSAqIHRpY2tIZWlnaHQsIDQpXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICkud2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChtZWFzdXJlbWVudCA+IG1heE1lYXN1cmVtZW50KVxyXG4gICAgICAgICAgICAgICAgbWF4TWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heE1lYXN1cmVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0d28gZnJhbWVzIGZyb20gcGxvdCBmcmFtZVxyXG4gICAgICogLSBDb250ZW50IGZyYW1lIChgY29udGVudGApLFxyXG4gICAgICogLSBMYWJlbHMgZnJhbWUgKGBsYWJlbHNgKSxcclxuICAgICAqIEBwYXJhbSBmcmFtZSAtIGZyYW1lIGRlZGljYXRlZCB0byBPWSB2YWx1ZXMgYW5kIHBsb3QgY29udGVudCAod2l0aG91dCBsYWJlbHMgZnJhbWUpXHJcbiAgICAgKiBAcGFyYW0gdGlja0luZm8gLSBwcmV2aW91c2x5IGNhbGN1bGF0ZWQgVGlja0luZm9cclxuICAgICAqIEBwYXJhbSBtaW4gLSBudW1iZXIgZnJvbSB3aGljaCB0aWNraW5nIHNob3VsZCBiZWdpblxyXG4gICAgICogQHBhcmFtIGZvbnQgLSBmb250IG9mIE9ZIHZhbHVlc1xyXG4gICAgICogQHJldHVybnMgZnJhbWUgb2Ygb25seSBwbG90dGluZyBjb250ZW50IHRvIGJlIGZpbGxlZCBpbiBmdXR1cmVcclxuICAgICovXHJcbiAgICBwdWJsaWMgZHJhd0dyaWRIb3Jpem9udGFsTGluZXMoZnJhbWU6IEZyYW1lUmVjdCwgdGlja0luZm86IFRpY2tJbmZvLCBtaW46IG51bWJlciwgZm9udDogbnVtYmVyKTogRnJhbWVSZWN0IHtcclxuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCB7IHRpY2tDb3VudCwgdGlja0hlaWdodCB9ID0gdGlja0luZm87XHJcbiAgICAgICAgY29uc3Qgc2luZ2xlSCA9IGZyYW1lLmggLyAodGlja0NvdW50ICsgMSk7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5IT1JJWk9OVEFMX0xJTkVfQ09MT1I7XHJcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtmb250fXB4IHNhbnMtc2VyaWZgO1xyXG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gdGhpcy5tZWFzdXJlVGlja1RleHRNYXhXaWR0aCh0aWNrQ291bnQsIHRpY2tIZWlnaHQsIG1pbik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGlja0NvdW50ICsgMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBmcmFtZS55ICsgc2luZ2xlSCAqIGk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IFN0cmluZyhwYXJzZUZsb2F0V2l0aG91dFBhZGRpbmcobWluICsgKHRpY2tDb3VudCArIDEgLSBpKSAqIHRpY2tIZWlnaHQsIDQpKTtcclxuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCB9ID0gY3R4Lm1lYXN1cmVUZXh0KHZhbCk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dCh2YWwsIGZyYW1lLnggKyAobWF4V2lkdGggLSB3aWR0aCksIHkpO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oZnJhbWUueCArIG1heFdpZHRoLCB5KTtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbyhmcmFtZS54ICsgZnJhbWUudywgeSk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiBmcmFtZS54ICsgbWF4V2lkdGgsXHJcbiAgICAgICAgICAgIHk6IGZyYW1lLnksXHJcbiAgICAgICAgICAgIHc6IGZyYW1lLncgLSBtYXhXaWR0aCxcclxuICAgICAgICAgICAgaDogZnJhbWUuaFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3VGl0bGUodGl0bGU6IHN0cmluZywgdGl0bGVGcmFtZTogRnJhbWVSZWN0KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyB4LCB5LCB3LCBoIH0gPSB0aXRsZUZyYW1lO1xyXG5cclxuICAgICAgICBjdHguZm9udCA9IGAke01hdGguZmxvb3IoaCAvIDIpfXB4IHNhbnMtc2VyaWZgO1xyXG4gICAgICAgIGxldCB0ZXh0TWVhc3VyZW1lbnQgPSBjdHgubWVhc3VyZVRleHQodGl0bGUpO1xyXG4gICAgICAgIGxldCB0ZXh0V2lkdGggPSB0ZXh0TWVhc3VyZW1lbnQud2lkdGg7XHJcblxyXG4gICAgICAgIGlmICh0ZXh0V2lkdGggPiB3KSB7XHJcbiAgICAgICAgICAgIGN0eC5mb250ID0gYCR7TWF0aC5mbG9vcigoaCAvIDIpICogKHcgLyB0ZXh0V2lkdGgpKX1weCBzYW5zLXNlcmlmYDtcclxuICAgICAgICAgICAgdGV4dE1lYXN1cmVtZW50ID0gY3R4Lm1lYXN1cmVUZXh0KHRpdGxlKTtcclxuICAgICAgICAgICAgdGV4dFdpZHRoID0gdGV4dE1lYXN1cmVtZW50LndpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGV4dEhlaWdodCA9IHRleHRNZWFzdXJlbWVudC5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcclxuICAgICAgICBjb25zdCB0ZXh0UG9zaXRpb25YID0geCArIHcgLyAyIC0gdGV4dFdpZHRoIC8gMjtcclxuICAgICAgICBjb25zdCB0ZXh0UG9zaXRpb25ZID0geSArIGggLyAyICsgdGV4dEhlaWdodCAvIDI7XHJcbiAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlLCB0ZXh0UG9zaXRpb25YLCB0ZXh0UG9zaXRpb25ZLCB3KTtcclxuICAgICAgICB0aGlzLnN0cm9rZUZyYW1lKHRpdGxlRnJhbWUsIHRoaXMuRElWSURFUl9MSU5FX0NPTE9SLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRyYXdMZWdlbmQoc2VyaWVzOiBTZXJpZURhdGFDb21tb25bXSwgbGVnZW5kRnJhbWU6IEZyYW1lUmVjdCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlRnJhbWUobGVnZW5kRnJhbWUsIHRoaXMuRElWSURFUl9MSU5FX0NPTE9SLCAxKTtcclxuICAgICAgICBjb25zdCBsZXZlbHMgPSBNYXRoLmNlaWwoc2VyaWVzLmxlbmd0aCAvIHRoaXMuU0VSSUVfTEVHRU5EX1BFUl9MRVZFTCk7XHJcbiAgICAgICAgY29uc3QgZnJhbWVXID0gbGVnZW5kRnJhbWUudyAvIE1hdGgubWluKHNlcmllcy5sZW5ndGgsIHRoaXMuU0VSSUVfTEVHRU5EX1BFUl9MRVZFTCk7XHJcbiAgICAgICAgY29uc3QgZnJhbWVIID0gbGVnZW5kRnJhbWUuaCAvIGxldmVscztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3U2luZ2xlU2VyaWVMZWdlbmQoe1xyXG4gICAgICAgICAgICAgICAgeDogbGVnZW5kRnJhbWUueCArIGZyYW1lVyAqIChpICUgdGhpcy5TRVJJRV9MRUdFTkRfUEVSX0xFVkVMKSxcclxuICAgICAgICAgICAgICAgIHk6IGxlZ2VuZEZyYW1lLnkgKyBmcmFtZUggKiAoTWF0aC5mbG9vcihpIC8gdGhpcy5TRVJJRV9MRUdFTkRfUEVSX0xFVkVMKSksXHJcbiAgICAgICAgICAgICAgICB3OiBmcmFtZVcsXHJcbiAgICAgICAgICAgICAgICBoOiBmcmFtZUhcclxuICAgICAgICAgICAgfSwgc2VyaWVzW2ldLCBzZXJpZXMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGRyYXdTaW5nbGVTZXJpZUxlZ2VuZChmcmFtZTogRnJhbWVSZWN0LCBzZXJpZTogU2VyaWVEYXRhQ29tbW9uLCBzZXJpZUNvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBib3hGcmFtZUFuZFRleHRDb29yZHMgPSB0aGlzLnByZXBhcmVTaW5nbGVTZXJpZUxlZ2VuZChmcmFtZSwgc2VyaWUsIHNlcmllQ291bnQpO1xyXG4gICAgICAgIHRoaXMucGVyZm9ybURyYXdTaW5nbGVTZXJpZUxlZ2VuZChib3hGcmFtZUFuZFRleHRDb29yZHMsIHNlcmllKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgcHJlcGFyZVNpbmdsZVNlcmllTGVnZW5kKGZyYW1lOiBGcmFtZVJlY3QsIHNlcmllOiBTZXJpZURhdGFDb21tb24sIHNlcmllQ291bnQ6IG51bWJlcik6IEJveEZyYW1lQW5kVGV4dENvb3JkcyB7XHJcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBzZXJpZTtcclxuXHJcbiAgICAgICAgY29uc3Qgc0VkZ2VPdXRlckJveCA9IE1hdGgubWluKGZyYW1lLncsIGZyYW1lLmgpO1xyXG4gICAgICAgIGNvbnN0IHNQYWRkaW5nID0gc0VkZ2VPdXRlckJveCAqIHRoaXMuU0VSSUVfUEFERElOR19NVUxUSVBJRVI7XHJcbiAgICAgICAgY29uc3Qgc0VkZ2VJbm5lckJveCA9IHNFZGdlT3V0ZXJCb3ggLSAyICogc1BhZGRpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vcmVUaGFuT25lTGV2ZWwgPSBzZXJpZUNvdW50ID4gdGhpcy5TRVJJRV9MRUdFTkRfUEVSX0xFVkVMO1xyXG4gICAgICAgIGNvbnN0IGZvbnREaXZpZGVyID0gbW9yZVRoYW5PbmVMZXZlbCA/IDIgOiAzO1xyXG4gICAgICAgIGN0eC5mb250ID0gYCR7TWF0aC5mbG9vcihzRWRnZU91dGVyQm94IC8gZm9udERpdmlkZXIpfXB4IHNhbnMtc2VyaWZgO1xyXG5cclxuICAgICAgICBjb25zdCB7IHdpZHRoLCBhY3R1YWxCb3VuZGluZ0JveEFzY2VudCB9ID0gY3R4Lm1lYXN1cmVUZXh0KG5hbWUpO1xyXG4gICAgICAgIGNvbnN0IG92ZXJsYXAgPSB3aWR0aCA+IGZyYW1lLncgLSBzRWRnZU91dGVyQm94O1xyXG4gICAgICAgIGNvbnN0IGJveEFuZFRleHRXID0gd2lkdGggKyBzRWRnZU91dGVyQm94O1xyXG5cclxuICAgICAgICBjb25zdCBib3hGcmFtZSA9IHtcclxuICAgICAgICAgICAgeDogZnJhbWUueCArIChvdmVybGFwIHx8IG1vcmVUaGFuT25lTGV2ZWwgPyBzUGFkZGluZyA6IChmcmFtZS53IC0gYm94QW5kVGV4dFcpIC8gMiksXHJcbiAgICAgICAgICAgIHk6IGZyYW1lLnkgKyBzUGFkZGluZyxcclxuICAgICAgICAgICAgdzogc0VkZ2VJbm5lckJveCxcclxuICAgICAgICAgICAgaDogc0VkZ2VJbm5lckJveFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgdGV4dENvb3JkcyA9IHtcclxuICAgICAgICAgICAgeDogYm94RnJhbWUueCArIHNFZGdlSW5uZXJCb3ggKyBzUGFkZGluZyxcclxuICAgICAgICAgICAgeTogYm94RnJhbWUueSArIChzRWRnZUlubmVyQm94IC8gMikgKyAoYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQgLyAyKSxcclxuICAgICAgICAgICAgbWF4Vzogb3ZlcmxhcCB8fCBtb3JlVGhhbk9uZUxldmVsID8gZnJhbWUudyAtIHNFZGdlT3V0ZXJCb3ggOiAoZnJhbWUudyAtIChmcmFtZS53IC0gYm94QW5kVGV4dFcpIC8gMiAtIHNFZGdlT3V0ZXJCb3gpXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBib3hGcmFtZSxcclxuICAgICAgICAgICAgdGV4dENvb3JkcyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBwZXJmb3JtRHJhd1NpbmdsZVNlcmllTGVnZW5kKGJveEZyYW1lQW5kVGV4dENvb3JkczogQm94RnJhbWVBbmRUZXh0Q29vcmRzLCBzZXJpZTogU2VyaWVEYXRhQ29tbW9uKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKFtcImJhclwiLCBcInBpZVwiLCBcImFyZWFcIl0uaW5jbHVkZXModGhpcy5wbG90VHlwZSkpXHJcbiAgICAgICAgICAgIHRoaXMucGF0dGVyblRvb2xzLnBlcmZvcm1EcmF3U2luZ2xlU2VyaWVMZWdlbmQoYm94RnJhbWVBbmRUZXh0Q29vcmRzLCBzZXJpZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucGxvdFR5cGUgPT09IFwicG9pbnRzXCIpXHJcbiAgICAgICAgICAgIHRoaXMucG9pbnRUb29scy5wZXJmb3JtRHJhd1NpbmdsZVNlcmllTGVnZW5kKGJveEZyYW1lQW5kVGV4dENvb3Jkcywgc2VyaWUpO1xyXG4gICAgICAgIGlmICh0aGlzLnBsb3RUeXBlID09PSBcImxpbmVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVUb29scy5wZXJmb3JtRHJhd1NpbmdsZVNlcmllTGVnZW5kKGJveEZyYW1lQW5kVGV4dENvb3Jkcywgc2VyaWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCBQbG90S2l0IGZyb20gXCIuL3Bsb3RLaXRzL1Bsb3RLaXRcIjtcclxuaW1wb3J0IHsgRGF0YUZvclBsb3QgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFBsb3Qge1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHByb3RlY3RlZCBwbG90S2l0OiBQbG90S2l0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0eXBlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgICAgICB0aGlzLnBsb3RLaXQgPSBuZXcgUGxvdEtpdChjdHgsIHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3KGRhdGE6IERhdGFGb3JQbG90KTogdm9pZDtcclxufSIsImltcG9ydCB7IE11bHRpU2VyaWVQb2ludERhdGEsIFBvaW50LCBTZXJpZU9wdGlvbnNQb2ludCB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgeyBnZXRUaWNrSW5mbyB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5pbXBvcnQgUGxvdCBmcm9tIFwiLi8uLi9QbG90XCI7XHJcbmltcG9ydCB7IERhdGFGb3JQbG90LCBEYXRhRm9yU2VyaWVEcmF3aW5nLCBGcmFtZVJlY3QsIE1pbk1heCwgVmFsdWVUb1BpeGVsTWFwcGVyRnVuYywgVmFsdWVUb1BpeGVsTWFwcGVyT3B0aW9ucyB9IGZyb20gXCIuLy4uL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludFBsb3QgZXh0ZW5kcyBQbG90IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgUElYRUxfUEFERElORyA9IDEwO1xyXG5cclxuICAgIHB1YmxpYyBkcmF3KGRhdGE6IERhdGFGb3JQbG90KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gZGF0YS5zZXJpZXMgYXMgTXVsdGlTZXJpZVBvaW50RGF0YVtdO1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0T3B0aW9ucyA9IGRhdGEuY2hhcnRPcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IGZyYW1lcyA9IHRoaXMucGxvdEtpdC5wcmVwYXJlQ2hhcnRGb3JEcmF3aW5nKGNoYXJ0T3B0aW9ucywgc2VyaWVzKTtcclxuICAgICAgICBsZXQgcGxvdEZyYW1lID0gZnJhbWVzLmZpbmQoZnJhbWUgPT4gZnJhbWUuaWQgPT09ICdjb250ZW50Jyk7XHJcbiAgICAgICAgY29uc3QgbGFiZWxGcmFtZSA9IHRoaXMucGxvdEtpdC5nZXRCYXNpY0xhYmVsc0ZyYW1lKHBsb3RGcmFtZSk7XHJcbiAgICAgICAgcGxvdEZyYW1lID0gdGhpcy5wbG90S2l0LmN1dEZyYW1lcyhwbG90RnJhbWUsIGxhYmVsRnJhbWUpO1xyXG5cclxuICAgICAgICBjb25zdCB4TWluTWF4Rm9yU2VyaWVzID0gdGhpcy5nZXRNaW5NYXhGb3JTZXJpZXMoc2VyaWVzLCAneCcpO1xyXG4gICAgICAgIGNvbnN0IHlNaW5NYXhGb3JTZXJpZXMgPSB0aGlzLmdldE1pbk1heEZvclNlcmllcyhzZXJpZXMsICd5Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpY2tJbmZvID0gZ2V0VGlja0luZm8oMTAsIHlNaW5NYXhGb3JTZXJpZXMubWluLCB5TWluTWF4Rm9yU2VyaWVzLm1heCk7XHJcbiAgICAgICAgY29uc3QgdGlja0NvdW50ID0gdGlja0luZm8udGlja0NvdW50O1xyXG4gICAgICAgIGNvbnN0IHRpY2tGcmFtZSA9IHRoaXMucGxvdEtpdC5kcmF3R3JpZEhvcml6b250YWxMaW5lcyhwbG90RnJhbWUsIHRpY2tJbmZvLCB5TWluTWF4Rm9yU2VyaWVzLm1pbiwgMTgpO1xyXG4gICAgICAgIHBsb3RGcmFtZSA9IHRpY2tGcmFtZTtcclxuICAgICAgICBjb25zdCBzcGFjZUJldHdlZW5UaWNrc1BpeGVsSGVpZ2h0ID0gcGxvdEZyYW1lLmggLyAodGlja0NvdW50ICsgMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHhWYWx1ZVRvUGl4ZWxNYXBwZXJPcHRpb25zOiBWYWx1ZVRvUGl4ZWxNYXBwZXJPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBiZWdpbm5pbmdJblBpeGVsczogcGxvdEZyYW1lLnggKyB0aGlzLlBJWEVMX1BBRERJTkcsXHJcbiAgICAgICAgICAgIHdpZHRoT3JIZWlnaHRJblBpeGVsczogcGxvdEZyYW1lLncgLSAyICogdGhpcy5QSVhFTF9QQURESU5HLFxyXG4gICAgICAgICAgICBtaW5WYWx1ZUZyb21TZXJpZXM6IHhNaW5NYXhGb3JTZXJpZXMubWluLFxyXG4gICAgICAgICAgICBtYXhWYWx1ZUZyb21TZXJpZXM6IHhNaW5NYXhGb3JTZXJpZXMubWF4XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB5VmFsdWVUb1BpeGVsTWFwcGVyT3B0aW9uczogVmFsdWVUb1BpeGVsTWFwcGVyT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgYmVnaW5uaW5nSW5QaXhlbHM6IHBsb3RGcmFtZS55ICsgc3BhY2VCZXR3ZWVuVGlja3NQaXhlbEhlaWdodCxcclxuICAgICAgICAgICAgd2lkdGhPckhlaWdodEluUGl4ZWxzOiBwbG90RnJhbWUuaCAtIHNwYWNlQmV0d2VlblRpY2tzUGl4ZWxIZWlnaHQsXHJcbiAgICAgICAgICAgIG1pblZhbHVlRnJvbVNlcmllczogeU1pbk1heEZvclNlcmllcy5taW4sXHJcbiAgICAgICAgICAgIG1heFZhbHVlRnJvbVNlcmllczogeU1pbk1heEZvclNlcmllcy5tYXhcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHhWYWx1ZVRvUGl4ZWxNYXBwZXJGdW5jID0gdGhpcy54R2V0VmFsdWVUb1BpeGVsTWFwcGVyRnVuYyh4VmFsdWVUb1BpeGVsTWFwcGVyT3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgeVZhbHVlVG9QaXhlbE1hcHBlckZ1bmMgPSB0aGlzLnlHZXRWYWx1ZVRvUGl4ZWxNYXBwZXJGdW5jKHlWYWx1ZVRvUGl4ZWxNYXBwZXJPcHRpb25zKTtcclxuICAgICAgICBjb25zdCBkYXRhRm9yU2VyaWU6IERhdGFGb3JTZXJpZURyYXdpbmcgPSB7XHJcbiAgICAgICAgICAgIHNlcmllcyxcclxuICAgICAgICAgICAgbGFiZWxGcmFtZSxcclxuICAgICAgICAgICAgeU1pbkZvclNlcmllczogeU1pbk1heEZvclNlcmllcy5taW4sXHJcbiAgICAgICAgICAgIG1hcHBlcnM6IHtcclxuICAgICAgICAgICAgICAgIHhGdW5jOiB4VmFsdWVUb1BpeGVsTWFwcGVyRnVuYyxcclxuICAgICAgICAgICAgICAgIHlGdW5jOiB5VmFsdWVUb1BpeGVsTWFwcGVyRnVuY1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnBlcmZvcm1EcmF3aW5nKGRhdGFGb3JTZXJpZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHBlcmZvcm1EcmF3aW5nKGRhdGE6IERhdGFGb3JTZXJpZURyYXdpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IHNlcmllcywgbWFwcGVycywgbGFiZWxGcmFtZSB9ID0gZGF0YTtcclxuICAgICAgICBzZXJpZXMuZm9yRWFjaChzZXJpZSA9PiB7XHJcbiAgICAgICAgICAgIHNlcmllLnBvaW50cy5mb3JFYWNoKHBvaW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcHBlZFBvaW50ID0gdGhpcy5tYXBTcGFjZVBvaW50VG9QaXhlbFBvaW50KHBvaW50LCBtYXBwZXJzLnhGdW5jLCBtYXBwZXJzLnlGdW5jKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxvdEtpdC5wb2ludFRvb2xzLnBlcmZvcm1EcmF3UG9pbnQobWFwcGVkUG9pbnQsIHNlcmllLm9wdGlvbnMgYXMgU2VyaWVPcHRpb25zUG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlcmllLm9wdGlvbnMuc2hvd1ZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1ZhbHVlRm9yUG9pbnQocG9pbnQueCwgbWFwcGVkUG9pbnQueCwgbGFiZWxGcmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TWluTWF4Rm9yU2VyaWVzKHNlcmllczogTXVsdGlTZXJpZVBvaW50RGF0YVtdLCBvZjogJ3gnIHwgJ3knKTogTWluTWF4IHtcclxuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdFNlcmllV2l0aFZhbHVlcyA9IHNlcmllcy5maW5kSW5kZXgoc2VyaWUgPT4gc2VyaWUucG9pbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGlmIChmaXJzdFNlcmllV2l0aFZhbHVlcyA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBvc3NpYmxlTWluTWF4ID0gc2VyaWVzW2ZpcnN0U2VyaWVXaXRoVmFsdWVzXS5wb2ludHNbMF1bb2ZdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdGlhbE1pbk1heCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBmaXJzdFBvc3NpYmxlTWluTWF4LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGZpcnN0UG9zc2libGVNaW5NYXhcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5NYXhSZWR1Y2VGdW5jID0gdGhpcy5taW5NYXhSZWR1Y2VGdW5jRmFjdG9yeShvZik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5NYXhGb3JTZXJpZXNBcnJheSA9IHNlcmllcy5tYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgc2VyaWUgPT4gc2VyaWUucG9pbnRzLnJlZHVjZShtaW5NYXhSZWR1Y2VGdW5jLCBpbml0aWFsTWluTWF4KSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4TWluTWF4Rm9yU2VyaWVzID0gbWluTWF4Rm9yU2VyaWVzQXJyYXkucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbk1heFJlZHVjZUZ1bmMsIG1pbk1heEZvclNlcmllc0FycmF5WzBdXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW46IHhNaW5NYXhGb3JTZXJpZXMueCxcclxuICAgICAgICAgICAgICAgICAgICBtYXg6IHhNaW5NYXhGb3JTZXJpZXMueVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtaW5NYXhSZWR1Y2VGdW5jRmFjdG9yeShvZjogJ3gnIHwgJ3knKSB7XHJcbiAgICAgICAgcmV0dXJuIChwcmV2OiBQb2ludCwgY3VyOiBQb2ludCk6IFBvaW50ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHg6IHByZXYueCA+IGN1cltvZl0gPyBjdXJbb2ZdIDogcHJldi54LFxyXG4gICAgICAgICAgICAgICAgeTogcHJldi55IDwgY3VyW29mXSA/IGN1cltvZl0gOiBwcmV2LnlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgeEdldFZhbHVlVG9QaXhlbE1hcHBlckZ1bmMob3B0OiBWYWx1ZVRvUGl4ZWxNYXBwZXJPcHRpb25zKTogVmFsdWVUb1BpeGVsTWFwcGVyRnVuYyB7XHJcbiAgICAgICAgcmV0dXJuICh2YWwpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gb3B0LmJlZ2lubmluZ0luUGl4ZWxzICsgb3B0LndpZHRoT3JIZWlnaHRJblBpeGVsc1xyXG4gICAgICAgICAgICAgICAgKiAoKHZhbCAtIG9wdC5taW5WYWx1ZUZyb21TZXJpZXMpIC8gKG9wdC5tYXhWYWx1ZUZyb21TZXJpZXMgLSBvcHQubWluVmFsdWVGcm9tU2VyaWVzKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHlHZXRWYWx1ZVRvUGl4ZWxNYXBwZXJGdW5jKG9wdDogVmFsdWVUb1BpeGVsTWFwcGVyT3B0aW9ucyk6IFZhbHVlVG9QaXhlbE1hcHBlckZ1bmMge1xyXG4gICAgICAgIHJldHVybiAodmFsKTogbnVtYmVyID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG9wdC5iZWdpbm5pbmdJblBpeGVscyArIG9wdC53aWR0aE9ySGVpZ2h0SW5QaXhlbHNcclxuICAgICAgICAgICAgICAgICogKDEgLSAodmFsIC0gb3B0Lm1pblZhbHVlRnJvbVNlcmllcykgLyAob3B0Lm1heFZhbHVlRnJvbVNlcmllcyAtIG9wdC5taW5WYWx1ZUZyb21TZXJpZXMpKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBtYXBTcGFjZVBvaW50VG9QaXhlbFBvaW50KHBvaW50OiBQb2ludCwgeE1hcHBlcjogVmFsdWVUb1BpeGVsTWFwcGVyRnVuYywgeU1hcHBlcjogVmFsdWVUb1BpeGVsTWFwcGVyRnVuYyk6IFBvaW50IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiB4TWFwcGVyKHBvaW50LngpLFxyXG4gICAgICAgICAgICB5OiB5TWFwcGVyKHBvaW50LnkpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZHJhd1ZhbHVlRm9yUG9pbnQoeFZhbHVlOiBudW1iZXIsIHhQaXhlbFBvczogbnVtYmVyLCBsYWJlbEZyYW1lOiBGcmFtZVJlY3QpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gU3RyaW5nKHhWYWx1ZSk7XHJcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQgfSA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRleHQpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoU3RyaW5nKHhWYWx1ZSksIHhQaXhlbFBvcyAtIHdpZHRoIC8gMiwgbGFiZWxGcmFtZS55ICsgbGFiZWxGcmFtZS5oIC8gMiArIGFjdHVhbEJvdW5kaW5nQm94QXNjZW50IC8gMik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTZXJpZU9wdGlvbnNMaW5lLCBTZXJpZU9wdGlvbnNQb2ludCB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgUG9pbnRQbG90IGZyb20gXCIuL1BvaW50UGxvdFwiO1xyXG5pbXBvcnQgeyBEYXRhRm9yU2VyaWVEcmF3aW5nIH0gZnJvbSBcIi4vLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVQbG90IGV4dGVuZHMgUG9pbnRQbG90IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgcGVyZm9ybURyYXdpbmcoZGF0YTogRGF0YUZvclNlcmllRHJhd2luZyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgc2VyaWVzLCBtYXBwZXJzLCBsYWJlbEZyYW1lIH0gPSBkYXRhO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBzZXJpZUluZGV4ID0gMDsgc2VyaWVJbmRleCA8IHNlcmllcy5sZW5ndGg7IHNlcmllSW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwb2ludHNJblNlcmllID0gc2VyaWVzW3NlcmllSW5kZXhdLnBvaW50cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChwb2ludHNJblNlcmllIDwgMikgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aDJEKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcG9pbnRzLCBvcHRpb25zIH0gPSBzZXJpZXNbc2VyaWVJbmRleF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gdGhpcy5tYXBTcGFjZVBvaW50VG9QaXhlbFBvaW50KHBvaW50c1swXSwgbWFwcGVycy54RnVuYywgbWFwcGVycy55RnVuYyk7XHJcbiAgICAgICAgICAgIHBhdGgubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3VmFsdWVGb3JQb2ludChwb2ludHNbMF0ueCwgZmlyc3RQb2ludC54LCBsYWJlbEZyYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5wbG90S2l0LnBvaW50VG9vbHMucGVyZm9ybURyYXdQb2ludChmaXJzdFBvaW50LCBvcHRpb25zIGFzIFNlcmllT3B0aW9uc1BvaW50KTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHBvaW50SW5kZXggPSAxOyBwb2ludEluZGV4IDwgcG9pbnRzSW5TZXJpZTsgcG9pbnRJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBwZWRQb2ludCA9IHRoaXMubWFwU3BhY2VQb2ludFRvUGl4ZWxQb2ludChwb2ludHNbcG9pbnRJbmRleF0sIG1hcHBlcnMueEZ1bmMsIG1hcHBlcnMueUZ1bmMpO1xyXG4gICAgICAgICAgICAgICAgcGF0aC5saW5lVG8obWFwcGVkUG9pbnQueCwgbWFwcGVkUG9pbnQueSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdWYWx1ZUZvclBvaW50KHBvaW50c1twb2ludEluZGV4XS54LCBtYXBwZWRQb2ludC54LCBsYWJlbEZyYW1lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxvdEtpdC5wb2ludFRvb2xzLnBlcmZvcm1EcmF3UG9pbnQobWFwcGVkUG9pbnQsIG9wdGlvbnMgYXMgU2VyaWVPcHRpb25zUG9pbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsb3RLaXQubGluZVRvb2xzLnNldExpbmVTdHlsZShvcHRpb25zIGFzIFNlcmllT3B0aW9uc0xpbmUpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UocGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3R4LnNldExpbmVEYXNoKFtdKTtcclxuICAgIH1cclxufSIsImltcG9ydCBBcmVhUGxvdCBmcm9tIFwiLi9wbG90cy9BcmVhUGxvdFwiO1xyXG5pbXBvcnQgQmFyUGxvdCBmcm9tIFwiLi9wbG90cy9CYXJQbG90XCI7XHJcbmltcG9ydCBMaW5lUGxvdCBmcm9tIFwiLi9wbG90cy9MaW5lUGxvdFwiO1xyXG5pbXBvcnQgUGllUGxvdCBmcm9tIFwiLi9wbG90cy9QaWVQbG90XCI7XHJcbmltcG9ydCBQbG90IGZyb20gXCIuL1Bsb3RcIjtcclxuaW1wb3J0IFBvaW50UGxvdCBmcm9tIFwiLi9wbG90cy9Qb2ludFBsb3RcIjtcclxuXHJcbmNvbnN0IHR5cGVUb0NsYXNzUGFpcnMgPSB7XHJcbiAgICBcInBpZVwiOiBQaWVQbG90LFxyXG4gICAgXCJiYXJcIjogQmFyUGxvdCxcclxuICAgIFwicG9pbnRzXCI6IFBvaW50UGxvdCxcclxuICAgIFwibGluZVwiOiBMaW5lUGxvdCxcclxuICAgIFwiYXJlYVwiOiBBcmVhUGxvdFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGxvdFNlcnZhbnQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHR5cGU6IHN0cmluZyk6IFBsb3Qge1xyXG4gICAgY29uc3QgQ2xhc3NSZWYgPSB0eXBlVG9DbGFzc1BhaXJzW3R5cGUgYXMga2V5b2YgdHlwZW9mIHR5cGVUb0NsYXNzUGFpcnNdO1xyXG4gICAgaWYgKENsYXNzUmVmKVxyXG4gICAgICAgIHJldHVybiBuZXcgQ2xhc3NSZWYoY3R4LCB0eXBlKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihgUGxvdHRlciBmb3IgJHt0eXBlfSBpcyBub3QgZGVmaW5lZC5gKTtcclxufSIsImltcG9ydCB7IFNlcmllT3B0aW9uc1NoYXBlLCBTaW5nbGVTZXJpZURhdGEsIFNoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgUGxvdCBmcm9tIFwiLi8uLi9QbG90XCI7XHJcbmltcG9ydCB7IERhdGFGb3JQbG90LCBGcmFtZVJlY3QsIFBpZVBhcnREYXRhIH0gZnJvbSBcIi4vLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBpZVBsb3QgZXh0ZW5kcyBQbG90IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgUkFESVVTX0RJVklERVIgPSAyLjU7XHJcblxyXG4gICAgZHJhdyhkYXRhOiBEYXRhRm9yUGxvdCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNlcmllcyA9IGRhdGEuc2VyaWVzIGFzIFNpbmdsZVNlcmllRGF0YVtdO1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0T3B0aW9ucyA9IGRhdGEuY2hhcnRPcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGZyYW1lcyA9IHRoaXMucGxvdEtpdC5wcmVwYXJlQ2hhcnRGb3JEcmF3aW5nKGNoYXJ0T3B0aW9ucywgc2VyaWVzKTtcclxuICAgICAgICBjb25zdCBwbG90RnJhbWUgPSBmcmFtZXMuZmluZChmcmFtZSA9PiBmcmFtZS5pZCA9PT0gJ2NvbnRlbnQnKTtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5tYXBTZXJpZXNUb1BpZVBhcnREYXRhKHNlcmllcywgY2hhcnRPcHRpb25zLnByZWNlbnRhZ2VWYWx1ZXMgYXMgYm9vbGVhbik7XHJcblxyXG4gICAgICAgIGNvbnN0IHBpZVJhZGl1cyA9IE1hdGgubWluKHBsb3RGcmFtZS53LCBwbG90RnJhbWUuaCkgLyB0aGlzLlJBRElVU19ESVZJREVSO1xyXG4gICAgICAgIGNvbnN0IHBpZUNlbnRlciA9IHtcclxuICAgICAgICAgICAgeDogcGxvdEZyYW1lLnggKyBwbG90RnJhbWUudyAvIDIsXHJcbiAgICAgICAgICAgIHk6IHBsb3RGcmFtZS55ICsgcGxvdEZyYW1lLmggLyAyXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGFjY1JhZGlhbnMgPSAwO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLmZsb29yKHBpZVJhZGl1cyAvIDUpfXB4IHNhbnMtc2VyaWZgO1xyXG5cclxuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1ha2VQaWVQYXJ0UGF0aChwaWVDZW50ZXIueCwgcGllQ2VudGVyLnksIHBpZVJhZGl1cywgYWNjUmFkaWFucywgYWNjUmFkaWFucyArIGVudHJ5LnJhZGlhbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnBsb3RLaXQucGF0dGVyblRvb2xzLmFwcGx5U2hhcGVPckNvbG9yKGN0eCwgZW50cnkuc2hhcGUgYXMgU2hhcGVUeXBlLCBlbnRyeS5jb2xvciBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVudHJ5LmJvcmRlcldpZHRoID09PSAnbnVtYmVyJyAmJiBlbnRyeS5ib3JkZXJXaWR0aCA+IDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZUJvcmRlcihlbnRyeS5ib3JkZXJXaWR0aCk7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5zaG93VmFsdWUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFBpZVZhbHVlKGVudHJ5LnZhbHVlLCBwaWVDZW50ZXIueCwgcGllQ2VudGVyLnksIHBpZVJhZGl1cywgYWNjUmFkaWFucyArIGVudHJ5LnJhZGlhbnMgLyAyLCBwbG90RnJhbWUsIGNoYXJ0T3B0aW9ucy5wcmVjZW50YWdlVmFsdWVzIGFzIGJvb2xlYW4pO1xyXG4gICAgICAgICAgICBhY2NSYWRpYW5zICs9IGVudHJ5LnJhZGlhbnM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtYXBTZXJpZXNUb1BpZVBhcnREYXRhKHNlcmllczogU2luZ2xlU2VyaWVEYXRhW10sIHNob3dQcmVjZW50YWdlcyA9IGZhbHNlKTogUGllUGFydERhdGFbXSB7XHJcbiAgICAgICAgY29uc3QgdG90YWwgPSBzZXJpZXMubWFwKHNlcmllID0+IHNlcmllLnZhbHVlKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcclxuICAgICAgICByZXR1cm4gc2VyaWVzLm1hcChzZXJpZSA9PiAoe1xyXG4gICAgICAgICAgICByYWRpYW5zOiBzZXJpZS52YWx1ZSAqIDIgKiBNYXRoLlBJIC8gdG90YWwsXHJcbiAgICAgICAgICAgIGNvbG9yOiBzZXJpZS5vcHRpb25zLmNvbG9yLFxyXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogKHNlcmllLm9wdGlvbnMgYXMgU2VyaWVPcHRpb25zU2hhcGUpLmJvcmRlcldpZHRoLFxyXG4gICAgICAgICAgICBzaGFwZTogKHNlcmllLm9wdGlvbnMgYXMgU2VyaWVPcHRpb25zU2hhcGUpLnNoYXBlLFxyXG4gICAgICAgICAgICBzaG93VmFsdWU6IHNlcmllLm9wdGlvbnMuc2hvd1ZhbHVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogc2hvd1ByZWNlbnRhZ2VzID8gc2VyaWUudmFsdWUgLyB0b3RhbCA6IHNlcmllLnZhbHVlXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZVBpZVBhcnRQYXRoKHhDZW50ZXI6IG51bWJlciwgeUNlbnRlcjogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHgubW92ZVRvKHhDZW50ZXIsIHlDZW50ZXIpO1xyXG4gICAgICAgIHRoaXMuY3R4LmFyYyh4Q2VudGVyLCB5Q2VudGVyLCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcclxuICAgICAgICB0aGlzLmN0eC5saW5lVG8oeENlbnRlciwgeUNlbnRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdHJva2VCb3JkZXIod2lkdGg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkUGllVmFsdWUodmFsdWU6IG51bWJlciwgeENlbnRlcjogbnVtYmVyLCB5Q2VudGVyOiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCByYWRpYW5zOiBudW1iZXIsIHBsb3RGcmFtZTogRnJhbWVSZWN0LCBwcmVjZW50YWdlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IHByZWNlbnRhZ2UgPyBgJHsodmFsdWUgKiAxMDApLnRvUHJlY2lzaW9uKDQpfSVgIDogYCR7dmFsdWV9YDtcclxuICAgICAgICBjb25zdCB7IHdpZHRoLCBhY3R1YWxCb3VuZGluZ0JveEFzY2VudCB9ID0gdGhpcy5jdHgubWVhc3VyZVRleHQodGV4dCk7XHJcbiAgICAgICAgY29uc3QgbWF4VGV4dFdpZHRoID0gKHBsb3RGcmFtZS53IC8gMikgLSByYWRpdXM7XHJcblxyXG4gICAgICAgIGNvbnN0IHhQb2ludE9uUGllID0geENlbnRlciArIE1hdGguY29zKHJhZGlhbnMpICogcmFkaXVzO1xyXG4gICAgICAgIGNvbnN0IHggPSB4UG9pbnRPblBpZSAtIChyYWRpYW5zID4gKE1hdGguUEkgLyAyKSAmJiByYWRpYW5zIDwgKE1hdGguUEkgKiAxLjUpID8gTWF0aC5taW4obWF4VGV4dFdpZHRoLCB3aWR0aCkgOiAwKTtcclxuICAgICAgICBjb25zdCB5ID0gKHlDZW50ZXIgKyBNYXRoLnNpbihyYWRpYW5zKSAqIChyYWRpdXMgKyBhY3R1YWxCb3VuZGluZ0JveEFzY2VudCkpICsgKGFjdHVhbEJvdW5kaW5nQm94QXNjZW50IC8gMik7XHJcblxyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQodGV4dCwgeCwgeSwgbWF4VGV4dFdpZHRoKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgTXVsdGlDaGFydE9wdGlvbnMsIE11bHRpU2VyaWVEYXRhLCBTZXJpZU9wdGlvbnNTaGFwZSB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlc1wiO1xyXG5pbXBvcnQgeyBnZXRUaWNrSW5mbyB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5pbXBvcnQgUGxvdCBmcm9tIFwiLi8uLi9QbG90XCI7XHJcbmltcG9ydCB7IERhdGFGb3JQbG90IH0gZnJvbSBcIi4vLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhclBsb3QgZXh0ZW5kcyBQbG90IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgQ09MX1NQQUNFX1NJWkUgPSAwLjc1O1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IFZBTFVFX0JPVFRPTV9QQURESU5HID0gNDtcclxuXHJcbiAgICBkcmF3KGRhdGE6IERhdGFGb3JQbG90KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgTUlOX1ZBTCA9IDA7XHJcbiAgICAgICAgY29uc3QgWV9MQUJFTF9GT05UID0gMTg7XHJcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gZGF0YS5zZXJpZXMgYXMgTXVsdGlTZXJpZURhdGFbXTtcclxuICAgICAgICBjb25zdCBjaGFydE9wdGlvbnMgPSBkYXRhLmNoYXJ0T3B0aW9ucyBhcyBNdWx0aUNoYXJ0T3B0aW9ucztcclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWxzID0gZGF0YS5kYXRhTGFiZWxzO1xyXG4gICAgICAgIGNvbnN0IHNlcmllQ291bnQgPSBzZXJpZXMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGJhckFyZWFzID0gbGFiZWxzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy9nZXQgdGhyZWUgbWFpbiBmcmFtZXNcclxuICAgICAgICBsZXQgYWxsRnJhbWVzID0gdGhpcy5wbG90S2l0LnByZXBhcmVDaGFydEZvckRyYXdpbmcoY2hhcnRPcHRpb25zLCBzZXJpZXMpO1xyXG4gICAgICAgIGxldCBwbG90RnJhbWUgPSBhbGxGcmFtZXMuZmluZChmcmFtZSA9PiBmcmFtZS5pZCA9PT0gJ2NvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgLy9zcGxpdCBjb250ZW50IGZyYW1lIGludG8gdHdvXHJcbiAgICAgICAgY29uc3QgbWF4VmFsdWVGcm9tU2VyaWVzID0gTWF0aC5tYXgoLi4uc2VyaWVzLm1hcChzZXJpZSA9PiBNYXRoLm1heCguLi5zZXJpZS52YWx1ZXMpKSk7XHJcbiAgICAgICAgY29uc3QgdGlja0luZm8gPSBnZXRUaWNrSW5mbyh0aGlzLnBsb3RLaXQuTU9TVF9USUNLUywgTUlOX1ZBTCwgbWF4VmFsdWVGcm9tU2VyaWVzKTtcclxuICAgICAgICBjb25zdCBvWXdpZHRoID0gdGhpcy5wbG90S2l0LmdldFdpZHRoT2ZWYWx1ZXNQYW5lKHRpY2tJbmZvLCBNSU5fVkFMLCBZX0xBQkVMX0ZPTlQpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHBsb3RGcmFtZS53IC0gb1l3aWR0aDtcclxuXHJcbiAgICAgICAgLy9oYXZpbmcgZmluYWwgJ3cnOlxyXG4gICAgICAgIGNvbnN0IGJhckFyZWFXaWR0aCA9IGNvbnRlbnRXaWR0aCAvIGJhckFyZWFzO1xyXG4gICAgICAgIGNvbnN0IHBhZGRpbmdXaWR0aCA9IGJhckFyZWFXaWR0aCAqICgxIC0gdGhpcy5DT0xfU1BBQ0VfU0laRSk7XHJcbiAgICAgICAgY29uc3QgYmFyQXJlYVdpZHRoUGFkZGVkID0gYmFyQXJlYVdpZHRoIC0gMiAqIHBhZGRpbmdXaWR0aDtcclxuICAgICAgICBjb25zdCBvbmVDb2x1bW5XaWR0aCA9IGJhckFyZWFXaWR0aFBhZGRlZCAvIHNlcmllQ291bnQ7XHJcblxyXG4gICAgICAgIGlmIChjaGFydE9wdGlvbnMuc2hvd0xhYmVscykge1xyXG4gICAgICAgICAgICBjb25zdCBmcmFtZXMgPSB0aGlzLnBsb3RLaXQuZ2V0TGFiZWxzRnJhbWVGaWxsZWQocGxvdEZyYW1lLCBvWXdpZHRoLCBsYWJlbHMsIGJhckFyZWFXaWR0aCwgYmFyQXJlYXMpO1xyXG4gICAgICAgICAgICBhbGxGcmFtZXMgPSBhbGxGcmFtZXMuZmlsdGVyKGZyYW1lID0+IGZyYW1lLmlkICE9PSAnY29udGVudCcpO1xyXG4gICAgICAgICAgICBhbGxGcmFtZXMucHVzaCguLi5mcmFtZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeyB0aWNrQ291bnQsIHRpY2tIZWlnaHQgfSA9IHRpY2tJbmZvO1xyXG4gICAgICAgIHBsb3RGcmFtZSA9IGFsbEZyYW1lcy5maW5kKGZyYW1lID0+IGZyYW1lLmlkID09PSAnY29udGVudCcpO1xyXG4gICAgICAgIHBsb3RGcmFtZSA9IHRoaXMucGxvdEtpdC5kcmF3R3JpZEhvcml6b250YWxMaW5lcyhwbG90RnJhbWUsIHRpY2tJbmZvLCBNSU5fVkFMLCBZX0xBQkVMX0ZPTlQpO1xyXG4gICAgICAgIGNvbnN0IGhTcGFjZUJldHdlZW5UaWNrcyA9IHBsb3RGcmFtZS5oIC8gKCh0aWNrQ291bnQgKyAxKSAqIHRpY2tIZWlnaHQpO1xyXG5cclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xyXG4gICAgICAgIGNvbnN0IHlDb2x1bW5Cb3R0b20gPSBwbG90RnJhbWUueSArIHBsb3RGcmFtZS5oO1xyXG4gICAgICAgIGNvbnN0IHB4Rm9udEZvclZhbHVlID0gTWF0aC5mbG9vcihvbmVDb2x1bW5XaWR0aCAqIDAuNSk7XHJcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IGAke3B4Rm9udEZvclZhbHVlfXB4IHNhbnMtc2VyaWZgO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGJhckFyZWFzOyBhKyspIHtcclxuICAgICAgICAgICAgY29uc3QgeEFyZWFCZWdpbm5pbmcgPSBwbG90RnJhbWUueCArIGEgKiBiYXJBcmVhV2lkdGggKyBwYWRkaW5nV2lkdGg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgc2VyaWVDb3VudDsgcysrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4Q29sdW1uID0geEFyZWFCZWdpbm5pbmcgKyBzICogb25lQ29sdW1uV2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoQ29sdW1uID0gc2VyaWVzW3NdLnZhbHVlc1thXSAqIGhTcGFjZUJldHdlZW5UaWNrcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlDb2x1bW4gPSB5Q29sdW1uQm90dG9tIC0gaENvbHVtbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JhcihcclxuICAgICAgICAgICAgICAgICAgICB4Q29sdW1uLFxyXG4gICAgICAgICAgICAgICAgICAgIHlDb2x1bW4sXHJcbiAgICAgICAgICAgICAgICAgICAgb25lQ29sdW1uV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgaENvbHVtbixcclxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNbc10ub3B0aW9ucyBhcyBTZXJpZU9wdGlvbnNTaGFwZSxcclxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNbc10udmFsdWVzW2FdXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZHJhd0Jhcih4cG9zOiBudW1iZXIsIHlwb3M6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdGlvbnM6IFNlcmllT3B0aW9uc1NoYXBlLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5maWxsQmFyKHhwb3MsIHlwb3MsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHsgc2hvd1ZhbHVlLCBib3JkZXJXaWR0aCB9ID0gb3B0aW9ucztcclxuICAgICAgICBpZiAoYm9yZGVyV2lkdGgpXHJcbiAgICAgICAgICAgIHRoaXMuc3Ryb2tlQmFyKHhwb3MsIHlwb3MsIHdpZHRoLCBoZWlnaHQsIGJvcmRlcldpZHRoKTtcclxuICAgICAgICBpZiAoc2hvd1ZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLmFkZEJhclZhbHVlKHhwb3MsIHlwb3MsIHdpZHRoLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaWxsQmFyKHhwb3M6IG51bWJlciwgeXBvczogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3B0aW9uczogU2VyaWVPcHRpb25zU2hhcGUpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGNvbG9yLCBzaGFwZSB9ID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLnBsb3RLaXQucGF0dGVyblRvb2xzLmFwcGx5U2hhcGVPckNvbG9yKHRoaXMuY3R4LCBzaGFwZSwgY29sb3IpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KHhwb3MsIHlwb3MsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3Ryb2tlQmFyKHhwb3M6IG51bWJlciwgeXBvczogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgYm9yZGVyV2lkdGg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IGhlaWdodCA/IGJvcmRlcldpZHRoIDogMTtcclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5tb3ZlVG8oeHBvcywgeXBvcyArIGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHhwb3MsIHlwb3MpO1xyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4cG9zICsgd2lkdGgsIHlwb3MpO1xyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4cG9zICsgd2lkdGgsIHlwb3MgKyBoZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZEJhclZhbHVlKHhwb3M6IG51bWJlciwgeXBvczogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICBjb25zdCB2YWx1ZVN0cmluZyA9IFN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgY29uc3Qgd1RleHQgPSB0aGlzLmN0eC5tZWFzdXJlVGV4dCh2YWx1ZVN0cmluZykud2lkdGg7XHJcbiAgICAgICAgY29uc3QgeFZhbHVlQ2VudGVyZWQgPSB4cG9zICsgd2lkdGggLyAyIC0gd1RleHQgLyAyO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFxyXG4gICAgICAgICAgICB2YWx1ZVN0cmluZyxcclxuICAgICAgICAgICAgeFZhbHVlQ2VudGVyZWQsXHJcbiAgICAgICAgICAgIHlwb3MgLSB0aGlzLlZBTFVFX0JPVFRPTV9QQURESU5HLFxyXG4gICAgICAgICAgICB3aWR0aFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTZXJpZU9wdGlvbnNMaW5lLCBTZXJpZU9wdGlvbnNQb2ludCwgU2VyaWVPcHRpb25zU2hhcGUgfSBmcm9tIFwiLi4vLi4vbW9kZWwvdHlwZXNcIjtcclxuaW1wb3J0IExpbmVQbG90IGZyb20gXCIuL0xpbmVQbG90XCI7XHJcbmltcG9ydCB7IERhdGFGb3JTZXJpZURyYXdpbmcgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyZWFQbG90IGV4dGVuZHMgTGluZVBsb3Qge1xyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBwZXJmb3JtRHJhd2luZyhkYXRhOiBEYXRhRm9yU2VyaWVEcmF3aW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBzZXJpZXMsIG1hcHBlcnMsIGxhYmVsRnJhbWUsIHlNaW5Gb3JTZXJpZXMgfSA9IGRhdGE7XHJcbiAgICAgICAgY29uc3QgYm90dG9tID0gbWFwcGVycy55RnVuYyh5TWluRm9yU2VyaWVzKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgc2VyaWVJbmRleCA9IDA7IHNlcmllSW5kZXggPCBzZXJpZXMubGVuZ3RoOyBzZXJpZUluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgcG9pbnRzSW5TZXJpZSA9IHNlcmllc1tzZXJpZUluZGV4XS5wb2ludHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRzSW5TZXJpZSA8IDIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbmV3IFBhdGgyRCgpO1xyXG4gICAgICAgICAgICBjb25zdCB7IHBvaW50cywgb3B0aW9ucyB9ID0gc2VyaWVzW3NlcmllSW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IHRoaXMubWFwU3BhY2VQb2ludFRvUGl4ZWxQb2ludChwb2ludHNbMF0sIG1hcHBlcnMueEZ1bmMsIG1hcHBlcnMueUZ1bmMpO1xyXG4gICAgICAgICAgICBwYXRoLm1vdmVUbyhmaXJzdFBvaW50LngsIGJvdHRvbSk7XHJcbiAgICAgICAgICAgIHBhdGgubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3VmFsdWVGb3JQb2ludChwb2ludHNbMF0ueCwgZmlyc3RQb2ludC54LCBsYWJlbEZyYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5wbG90S2l0LnBvaW50VG9vbHMucGVyZm9ybURyYXdQb2ludChmaXJzdFBvaW50LCBvcHRpb25zIGFzIFNlcmllT3B0aW9uc1BvaW50KTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHBvaW50SW5kZXggPSAxOyBwb2ludEluZGV4IDwgcG9pbnRzSW5TZXJpZSAtIDE7IHBvaW50SW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWFwcGVkUG9pbnQgPSB0aGlzLm1hcFNwYWNlUG9pbnRUb1BpeGVsUG9pbnQocG9pbnRzW3BvaW50SW5kZXhdLCBtYXBwZXJzLnhGdW5jLCBtYXBwZXJzLnlGdW5jKTtcclxuICAgICAgICAgICAgICAgIHBhdGgubGluZVRvKG1hcHBlZFBvaW50LngsIG1hcHBlZFBvaW50LnkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3VmFsdWVGb3JQb2ludChwb2ludHNbcG9pbnRJbmRleF0ueCwgbWFwcGVkUG9pbnQueCwgbGFiZWxGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsb3RLaXQucG9pbnRUb29scy5wZXJmb3JtRHJhd1BvaW50KGZpcnN0UG9pbnQsIG9wdGlvbnMgYXMgU2VyaWVPcHRpb25zUG9pbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSB0aGlzLm1hcFNwYWNlUG9pbnRUb1BpeGVsUG9pbnQocG9pbnRzW3BvaW50c0luU2VyaWUgLSAxXSwgbWFwcGVycy54RnVuYywgbWFwcGVycy55RnVuYyk7XHJcbiAgICAgICAgICAgIHBhdGgubGluZVRvKGxhc3RQb2ludC54LCBsYXN0UG9pbnQueSk7XHJcbiAgICAgICAgICAgIHBhdGgubGluZVRvKGxhc3RQb2ludC54LCBib3R0b20pO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdWYWx1ZUZvclBvaW50KHBvaW50c1twb2ludHNJblNlcmllIC0gMV0ueCwgbGFzdFBvaW50LngsIGxhYmVsRnJhbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnBsb3RLaXQucG9pbnRUb29scy5wZXJmb3JtRHJhd1BvaW50KGxhc3RQb2ludCwgb3B0aW9ucyBhcyBTZXJpZU9wdGlvbnNQb2ludCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsb3RLaXQubGluZVRvb2xzLnNldExpbmVTdHlsZShvcHRpb25zIGFzIFNlcmllT3B0aW9uc0xpbmUpO1xyXG4gICAgICAgICAgICB0aGlzLnBsb3RLaXQucGF0dGVyblRvb2xzLmFwcGx5U2hhcGVPckNvbG9yKHRoaXMuY3R4LCAob3B0aW9ucyBhcyBTZXJpZU9wdGlvbnNTaGFwZSkuc2hhcGUsIG9wdGlvbnMuY29sb3IpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsKHBhdGgpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZShwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdHguc2V0TGluZURhc2goW10pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBsb3QgZnJvbSBcIi4uL3Bsb3QvUGxvdFwiO1xyXG5pbXBvcnQgcGxvdFNlcnZhbnQgZnJvbSBcIi4uL3Bsb3QvUGxvdFNlcnZhbnRcIjtcclxuaW1wb3J0IHsgRGF0YUZvclBsb3QgfSBmcm9tIFwiLi4vcGxvdC90eXBlc1wiO1xyXG5pbXBvcnQgeyBTZXJpZURhdGFDb21tb24sIENoYXJ0T3B0aW9ucywgQ29udGV4dFNvdXJjZSwgU2VyaWVPcHRpb25zU2hhcGUsIFNlcmllT3B0aW9uc0xpbmUgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgQ2hhcnRVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENoYXJ0IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJvdGVjdGVkIHNlcmllc0RhdGE6IFNlcmllRGF0YUNvbW1vbltdID0gW107XHJcbiAgICBwcm90ZWN0ZWQgY2hhcnRPcHRpb25zOiBDaGFydE9wdGlvbnM7XHJcbiAgICBwcm90ZWN0ZWQgcGxvdDogUGxvdDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IENvbnRleHRTb3VyY2UsIGNoYXJ0VHlwZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGFuYWx5emVkRWxlbWVudCA9IHNvdXJjZTtcclxuICAgICAgICBpZiAodHlwZW9mIGFuYWx5emVkRWxlbWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYW5hbHl6ZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYW5hbHl6ZWRFbGVtZW50LnJlcGxhY2UoJy9eIy8nLCAnJykpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYW5hbHl6ZWRFbGVtZW50IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gYW5hbHl6ZWRFbGVtZW50LmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFuYWx5emVkRWxlbWVudCBpbnN0YW5jZW9mIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBhbmFseXplZEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgdGhyb3cgRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgdmFsaWQgSUQsIEhUTUxDYW52YXNFbGVtZW50IG9yIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCcpO1xyXG4gICAgICAgIHRoaXMuc2V0RGVmYXVsdENoYXJ0T3B0aW9ucygpO1xyXG4gICAgICAgIHRoaXMucGxvdCA9IHBsb3RTZXJ2YW50KHRoaXMuY29udGV4dCwgY2hhcnRUeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc2V0RGVmYXVsdENoYXJ0T3B0aW9ucygpOiBDaGFydE9wdGlvbnMge1xyXG4gICAgICAgIHRoaXMuY2hhcnRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogJ1RpdGxlJyxcclxuICAgICAgICAgICAgc2hvd1RpdGxlOiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93TGVnZW5kOiBmYWxzZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0T3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdFNlcmllT2JqZWN0QmFzZSgpOiBTZXJpZURhdGFDb21tb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWU6IGB1bm5hbWVkYCxcclxuICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IGAjJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNjc3NzIxNSkudG9TdHJpbmcoMTYpfWAsXHJcbiAgICAgICAgICAgICAgICBzaG93VmFsdWU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd09uTGVnZW5kOiBmYWxzZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldENoYXJ0T3B0aW9ucyhvcHRpb25zOiBQYXJ0aWFsPENoYXJ0T3B0aW9ucz4pOiB2b2lkIHtcclxuICAgICAgICBDaGFydFV0aWxzLm1lcmdlUmlnaHQob3B0aW9ucywgdGhpcy5jaGFydE9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTZXJpZU9wdGlvbnMobmV3T3B0aW9uczogUGFydGlhbDxTZXJpZU9wdGlvbnNTaGFwZSB8IFNlcmllT3B0aW9uc0xpbmU+LCB3aGljaFNlcmllcz86IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHdoaWNoU2VyaWVzKSB3aGljaFNlcmllcy5mb3JFYWNoKChzZXJpZU5hbWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWN0dWFsU2VyaWUgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJpZXNEYXRhLmZpbmQoKGV4aXN0aW5nU2VyaWUpID0+IGV4aXN0aW5nU2VyaWUubmFtZSA9PSBzZXJpZU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoYWN0dWFsU2VyaWUpIHtcclxuICAgICAgICAgICAgICAgIENoYXJ0VXRpbHMubWVyZ2VSaWdodChuZXdPcHRpb25zLCBhY3R1YWxTZXJpZS5vcHRpb25zKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgU2VyaWUgd2l0aCBuYW1lICR7c2VyaWVOYW1lfSBub3QgZm91bmQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBlbHNlIHRoaXMuc2VyaWVzRGF0YS5mb3JFYWNoKChzZXJpZSkgPT4gQ2hhcnRVdGlscy5tZXJnZVJpZ2h0KG5ld09wdGlvbnMsIHNlcmllLm9wdGlvbnMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdyhkYXRhOiBEYXRhRm9yUGxvdCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGxvdC5kcmF3KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBzZXQgWCh2YWx1ZTogc3RyaW5nW10gfCBudW1iZXJbXSB8IG51bWJlcltdW10pO1xyXG4gICAgcHVibGljIGFic3RyYWN0IHNldCBZKHZhbHVlOiBudW1iZXJbXSB8IG51bWJlcltdW10pO1xyXG59IiwiaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiLi9DaGFydFwiO1xyXG5pbXBvcnQgeyBDaGFydE9wdGlvbnMsIE11bHRpQ2hhcnRPcHRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNdWx0aUNoYXJ0IGV4dGVuZHMgQ2hhcnQge1xyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBjaGFydE9wdGlvbnM6IE11bHRpQ2hhcnRPcHRpb25zO1xyXG5cclxuICAgIHB1YmxpYyBzZXQgc2VyaWVOYW1lcyhuYW1lczogc3RyaW5nW10pIHtcclxuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihuYW1lcy5sZW5ndGgsIHRoaXMuc2VyaWVzRGF0YS5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWluOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJpZXNEYXRhW2ldLm5hbWUgPSBuYW1lc1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHNldERlZmF1bHRDaGFydE9wdGlvbnMoKTogQ2hhcnRPcHRpb25zIHtcclxuICAgICAgICBzdXBlci5zZXREZWZhdWx0Q2hhcnRPcHRpb25zKCk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNoYXJ0T3B0aW9ucywge1xyXG4gICAgICAgICAgICBzaG93TGFiZWxzOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnRPcHRpb25zO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTXVsdGlTZXJpZVBvaW50RGF0YSwgUG9pbnQgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgTXVsdGlDaGFydCB9IGZyb20gXCIuLi9NdWx0aUNoYXJ0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9pbnRDaGFydCBleHRlbmRzIE11bHRpQ2hhcnQge1xyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBzZXJpZXNEYXRhOiBNdWx0aVNlcmllUG9pbnREYXRhW107XHJcblxyXG4gICAgcHVibGljIHNldCBwb2ludHMocG9pbnRzOiBQb2ludFtdKSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLnNlcmllc0RhdGEuZmlsdGVyKChzZXJpZSkgPT4gc2VyaWUubmFtZS5zdGFydHNXaXRoKCdzZXJpZScpKS5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5zZXJpZXNEYXRhLnB1c2godGhpcy5nZXREZWZhdWx0U2VyaWVPYmplY3QocG9pbnRzLCBjb3VudCArIDEpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IFgoYXJnc1BlclNlcmllOiBudW1iZXJbXVtdKSB7XHJcbiAgICAgICAgdGhpcy5zZXJpZXNEYXRhID1cclxuICAgICAgICAgICAgYXJnc1BlclNlcmllLm1hcChcclxuICAgICAgICAgICAgICAgIChhcmdzLCBpbmRleCkgPT4gdGhpcy5nZXREZWZhdWx0U2VyaWVPYmplY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgYXJncy5tYXAoYXJnID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGFyZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKSwgaW5kZXhcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IFkodmFsczogbnVtYmVyW11bXSkge1xyXG4gICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzLnNlcmllc0RhdGE7XHJcbiAgICAgICAgaWYgKCFsZW5ndGgpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdWYWx1ZXMgb24gXCJYXCIgYXhpcyBtdXN0IGJlIHNwZWNpZmllZCBiZWZvcmUgc2V0dGluZyBcIllcIiB2YWx1ZXMuJyk7XHJcbiAgICAgICAgY29uc3QgbWluTGVuID0gTWF0aC5taW4odmFscy5sZW5ndGgsIGxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW5MZW47IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbE1pbkxlbiA9IE1hdGgubWluKHZhbHNbaV0ubGVuZ3RoLCB0aGlzLnNlcmllc0RhdGFbaV0ucG9pbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW50ZXJuYWxNaW5MZW47IGorKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJpZXNEYXRhW2ldLnBvaW50c1tqXS55ID0gdmFsc1tpXVtqXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdFNlcmllT2JqZWN0KHBvaW50czogUG9pbnRbXSwgaW5kZXg6IG51bWJlcik6IE11bHRpU2VyaWVQb2ludERhdGEge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IHN1cGVyLmdldERlZmF1bHRTZXJpZU9iamVjdEJhc2UoKTtcclxuICAgICAgICBvYmoubmFtZSA9IGBzZXJpZSR7aW5kZXh9YDtcclxuICAgICAgICBPYmplY3QuYXNzaWduKG9iaiwge1xyXG4gICAgICAgICAgICBwb2ludHNcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuYXNzaWduKG9iai5vcHRpb25zLCB7XHJcbiAgICAgICAgICAgIHBvaW50U2hhcGU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgcG9pbnRTaXplOiAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvYmogYXMgTXVsdGlTZXJpZVBvaW50RGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlcmllc0RhdGEuZm9yRWFjaCgoZGF0YSkgPT4gZGF0YS5wb2ludHMuc29ydCgocDEsIHAyKSA9PiAocDEueCAtIHAyLngpKSk7XHJcbiAgICAgICAgc3VwZXIuZHJhdyh7XHJcbiAgICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXNEYXRhLFxyXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHRoaXMuY2hhcnRPcHRpb25zXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNdWx0aVNlcmllUG9pbnREYXRhLCBQb2ludCB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBQb2ludENoYXJ0IH0gZnJvbSBcIi4vUG9pbnRDaGFydFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVDaGFydCBleHRlbmRzIFBvaW50Q2hhcnQge1xyXG4gICAgcHJvdGVjdGVkIGdldERlZmF1bHRTZXJpZU9iamVjdChwb2ludHM6IFBvaW50W10sIGluZGV4OiBudW1iZXIpOiBNdWx0aVNlcmllUG9pbnREYXRhIHtcclxuICAgICAgICBjb25zdCBvYmogPSBzdXBlci5nZXREZWZhdWx0U2VyaWVPYmplY3QocG9pbnRzLCBpbmRleCk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvYmoub3B0aW9ucywge1xyXG4gICAgICAgICAgICBkYXNoOiBbXSxcclxuICAgICAgICAgICAgZGFzaFdpZHRoOiAxLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb250ZXh0U291cmNlIH0gZnJvbSBcIi4uL21vZGVsL3R5cGVzXCI7XHJcbmltcG9ydCB7IEJhckNoYXJ0IH0gZnJvbSBcIi4uL21vZGVsL2NoYXJ0cy9CYXJDaGFydFwiO1xyXG5pbXBvcnQgeyBDaGFydCB9IGZyb20gXCIuLi9tb2RlbC9DaGFydFwiO1xyXG5pbXBvcnQgeyBQaWVDaGFydCB9IGZyb20gXCIuLi9tb2RlbC9jaGFydHMvUGllQ2hhcnRcIjtcclxuaW1wb3J0IHsgUG9pbnRDaGFydCB9IGZyb20gXCIuLi9tb2RlbC9jaGFydHMvUG9pbnRDaGFydFwiO1xyXG5pbXBvcnQgeyBMaW5lQ2hhcnQgfSBmcm9tIFwiLi4vbW9kZWwvY2hhcnRzL0xpbmVDaGFydFwiO1xyXG5pbXBvcnQgeyBBcmVhQ2hhcnQgfSBmcm9tIFwiLi4vbW9kZWwvY2hhcnRzL0FyZWFDaGFydFwiO1xyXG5cclxuY29uc3QgdHlwZVRvQ2xhc3NQYWlycyA9IHtcclxuICAgIFwicGllXCI6IFBpZUNoYXJ0LFxyXG4gICAgXCJiYXJcIjogQmFyQ2hhcnQsXHJcbiAgICBcInBvaW50c1wiOiBQb2ludENoYXJ0LFxyXG4gICAgXCJsaW5lXCI6IExpbmVDaGFydCxcclxuICAgIFwiYXJlYVwiOiBBcmVhQ2hhcnRcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlcnZlQ2hhcnQodHlwZTogc3RyaW5nLCBzb3VyY2U6IENvbnRleHRTb3VyY2UpOiBDaGFydCB7XHJcbiAgICBjb25zdCBDbGFzc1JlZiA9IHR5cGVUb0NsYXNzUGFpcnNbdHlwZS50b0xvd2VyQ2FzZSgpLnRyaW0oKSBhcyBrZXlvZiB0eXBlb2YgdHlwZVRvQ2xhc3NQYWlyc107XHJcbiAgICBpZiAoQ2xhc3NSZWYpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGFzc1JlZihzb3VyY2UsIHR5cGUpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGV9IGNoYXJ0IGlzIG5vdCBkZWZpbmVkLmApO1xyXG59IiwiaW1wb3J0IHsgQ2hhcnRPcHRpb25zLCBTaW5nbGVTZXJpZURhdGEgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiLi4vQ2hhcnRcIjtcclxuaW1wb3J0IENoYXJ0VXRpbHMgZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGllQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIHNlcmllc0RhdGE6IFNpbmdsZVNlcmllRGF0YVtdO1xyXG5cclxuICAgIHB1YmxpYyBzZXQgWChsYWJlbHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5zZXJpZXNEYXRhID1cclxuICAgICAgICAgICAgbGFiZWxzLm1hcCgobGFiZWwpID0+IHRoaXMuZ2V0RGVmYXVsdFNlcmllT2JqZWN0KGxhYmVsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBZKHZhbHVlczogbnVtYmVyW10pIHtcclxuICAgICAgICBjb25zdCB7IGxlbmd0aCB9ID0gdGhpcy5zZXJpZXNEYXRhO1xyXG4gICAgICAgIGlmICghbGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignVmFsdWVzIG9uIFwiWFwiIGF4aXMgbXVzdCBiZSBzcGVjaWZpZWQgYmVmb3JlIHNldHRpbmcgXCJZXCIgdmFsdWVzLicpO1xyXG4gICAgICAgIGNvbnN0IG1hcHBlZFZhbHVlcyA9IENoYXJ0VXRpbHMuc2xpY2VPckZpbGwodmFsdWVzLCBsZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuc2VyaWVzRGF0YS5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKG1hcHBlZFZhbHVlc1tpbmRleF0gPCAwKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJQaWUgQ2hhcnQgY2Fubm90IGhhdmUgbmVnYXRpdmUgdmFsdWVzIVwiKTtcclxuICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gbWFwcGVkVmFsdWVzW2luZGV4XTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc2V0RGVmYXVsdENoYXJ0T3B0aW9ucygpOiBDaGFydE9wdGlvbnMge1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0T3B0cyA9IHN1cGVyLnNldERlZmF1bHRDaGFydE9wdGlvbnMoKTtcclxuICAgICAgICBPYmplY3QuYXNzaWduKGNoYXJ0T3B0cywge1xyXG4gICAgICAgICAgICBwcmVjZW50YWdlVmFsdWVzOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjaGFydE9wdHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldERlZmF1bHRTZXJpZU9iamVjdChsYWJlbDogc3RyaW5nKTogU2luZ2xlU2VyaWVEYXRhIHtcclxuICAgICAgICBjb25zdCBvYmogPSBzdXBlci5nZXREZWZhdWx0U2VyaWVPYmplY3RCYXNlKCk7XHJcbiAgICAgICAgb2JqLm5hbWUgPSBsYWJlbDtcclxuICAgICAgICBPYmplY3QuYXNzaWduKG9iaiwge1xyXG4gICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24ob2JqLm9wdGlvbnMsIHtcclxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsXHJcbiAgICAgICAgICAgIHNoYXBlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG9iaiBhcyBTaW5nbGVTZXJpZURhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuZHJhdyh7XHJcbiAgICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXNEYXRhLFxyXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHRoaXMuY2hhcnRPcHRpb25zXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNdWx0aVNlcmllRGF0YSB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgQ2hhcnRVdGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgTXVsdGlDaGFydCB9IGZyb20gXCIuLi9NdWx0aUNoYXJ0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFyQ2hhcnQgZXh0ZW5kcyBNdWx0aUNoYXJ0IHtcclxuICAgIHByb3RlY3RlZCBkYXRhTGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIHNlcmllc0RhdGE6IE11bHRpU2VyaWVEYXRhW107XHJcblxyXG4gICAgcHVibGljIHNldCBYKGxhYmVsczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLmRhdGFMYWJlbHMgPSBsYWJlbHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBZKHNlcmllczogbnVtYmVyW11bXSB8IG51bWJlcltdKSB7XHJcbiAgICAgICAgaWYgKCFDaGFydFV0aWxzLmNoZWNrSWZBcnJheU9mQXJyYXlzKHNlcmllcykpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJpZXNEYXRhID0gc2VyaWVzLm1hcChcclxuICAgICAgICAgICAgICAgIChzZXJpZSwgaW5kZXgpID0+IHRoaXMuZ2V0RGVmYXVsdFNlcmllT2JqZWN0KFtzZXJpZV0sIGluZGV4KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzLmRhdGFMYWJlbHM7XHJcbiAgICAgICAgaWYgKCFsZW5ndGgpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdWYWx1ZXMgb24gXCJYXCIgYXhpcyBtdXN0IGJlIHNwZWNpZmllZCBiZWZvcmUgc2V0dGluZyBcIllcIiB2YWx1ZXMuJyk7XHJcbiAgICAgICAgY29uc3QgbWFwcGVkU2VyaWVzID0gc2VyaWVzLm1hcChzZXJpZSA9PiBDaGFydFV0aWxzLnNsaWNlT3JGaWxsKHNlcmllLCBsZW5ndGgpKTtcclxuICAgICAgICB0aGlzLnNlcmllc0RhdGEgPSBtYXBwZWRTZXJpZXMubWFwKChzZXJpZSwgaW5kZXgpID0+IHRoaXMuZ2V0RGVmYXVsdFNlcmllT2JqZWN0KHNlcmllLCBpbmRleCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0U2VyaWVPYmplY3Qoc2VyaWU6IG51bWJlcltdLCBpbmRleDogbnVtYmVyKTogTXVsdGlTZXJpZURhdGEge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IHN1cGVyLmdldERlZmF1bHRTZXJpZU9iamVjdEJhc2UoKTtcclxuICAgICAgICBvYmoubmFtZSA9IGBzZXJpZSR7aW5kZXh9YDtcclxuICAgICAgICBPYmplY3QuYXNzaWduKG9iaiwge1xyXG4gICAgICAgICAgICB2YWx1ZXM6IHNlcmllXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvYmoub3B0aW9ucywge1xyXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogMCxcclxuICAgICAgICAgICAgc2hhcGU6IHVuZGVmaW5lZCxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gb2JqIGFzIE11bHRpU2VyaWVEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRyYXcoe1xyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB0aGlzLmRhdGFMYWJlbHMsXHJcbiAgICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXNEYXRhLFxyXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHRoaXMuY2hhcnRPcHRpb25zXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNdWx0aVNlcmllUG9pbnREYXRhLCBQb2ludCB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBMaW5lQ2hhcnQgfSBmcm9tIFwiLi9MaW5lQ2hhcnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBcmVhQ2hhcnQgZXh0ZW5kcyBMaW5lQ2hhcnQge1xyXG4gICAgcHJvdGVjdGVkIGdldERlZmF1bHRTZXJpZU9iamVjdChwb2ludHM6IFBvaW50W10sIGluZGV4OiBudW1iZXIpOiBNdWx0aVNlcmllUG9pbnREYXRhIHtcclxuICAgICAgICBjb25zdCBvYmogPSBzdXBlci5nZXREZWZhdWx0U2VyaWVPYmplY3QocG9pbnRzLCBpbmRleCk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvYmoub3B0aW9ucywge1xyXG4gICAgICAgICAgICBzaGFwZTogdW5kZWZpbmVkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkJBQ0tHUk9VTkRfQ09MT1IiLCJQQVRURVJOX0NPTE9SIiwiUE9JTlRfU1RZTEUiLCJjbGFzc0NhbGxDaGVjayIsIkF3YWl0VmFsdWUiLCJ2YWx1ZSIsInRoaXMiLCJBc3luY0dlbmVyYXRvciIsImdlbiIsImZyb250IiwiYmFjayIsInJlc3VtZSIsImtleSIsImFyZyIsInJlc3VsdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInNldHRsZSIsImRvbmUiLCJlcnIiLCJ0eXBlIiwicmVqZWN0IiwibmV4dCIsIl9pbnZva2UiLCJyZXF1ZXN0IiwicmV0dXJuIiwidW5kZWZpbmVkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInByb3RvdHlwZSIsInRocm93IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIlNoYXBlIiwic2l6ZSIsImJhY2tncm91bmRDb2xvciIsInBhdHRlcm5Db2xvciIsIl9jYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJfY29udGV4dCIsImdldENvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiX3NpemUiLCJfcGF0dGVybkNvbG9yIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJsaW5lSm9pbiIsImxpbmVDYXAiLCJQbHVzIiwiX1NoYXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJhcHBseSIsImhhbGZTaXplIiwiYmVnaW5QYXRoIiwic2V0U3Ryb2tlUHJvcHMiLCJkcmF3UGx1cyIsInN0cm9rZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicXVhcnRlclNpemUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJDcm9zcyIsImRyYXdDcm9zcyIsImdhcCIsIkRhc2giLCJkcmF3RGFzaCIsIkNyb3NzRGFzaCIsIkRvdCIsInNldEZpbGxQcm9wcyIsImRyYXdEb3QiLCJmaWxsIiwiZGlhbWV0ZXIiLCJ4IiwieSIsImFyYyIsIk1hdGgiLCJQSSIsIkRvdERhc2giLCJEaXNjIiwiX0RvdCIsIlJpbmciLCJMaW5lIiwiZHJhd0xpbmUiLCJWZXJ0aWNhbExpbmUiLCJfTGluZSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsImRyYXdUaWxlIiwiV2VhdmUiLCJkcmF3V2VhdmUiLCJaaWd6YWciLCJkcmF3WmlnemFnIiwidGVudGhTaXplIiwiWmlnemFnVmVydGljYWwiLCJfWmlnemFnIiwiRGlhZ29uYWwiLCJkcmF3RGlhZ29uYWxMaW5lIiwiRGlhZ29uYWxSaWdodExlZnQiLCJfRGlhZ29uYWwiLCJTcXVhcmUiLCJkcmF3U3F1YXJlIiwiQm94IiwiZHJhd0JveCIsInN0cm9rZVJlY3QiLCJUcmlhbmdsZSIsImRyYXdUcmlhbmdsZSIsIlRyaWFuZ2xlVmVydGljYWwiLCJfVHJpYW5nbGUiLCJEaWFtb25kIiwiZHJhd0RpYW1vbmQiLCJEaWFtb25kQm94IiwiX0RpYW1vbmQiLCJzaGFwZXMiLCJjb21wbGV0ZVNoYXBlc0xpc3QiLCJnZXRSYW5kb21TaGFwZSIsImV4Y2x1ZGVkU2hhcGVUeXBlcyIsInNoYXBlc0xpc3QiLCJrZXlzIiwiZm9yRWFjaCIsInNoYXBlVHlwZSIsInNwbGljZSIsImluZGV4T2YiLCJyYW5kb21JbmRleCIsImZsb29yIiwicmFuZG9tIiwiZHJhdyIsInBhdHRlcm5DYW52YXMiLCJwYXR0ZXJuQ29udGV4dCIsIm91dGVyU2l6ZSIsInNoYXBlIiwicGF0dGVybiIsImNyZWF0ZVBhdHRlcm4iLCJnZW5lcmF0ZSIsImNvbG9yTGlzdCIsImZpcnN0U2hhcGVUeXBlIiwicHJldmlvdXNTaGFwZVR5cGUiLCJtYXAiLCJjb2xvciIsImluZGV4IiwibGlzdCIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZ2V0Iiwib2JqIiwicHJvcCIsInN0YXRpYyIsImFycmF5IiwibGVuIiwiZmlsbFdpdGgiLCJzbGljZSIsInB1c2giLCJuZXdPcHRpb25zIiwiYWN0dWFsT3B0aW9ucyIsImVudHJpZXMiLCJwYWlyIiwiaW5jbHVkZXMiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJnZXRUaWNrSW5mbyIsIm1vc3RUaWNrcyIsIm1pbiIsIm1heCIsImRpZmYiLCJjZWlsIiwibWluaW11bSIsIm1hZ25pdHVkZSIsInBvdyIsImxvZzEwIiwicmVzaWR1YWwiLCJ0aWNrSGVpZ2h0IiwiZmluZCIsImUiLCJ0aWNrQ291bnQiLCJwYXJzZUZsb2F0V2l0aG91dFBhZGRpbmciLCJ2YWwiLCJmaXgiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsIkFic3RyYWN0UGxvdFRvb2xzIiwiY3R4IiwiTGluZVBsb3RUb29scyIsInBlcmZvcm1EcmF3U2luZ2xlU2VyaWVMZWdlbmQiLCJib3hGcmFtZUFuZFRleHRDb29yZHMiLCJzZXJpZSIsIm9wdGlvbnMiLCJuYW1lIiwiYm94RnJhbWUiLCJ0ZXh0Q29vcmRzIiwieUJveEZyYW1lQ2VudGVyIiwiaCIsInAxIiwicDIiLCJ3Iiwic2V0TGluZVN0eWxlIiwiZHJhd1NpbmdsZUxpbmUiLCJmaWxsVGV4dCIsIm1heFciLCJzZXRMaW5lRGFzaCIsImRhc2giLCJkYXNoV2lkdGgiLCJkYXNoU3RyaW5nVG9BcnJheSIsIlBhdHRlcm5QbG90VG9vbHMiLCJhcHBseVNoYXBlT3JDb2xvciIsImNvbnNvbGUiLCJ3YXJuIiwiUG9pbnRQbG90VG9vbHMiLCJwZXJmb3JtRHJhd1BvaW50IiwiY29vcmRzIiwicG9pbnRTaGFwZSIsInBvaW50U2l6ZSIsInRyYW5zZm9ybSIsImYiLCJjYW52YXNQYXR0ZXJuIiwic2V0VHJhbnNmb3JtIiwiUGxvdEtpdCIsInBsb3RUeXBlIiwiQ0hBUlRfQk9SREVSX0NPTE9SIiwiRElWSURFUl9MSU5FX0NPTE9SIiwiSE9SSVpPTlRBTF9MSU5FX0NPTE9SIiwiVElUTEVfQVJFQV9NVUxUSVBJRVIiLCJMRUdFTkRfQVJFQV9NVUxUSVBJRVIiLCJMRUdFTkRfUEFERElOR19NVUxUSVBJRVIiLCJTRVJJRV9MRUdFTkRfUEVSX0xFVkVMIiwiU0VSSUVfUEFERElOR19NVUxUSVBJRVIiLCJMQUJFTFNfQVJFQV9NVUxUSVBJRVIiLCJNT1NUX1RJQ0tTIiwibGluZVRvb2xzIiwicGF0dGVyblRvb2xzIiwicG9pbnRUb29scyIsInByZXBhcmVDaGFydEZvckRyYXdpbmciLCJjaGFydE9wdGlvbnMiLCJzZXJpZXMiLCJjYW52YXMiLCJjbGVhclJlY3QiLCJmcmFtZXMiLCJlbXB0eUZyYW1lIiwiZ2V0RnJhbWUiLCJzdHJva2VGcmFtZSIsInNob3dUaXRsZSIsInRpdGxlIiwidGl0bGVGcmFtZSIsImdldFRpdGxlRnJhbWUiLCJkcmF3VGl0bGUiLCJjdXRGcmFtZXMiLCJzaG93TGVnZW5kIiwibGVnZW5kRnJhbWUiLCJnZXRMZWdlbmRGcmFtZSIsImRyYXdMZWdlbmQiLCJmcmFtZSIsImhTcGFjZSIsInNlcmllQ291bnQiLCJzcXJ0IiwiZ2V0QmFzaWNMYWJlbHNGcmFtZSIsImlkIiwiY3V0IiwiZ2V0V2lkdGhPZlZhbHVlc1BhbmUiLCJ0aWNrSW5mbyIsIm1pblZhbCIsImZvbnQiLCJtZWFzdXJlVGlja1RleHRNYXhXaWR0aCIsImdldExhYmVsc0ZyYW1lRmlsbGVkIiwicGxvdEZyYW1lIiwib3lXaWR0aCIsImxhYmVscyIsImFyZWFXaWR0aCIsImFyZWFzIiwibnVtIiwibGFiZWwiLCJ0eHQiLCJsYWJlbEZyYW1lSCIsIm1lYXN1cmVtZW50IiwibWVhc3VyZVRleHQiLCJpTG9vcCIsIm5ld0ZvbnRTaXplIiwic2F2ZSIsInJvdCIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwieEFyZWFBZGRpdGlvbmFsIiwieUFyZWFBZGRpdGlvbmFsIiwieEFyZWFCZWdpbm5pbmciLCJ5QXJlYSIsImEiLCJ0cmFuc2xhdGlvbiIsInJlc3RvcmUiLCJjb250ZW50RnJhbWUiLCJtYXhNZWFzdXJlbWVudCIsIlN0cmluZyIsImRyYXdHcmlkSG9yaXpvbnRhbExpbmVzIiwic2luZ2xlSCIsIm1heFdpZHRoIiwidGV4dE1lYXN1cmVtZW50IiwidGV4dFdpZHRoIiwidGV4dFBvc2l0aW9uWCIsInRleHRQb3NpdGlvblkiLCJsZXZlbHMiLCJmcmFtZVciLCJmcmFtZUgiLCJkcmF3U2luZ2xlU2VyaWVMZWdlbmQiLCJwcmVwYXJlU2luZ2xlU2VyaWVMZWdlbmQiLCJzRWRnZU91dGVyQm94Iiwic1BhZGRpbmciLCJzRWRnZUlubmVyQm94IiwibW9yZVRoYW5PbmVMZXZlbCIsImZvbnREaXZpZGVyIiwib3ZlcmxhcCIsImJveEFuZFRleHRXIiwiUGxvdCIsInBsb3RLaXQiLCJQb2ludFBsb3QiLCJQSVhFTF9QQURESU5HIiwiZGF0YSIsImxhYmVsRnJhbWUiLCJ4TWluTWF4Rm9yU2VyaWVzIiwiZ2V0TWluTWF4Rm9yU2VyaWVzIiwieU1pbk1heEZvclNlcmllcyIsInNwYWNlQmV0d2VlblRpY2tzUGl4ZWxIZWlnaHQiLCJ4VmFsdWVUb1BpeGVsTWFwcGVyT3B0aW9ucyIsImJlZ2lubmluZ0luUGl4ZWxzIiwid2lkdGhPckhlaWdodEluUGl4ZWxzIiwibWluVmFsdWVGcm9tU2VyaWVzIiwibWF4VmFsdWVGcm9tU2VyaWVzIiwieVZhbHVlVG9QaXhlbE1hcHBlck9wdGlvbnMiLCJ4VmFsdWVUb1BpeGVsTWFwcGVyRnVuYyIsInhHZXRWYWx1ZVRvUGl4ZWxNYXBwZXJGdW5jIiwieVZhbHVlVG9QaXhlbE1hcHBlckZ1bmMiLCJ5R2V0VmFsdWVUb1BpeGVsTWFwcGVyRnVuYyIsImRhdGFGb3JTZXJpZSIsInlNaW5Gb3JTZXJpZXMiLCJtYXBwZXJzIiwieEZ1bmMiLCJ5RnVuYyIsInBlcmZvcm1EcmF3aW5nIiwicG9pbnRzIiwicG9pbnQiLCJtYXBwZWRQb2ludCIsIm1hcFNwYWNlUG9pbnRUb1BpeGVsUG9pbnQiLCJzaG93VmFsdWUiLCJkcmF3VmFsdWVGb3JQb2ludCIsIm9mIiwiZmlyc3RTZXJpZVdpdGhWYWx1ZXMiLCJmaW5kSW5kZXgiLCJmaXJzdFBvc3NpYmxlTWluTWF4IiwiaW5pdGlhbE1pbk1heCIsIm1pbk1heFJlZHVjZUZ1bmMiLCJtaW5NYXhSZWR1Y2VGdW5jRmFjdG9yeSIsIm1pbk1heEZvclNlcmllc0FycmF5IiwicmVkdWNlIiwicHJldiIsImN1ciIsIm9wdCIsInhNYXBwZXIiLCJ5TWFwcGVyIiwieFZhbHVlIiwieFBpeGVsUG9zIiwidGV4dCIsIkxpbmVQbG90Iiwic2VyaWVJbmRleCIsInBvaW50c0luU2VyaWUiLCJwYXRoIiwiUGF0aDJEIiwiZmlyc3RQb2ludCIsInBvaW50SW5kZXgiLCJ0eXBlVG9DbGFzc1BhaXJzIiwiUkFESVVTX0RJVklERVIiLCJtYXBTZXJpZXNUb1BpZVBhcnREYXRhIiwicHJlY2VudGFnZVZhbHVlcyIsInBpZVJhZGl1cyIsInBpZUNlbnRlciIsImFjY1JhZGlhbnMiLCJlbnRyeSIsIm1ha2VQaWVQYXJ0UGF0aCIsInJhZGlhbnMiLCJib3JkZXJXaWR0aCIsInN0cm9rZUJvcmRlciIsImFkZFBpZVZhbHVlIiwic2hvd1ByZWNlbnRhZ2VzIiwidG90YWwiLCJiIiwieENlbnRlciIsInlDZW50ZXIiLCJyYWRpdXMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJwcmVjZW50YWdlIiwidG9QcmVjaXNpb24iLCJtYXhUZXh0V2lkdGgiLCJjb3MiLCJzaW4iLCJDT0xfU1BBQ0VfU0laRSIsIlZBTFVFX0JPVFRPTV9QQURESU5HIiwiZGF0YUxhYmVscyIsImJhckFyZWFzIiwiYWxsRnJhbWVzIiwidmFsdWVzIiwib1l3aWR0aCIsImJhckFyZWFXaWR0aCIsInBhZGRpbmdXaWR0aCIsIm9uZUNvbHVtbldpZHRoIiwic2hvd0xhYmVscyIsImZpbHRlciIsImhTcGFjZUJldHdlZW5UaWNrcyIsInlDb2x1bW5Cb3R0b20iLCJweEZvbnRGb3JWYWx1ZSIsInMiLCJ4Q29sdW1uIiwiaENvbHVtbiIsInlDb2x1bW4iLCJkcmF3QmFyIiwieHBvcyIsInlwb3MiLCJmaWxsQmFyIiwic3Ryb2tlQmFyIiwiYWRkQmFyVmFsdWUiLCJ2YWx1ZVN0cmluZyIsInhWYWx1ZUNlbnRlcmVkIiwiYm90dG9tIiwibGFzdFBvaW50IiwiQ2hhcnQiLCJjaGFydFR5cGUiLCJzZXJpZXNEYXRhIiwiYW5hbHl6ZWRFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXBsYWNlIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJjb250ZXh0IiwiQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwiRXJyb3IiLCJzZXREZWZhdWx0Q2hhcnRPcHRpb25zIiwicGxvdCIsIkNsYXNzUmVmIiwicGxvdFNlcnZhbnQiLCJnZXREZWZhdWx0U2VyaWVPYmplY3RCYXNlIiwidG9TdHJpbmciLCJzaG93T25MZWdlbmQiLCJzZXRDaGFydE9wdGlvbnMiLCJzZXRTZXJpZU9wdGlvbnMiLCJ3aGljaFNlcmllcyIsInNlcmllTmFtZSIsImFjdHVhbFNlcmllIiwiZXhpc3RpbmdTZXJpZSIsIk11bHRpQ2hhcnQiLCJzZXJpZU5hbWVzIiwibmFtZXMiLCJzdXBlciIsIlBvaW50Q2hhcnQiLCJjb3VudCIsInN0YXJ0c1dpdGgiLCJnZXREZWZhdWx0U2VyaWVPYmplY3QiLCJYIiwiYXJnc1BlclNlcmllIiwiYXJncyIsIlkiLCJ2YWxzIiwibWluTGVuIiwiaW50ZXJuYWxNaW5MZW4iLCJqIiwic29ydCIsIkxpbmVDaGFydCIsIm1hcHBlZFZhbHVlcyIsIm9wdGlvbiIsImNoYXJ0T3B0cyIsIm1hcHBlZFNlcmllcyIsInNlcnZlQ2hhcnQiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iXSwic291cmNlUm9vdCI6IiJ9