var t={d:(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{Z:()=>l});class s{constructor(t){this.ctx=t}strokeFrameForTest(t,e){this.ctx.strokeStyle=e,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black"}getContentFrame(){const{width:t,height:e}=this.ctx.canvas,s=Math.floor(Math.min(t,e)/100);return{x:s,y:s,w:t-2*s,h:e-2*s}}getTitleFrame(t){const e=Math.floor(t.h/10);return{x:t.x,y:t.y,h:e,w:t.w}}getRemainingContentFrame(t,e){return{x:t.x,y:t.y<e.y?t.y:e.y+e.h,w:t.w,h:t.h-e.h}}getLegendFrame(t){const e=Math.floor(t.h/10);return{x:t.x,y:t.y+t.h-e,h:e,w:t.w}}drawTitle(t,e){const{ctx:s}=this,r=this.getTitleFrame(e),{x:o,y:i,w:n,h:a}=r;s.font=`${Math.floor(a/2)}px sans-serif`;const h=s.measureText(t),l=o+n/2-h.width/2,c=i+a/2+h.actualBoundingBoxAscent/2;return s.fillText(t,l,c,n),this.strokeFrameForTest(r,"red"),this.getRemainingContentFrame(e,r)}drawLegend(t){const e=this.getLegendFrame(t);return this.strokeFrameForTest(e,"green"),this.getRemainingContentFrame(t,e)}prepareChartForDrawing(t){const{ctx:e}=this,{width:s,height:r}=e.canvas;this.ctx.clearRect(0,0,s,r);let o=this.getContentFrame();return this.strokeFrameForTest(o,"blue"),t.showTitle&&t.title&&(o=this.drawTitle(t.title,o)),t.showLegend&&(o=this.drawLegend(o)),this.strokeFrameForTest(o,"yellow"),o}drawGridHorizontalLines(t,e){const{ctx:s}=this,r=function(t,e){const s=t/10,r=Math.pow(10,Math.floor(Math.log10(s))),o=s/r,i=(o<10?[1,1.5,2,3,5,7,10].find((t=>t>o)):10)*r;return{tickHeight:i,tickCount:Math.ceil(t/i)}}(Math.max(...t.map((t=>Math.max(...t.values))))),o=e.h/r.tickCount+1;s.lineWidth=3,s.strokeStyle="gray";for(let t=1;t<=r.tickCount;t++){const r=e.y+o*t;s.beginPath(),s.moveTo(e.x,r),s.lineTo(e.x+e.w,r),s.stroke(),s.closePath()}return r}}const r=class{static sliceOrFill(t,e,s){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=s?s:0);return t}static mergeRight(t,e){const s=Object.keys(e);Object.entries(t).forEach((t=>{const r=t[0];if(s.includes(r)){const s=t[1];e[r]=s}}))}};class o{constructor(t){let e=t;if("string"==typeof e&&(e=document.getElementById(e.replace("/^#/",""))),e instanceof HTMLCanvasElement)this.context=e.getContext("2d");else{if(!(e instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=e}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1},this.seriesData=[],this.plot=new s(this.context)}setChartOptions(t){r.mergeRight(t,this.chartOptions)}setSerieOptions(t,e){e?e.forEach((e=>{const s=this.seriesData.find((t=>t.name==e));s?r.mergeRight(t,s.options):console.warn(`Serie with name ${e} not found.`)})):this.seriesData.forEach((e=>r.mergeRight(t,e.options)))}}class i extends s{constructor(t){super(t.ctx)}drawBar(t,e,s,r,o){console.log(o),this.ctx.fillStyle=o,this.ctx.lineWidth=1,this.ctx.fillRect(t,e,s,r)}drawBars(t,e){const{ctx:s}=this,r=this.prepareChartForDrawing(e),o=this.drawGridHorizontalLines(t,r),i=t.length,n=r.w/i,a=.75*n,h=(n-a)/2,l=t[0].values.length,c=a/l*.75;for(let e=0;e<l;e++)for(let s=0;s<i;s++){const i=t[s].values[e]*r.h/o.tickCount+1;this.drawBar(r.x+s*n+h+e*c,r.y+r.h-i,c,i,t[e].options.color)}}}class n extends o{constructor(t){super(t),this.plot=new i(this.plot)}set X(t){this.dataLabels=t}set Y(t){const{length:e}=this.dataLabels;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=t.map((t=>r.sliceOrFill(t,e)));this.seriesData=s.map(((t,e)=>this.getDefaultSerieObject(t,e)))}getDefaultSerieObject(t,e){return{values:t,name:`serie${e}`,options:{color:Math.floor(16777215*Math.random()).toString(16),showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.plot.drawBars(this.seriesData,this.chartOptions)}}class a extends s{constructor(t){super(t.ctx)}drawPie(t,e){const{ctx:s}=this,r=this.prepareChartForDrawing(e),o=this.mapSeriesToPieDegAndColor(t),i=Math.min(r.w,r.h)/2.5,n={x:r.x+r.w/2,y:r.y+r.h/2};let a=0;o.forEach((t=>{s.fillStyle=t.color,s.beginPath(),s.moveTo(n.x,n.y),s.arc(n.x,n.y,i,a,a+=t.rad),s.lineTo(n.x,n.y),s.fill()})),a=0,o.forEach((t=>{t.thickness>0?(s.strokeStyle="black",s.lineWidth=t.thickness,s.beginPath(),s.moveTo(n.x,n.y),s.arc(n.x,n.y,i,a,a+=t.rad),s.lineTo(n.x,n.y),s.stroke()):a+=t.rad}))}mapSeriesToPieDegAndColor(t){const e=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({rad:2*t.value*Math.PI/e,color:t.options.color,thickness:t.options.edgeThickness})))}}class h extends o{constructor(t){super(t),this.plot=new a(this.plot)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(t){const{length:e}=this.seriesData;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=r.sliceOrFill(t,e);this.seriesData.map(((t,e)=>{t.value=s[e]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.plot.drawPie(this.seriesData,this.chartOptions)}}function l(t,e){switch(t.toLowerCase().trim()){case"pie":return new h(e);case"bar":return new n(e);default:throw new Error(`${t} chart is not defined.`)}}var c=e.Z;export{c as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,