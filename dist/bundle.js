var t={d:(r,e)=>{for(var a in e)t.o(e,a)&&!t.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:e[a]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{Z:()=>p});const e="attribute vec2 a_position;\r\nuniform mat3 u_matrix;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n}",a="precision mediump float;\r\nuniform vec4 u_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = u_color;\r\n}";function n(t,r,e){const a=function(t,r,e){const a=t.createProgram();if(t.attachShader(a,r),t.attachShader(a,e),t.linkProgram(a),t.getProgramParameter(a,t.LINK_STATUS))return a;const n=t.getProgramInfoLog(a);throw t.deleteProgram(a),Error(n)}(t,i(t,t.VERTEX_SHADER,r),i(t,t.FRAGMENT_SHADER,e));return a}function i(t,r,e){const a=t.createShader(r);if(t.shaderSource(a,e),t.compileShader(a),t.getShaderParameter(a,t.COMPILE_STATUS))return a;const n=t.getShaderInfoLog(a);throw t.deleteShader(a),Error(n)}function o(t){return t.startsWith("gl_")||t.startsWith("webgl_")}function s(t,r,e){switch(r){case t.FLOAT:return r=>t.uniform1fv(e,r);case t.FLOAT_VEC2:return r=>t.uniform2fv(e,r);case t.FLOAT_VEC3:return r=>t.uniform3fv(e,r);case t.FLOAT_VEC4:return r=>t.uniform4fv(e,r);case t.INT:return r=>t.uniform1iv(e,r);case t.INT_VEC2:return r=>t.uniform2iv(e,r);case t.INT_VEC3:return r=>t.uniform3iv(e,r);case t.INT_VEC4:return r=>t.uniform4iv(e,r);case t.FLOAT_MAT2:return r=>t.uniformMatrix2fv(e,!1,r);case t.FLOAT_MAT3:return r=>t.uniformMatrix3fv(e,!1,r);case t.FLOAT_MAT4:return r=>t.uniformMatrix4fv(e,!1,r);default:throw Error(`Type 0x${r} is invalid.`)}}function c(t,r){const e=t.getProgramParameter(r,t.ACTIVE_UNIFORMS),a={};for(let n=0;n<e;n++){const e=t.getActiveUniform(r,n),{name:i}=e;if(!o(i)){const n=t.getUniformLocation(r,i);if(null!=n){const r=s(t,e.type,n);a[i.endsWith("[0]")?i.substr(0,i.length-3):i]=r}}}return a}function h(t,r){for(const e in r)t[e](r[e])}function l(t,r,e){const a={};for(const n in e){const i=t.getAttribLocation(r,n),o=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,e[n],t.STATIC_DRAW),a[n]={buffer:o,byteLength:e[n].byteLength,location:i}}return a}class u{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(t,r){return[2/t,0,0,0,2/r,0,-1,-1,1]}translationMatrix(t,r){return[1,0,0,0,1,0,t,r,1]}rotationMatrix(t){const r=t/180*Math.PI,e=Math.sin(r),a=Math.cos(r);return[a,-e,0,e,a,0,0,0,1]}scaleMatrix(t,r){return[t,0,0,0,r,0,0,0,1]}arrayToMatrix(t,r){const e=[];for(let a=0;a<t.length;a+=r)e.push(t.slice(a,a+r));return e}multiplyMatrices(t,r){if(t.length===r.length&&[1,4,9,16].includes(t.length)){const e=Math.sqrt(t.length),a=this.arrayToMatrix(t,e),n=this.arrayToMatrix(r,e);return a.map(((t,r)=>n[0].map(((e,i)=>t.reduce(((t,e,o)=>t+a[r][o]*n[o][i]),0))))).flat(1)}}getTransformationMatrix(t){const r=this.identityMatrix(),e=this.projectionMatrix(t.canvas.width,t.canvas.height),a=this.translationMatrix(0,0),n=this.rotationMatrix(0),i=this.scaleMatrix(1,1);let o=this.multiplyMatrices(r,e);return o=this.multiplyMatrices(o,a),o=this.multiplyMatrices(o,n),o=this.multiplyMatrices(o,i),o}}class f{constructor(t){this.gl=t}drawLines(t){const{gl:r}=this,i=Math.max(...t.map(Math.abs)),o=this.getTickInfo(i,8),s=r.canvas.width,f=r.canvas.height,m=Math.floor(Math.min(s,f)/100),g=(f-2*m)/7,d=[],M=m,p=s-m;for(let t=1;t<=o.tickCount;t++){const r=t*g;d.push(M,r,p,r)}const _={u_color:[.7,.7,.7,1],u_matrix:(new u).getTransformationMatrix(r)},b={a_position:new Int16Array(d)},w=n(r,e,a);r.useProgram(w),h(c(r,w),_);const v=l(r,w,b);!function(t){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)}(r),r.useProgram(w),r.enableVertexAttribArray(v.a_position.location),r.bindBuffer(r.ARRAY_BUFFER,v.a_position.buffer),r.vertexAttribPointer(v.a_position.location,2,r.SHORT,!1,0,0),r.drawArrays(r.LINES,0,d.length/2)}drawBars(t){const{gl:r}=this,i=r.canvas.width,o=r.canvas.height,s=Math.floor(Math.min(i,o)/100),f=i-2*s,m=(o-2*s)/Math.max(...t),g=[],d=t.length,M=f/d;for(let r=0;r<d;r++){const e=s+t[r]*m,a=s+M*r+M/5,n=s+M*(r+1)-M/5;g.push(a,s,a,e,n,e),g.push(a,s,n,s,n,e)}const p=n(r,e,a);r.useProgram(p);const _=c(r,p),b=l(r,p,{a_position:new Float32Array(g)});h(_,{u_matrix:(new u).getTransformationMatrix(r)}),r.enableVertexAttribArray(b.a_position.location),r.bindBuffer(r.ARRAY_BUFFER,b.a_position.buffer);for(let t=0;t<d;t++)h(_,{u_color:[Math.random(),Math.random(),Math.random(),1]}),r.vertexAttribPointer(b.a_position.location,2,r.FLOAT,!1,0,12*t*Float32Array.BYTES_PER_ELEMENT),r.drawArrays(r.TRIANGLES,0,12)}getTickInfo(t,r){const e=t/r,a=Math.pow(10,Math.floor(Math.log10(e))),n=e/a,i=(n<10?[1,1.5,2,3,5,7,10].find((t=>t>n)):10)*a;return{tickHeight:i,tickCount:Math.ceil(t/i)}}}const m=class{static sliceOrFill(t,r,e){if(t.length===r)return t;if(t.length>r)return t.slice(0,r);if(t.length<r)for(;t.length!==r;)t.push(null!=e?e:0);return t}static mergeRight(t,r){const e=Object.keys(r);Object.entries(t).forEach((t=>{const a=t[0];if(e.includes(a)){const e=t[1];r[a]=e}}))}};class g{constructor(t){let r=t;if("string"==typeof r&&(r=document.getElementById(r.replace("/^#/",""))),r instanceof HTMLCanvasElement)this.context=r.getContext("webgl");else{if(!(r instanceof WebGLRenderingContext))throw Error("Argument must be valid ID, HTMLCanvasElement or WebGLRenderingContext");this.context=r}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1},this.seriesData=[],this.chartDraftsman=new f(this.context)}setChartOptions(t){m.mergeRight(t,this.chartOptions)}setSerieOptions(t,r){r?r.forEach((r=>{const e=this.seriesData.find((t=>t.name==r));e?m.mergeRight(t,e.options):console.warn(`Serie with name ${r} not found.`)})):this.seriesData.forEach((r=>m.mergeRight(t,r.options)))}}class d extends g{constructor(t){super(t)}set X(t){this.dataLabels=t}set Y(t){const{length:r}=this.dataLabels;if(!r)throw Error('Values on "X" axis must be specified before setting "Y" values.');const e=t.map((t=>m.sliceOrFill(t,r)));this.seriesData=e.map(((t,r)=>this.getDefaultSerieObject(t,r)))}getDefaultSerieObject(t,r){return{values:t,name:`serie${r}`,options:{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.chartDraftsman.drawLines(this.seriesData[0].values),this.chartDraftsman.drawBars(this.seriesData[0].values)}}class M extends g{constructor(t){super(t)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(t){const{length:r}=this.seriesData;if(!r)throw Error('Values on "X" axis must be specified before setting "Y" values.');const e=m.sliceOrFill(t,r);this.seriesData.map(((t,r)=>{t.value=e[r]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){throw Error("Not implemented yet")}}function p(t,r){switch(t.toLowerCase().trim()){case"pie":return new M(r);case"bar":return new d(r);default:throw new Error(`${t} chart is not defined.`)}}var _=r.Z;export{_ as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,