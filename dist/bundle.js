var t={d:(r,e)=>{for(var a in e)t.o(e,a)&&!t.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:e[a]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{Z:()=>w});const e="attribute vec2 a_position;\r\nuniform mat3 u_matrix;\r\n\r\nvoid main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n}",a="precision mediump float;\r\nuniform vec4 u_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = u_color;\r\n}";function n(t,r,e){const a=function(t,r,e){const a=t.createProgram();if(t.attachShader(a,r),t.attachShader(a,e),t.linkProgram(a),t.getProgramParameter(a,t.LINK_STATUS))return a;const n=t.getProgramInfoLog(a);throw t.deleteProgram(a),Error(n)}(t,o(t,t.VERTEX_SHADER,r),o(t,t.FRAGMENT_SHADER,e));return a}function o(t,r,e){const a=t.createShader(r);if(t.shaderSource(a,e),t.compileShader(a),t.getShaderParameter(a,t.COMPILE_STATUS))return a;const n=t.getShaderInfoLog(a);throw t.deleteShader(a),Error(n)}function i(t){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)}function s(t){return t.startsWith("gl_")||t.startsWith("webgl_")}function c(t,r,e){switch(r){case t.FLOAT:return r=>t.uniform1fv(e,r);case t.FLOAT_VEC2:return r=>t.uniform2fv(e,r);case t.FLOAT_VEC3:return r=>t.uniform3fv(e,r);case t.FLOAT_VEC4:return r=>t.uniform4fv(e,r);case t.INT:return r=>t.uniform1iv(e,r);case t.INT_VEC2:return r=>t.uniform2iv(e,r);case t.INT_VEC3:return r=>t.uniform3iv(e,r);case t.INT_VEC4:return r=>t.uniform4iv(e,r);case t.FLOAT_MAT2:return r=>t.uniformMatrix2fv(e,!1,r);case t.FLOAT_MAT3:return r=>t.uniformMatrix3fv(e,!1,r);case t.FLOAT_MAT4:return r=>t.uniformMatrix4fv(e,!1,r);default:throw Error(`Type 0x${r} is invalid.`)}}function h(t,r){const e=t.getProgramParameter(r,t.ACTIVE_UNIFORMS),a={};for(let n=0;n<e;n++){const e=t.getActiveUniform(r,n),{name:o}=e;if(!s(o)){const n=t.getUniformLocation(r,o);if(null!=n){const r=c(t,e.type,n);a[o.endsWith("[0]")?o.substr(0,o.length-3):o]=r}}}return a}function l(t,r){for(const e in r)t[e](r[e])}function u(t,r,e){const a={};for(const n in e){const o=t.getAttribLocation(r,n),i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,e[n],t.STATIC_DRAW),a[n]={buffer:i,byteLength:e[n].byteLength,location:o}}return a}class f{identityMatrix(){return[1,0,0,0,1,0,0,0,1]}projectionMatrix(t,r){return[2/t,0,0,0,2/r,0,-1,-1,1]}translationMatrix(t,r){return[1,0,0,0,1,0,t,r,1]}rotationMatrix(t){const r=t/180*Math.PI,e=Math.sin(r),a=Math.cos(r);return[a,-e,0,e,a,0,0,0,1]}scaleMatrix(t,r){return[t,0,0,0,r,0,0,0,1]}arrayToMatrix(t,r){const e=[];for(let a=0;a<t.length;a+=r)e.push(t.slice(a,a+r));return e}multiplyMatrices(t,r){if(t.length===r.length&&[1,4,9,16].includes(t.length)){const e=Math.sqrt(t.length),a=this.arrayToMatrix(t,e),n=this.arrayToMatrix(r,e);return a.map(((t,r)=>n[0].map(((e,o)=>t.reduce(((t,e,i)=>t+a[r][i]*n[i][o]),0))))).flat(1)}}getTransformationMatrix(t){const r=this.identityMatrix(),e=this.projectionMatrix(t.canvas.width,t.canvas.height),a=this.translationMatrix(0,0),n=this.rotationMatrix(0),o=this.scaleMatrix(1,1);let i=this.multiplyMatrices(r,e);return i=this.multiplyMatrices(i,a),i=this.multiplyMatrices(i,n),i=this.multiplyMatrices(i,o),i}}class m{constructor(t){this.gl=t}getContentFrame(t,r){const e=Math.floor(Math.min(t,r)/100);return{x:e,y:e,w:t-2*e,h:r-2*e}}drawTitle(t,r){const{canvas:e}=this.gl,a=e.getContext("2d");a.clearRect(0,0,e.width,e.height);const n=Math.floor(r.h/10),o={x:r.x,y:r.y+r.h-n,h:n,w:r.w};a.fillText(t,o.x,o.y,o.w)}drawPie(t,r){const{gl:o}=this,{canvas:s}=o,c=this.getContentFrame(o.canvas.width,o.canvas.height);r.showTitle&&r.title&&this.drawTitle(r.title,c);const m=t.map((t=>t.value)).reduce(((t,r)=>t+r),0),g=t.map((t=>Math.round(360*t.value/m))),d=s.width/2,M=s.height/2,p=new f,w=n(o,e,a);o.useProgram(w);const _=h(o,w);l(_,{u_matrix:p.getTransformationMatrix(o)}),i(o),o.useProgram(w);let x=0;g.forEach(((r,e)=>{const a=t[e].options.color;l(_,{u_color:[a.r/255,a.g/255,a.b/255,a.a/255]});const n=[];n.push(d,M);const i=x;x+=r;for(let t=i;t<=x;t+=1){const r=t*Math.PI/180;n.push(d+Math.sin(r)*Math.floor(d/2)),n.push(M+Math.cos(r)*Math.floor(d/2))}const s={a_position:new Float32Array(n)},c=u(o,w,s);o.enableVertexAttribArray(c.a_position.location),o.bindBuffer(o.ARRAY_BUFFER,c.a_position.buffer),o.vertexAttribPointer(c.a_position.location,2,o.FLOAT,!1,0,0),o.drawArrays(o.TRIANGLE_FAN,0,n.length/2)}))}drawLines(t){const{gl:r}=this,o=Math.max(...t.map(Math.abs)),s=this.getTickInfo(o,8),c=r.canvas.width,m=r.canvas.height,g=Math.floor(Math.min(c,m)/100),d=(m-2*g)/7,M=[],p=g,w=c-g;for(let t=1;t<=s.tickCount;t++){const r=t*d;M.push(p,r,w,r)}const _={u_color:[.7,.7,.7,1],u_matrix:(new f).getTransformationMatrix(r)},x={a_position:new Int16Array(M)},A=n(r,e,a);r.useProgram(A),l(h(r,A),_);const b=u(r,A,x);i(r),r.useProgram(A),r.enableVertexAttribArray(b.a_position.location),r.bindBuffer(r.ARRAY_BUFFER,b.a_position.buffer),r.vertexAttribPointer(b.a_position.location,2,r.SHORT,!1,0,0),r.drawArrays(r.LINES,0,M.length/2)}drawBars(t){const{gl:r}=this,o=r.canvas.width,i=r.canvas.height,s=Math.floor(Math.min(o,i)/100),c=o-2*s,m=(i-2*s)/Math.max(...t),g=[],d=t.length,M=c/d;for(let r=0;r<d;r++){const e=s+t[r]*m,a=s+M*r+M/5,n=s+M*(r+1)-M/5;g.push(a,s,a,e,n,e),g.push(a,s,n,s,n,e)}const p=n(r,e,a);r.useProgram(p);const w=h(r,p),_=u(r,p,{a_position:new Float32Array(g)});l(w,{u_matrix:(new f).getTransformationMatrix(r)}),r.enableVertexAttribArray(_.a_position.location),r.bindBuffer(r.ARRAY_BUFFER,_.a_position.buffer);for(let t=0;t<d;t++)l(w,{u_color:[Math.random(),Math.random(),Math.random(),1]}),r.vertexAttribPointer(_.a_position.location,2,r.FLOAT,!1,0,12*t*Float32Array.BYTES_PER_ELEMENT),r.drawArrays(r.TRIANGLES,0,12)}getTickInfo(t,r){const e=t/r,a=Math.pow(10,Math.floor(Math.log10(e))),n=e/a,o=(n<10?[1,1.5,2,3,5,7,10].find((t=>t>n)):10)*a;return{tickHeight:o,tickCount:Math.ceil(t/o)}}}const g=class{static sliceOrFill(t,r,e){if(t.length===r)return t;if(t.length>r)return t.slice(0,r);if(t.length<r)for(;t.length!==r;)t.push(null!=e?e:0);return t}static mergeRight(t,r){const e=Object.keys(r);Object.entries(t).forEach((t=>{const a=t[0];if(e.includes(a)){const e=t[1];r[a]=e}}))}};class d{constructor(t){let r=t;if("string"==typeof r&&(r=document.getElementById(r.replace("/^#/",""))),r instanceof HTMLCanvasElement)this.context=r.getContext("webgl");else{if(!(r instanceof WebGLRenderingContext))throw Error("Argument must be valid ID, HTMLCanvasElement or WebGLRenderingContext");this.context=r}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1},this.seriesData=[],this.chartDraftsman=new m(this.context)}setChartOptions(t){g.mergeRight(t,this.chartOptions)}setSerieOptions(t,r){r?r.forEach((r=>{const e=this.seriesData.find((t=>t.name==r));e?g.mergeRight(t,e.options):console.warn(`Serie with name ${r} not found.`)})):this.seriesData.forEach((r=>g.mergeRight(t,r.options)))}}class M extends d{constructor(t){super(t)}set X(t){this.dataLabels=t}set Y(t){const{length:r}=this.dataLabels;if(!r)throw Error('Values on "X" axis must be specified before setting "Y" values.');const e=t.map((t=>g.sliceOrFill(t,r)));this.seriesData=e.map(((t,r)=>this.getDefaultSerieObject(t,r)))}getDefaultSerieObject(t,r){return{values:t,name:`serie${r}`,options:{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.chartDraftsman.drawLines(this.seriesData[0].values),this.chartDraftsman.drawBars(this.seriesData[0].values)}}class p extends d{constructor(t){super(t)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(t){const{length:r}=this.seriesData;if(!r)throw Error('Values on "X" axis must be specified before setting "Y" values.');const e=g.sliceOrFill(t,r);this.seriesData.map(((t,r)=>{t.value=e[r]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:255},showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.chartDraftsman.drawPie(this.seriesData,this.chartOptions)}}function w(t,r){switch(t.toLowerCase().trim()){case"pie":return new p(r);case"bar":return new M(r);default:throw new Error(`${t} chart is not defined.`)}}var _=r.Z;export{_ as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,