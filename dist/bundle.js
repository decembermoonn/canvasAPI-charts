var e={d:(t,s)=>{for(var r in s)e.o(s,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:s[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{Z:()=>h});class s{constructor(e){this.ctx=e}strokeFrameForTest(e,t){this.ctx.strokeStyle=t,this.ctx.strokeRect(e.x,e.y,e.w,e.h),this.ctx.strokeStyle="black"}getContentFrame(){const{width:e,height:t}=this.ctx.canvas,s=Math.floor(Math.min(e,t)/100);return{x:s,y:s,w:e-2*s,h:t-2*s}}getTitleFrame(e){const t=Math.floor(e.h/10);return{x:e.x,y:e.y,h:t,w:e.w}}getRemainingContentFrame(e,t){return{x:e.x,y:e.y<t.y?e.y:t.y+t.h,w:e.w,h:e.h-t.h}}getLegendFrame(e){const t=Math.floor(e.h/10);return{x:e.x,y:e.y+e.h-t,h:t,w:e.w}}drawTitle(e,t){const{ctx:s}=this,r=this.getTitleFrame(t),{x:i,y:n,w:o,h:a}=r;s.font=`${Math.floor(a/2)}px sans-serif`;const h=s.measureText(e),c=i+o/2-h.width/2,l=n+a/2+h.actualBoundingBoxAscent/2;return s.fillText(e,c,l,o),this.strokeFrameForTest(r,"red"),this.getRemainingContentFrame(t,r)}drawLegend(e){const t=this.getLegendFrame(e);return this.strokeFrameForTest(t,"green"),this.getRemainingContentFrame(e,t)}prepareChartForDrawing(e){const{ctx:t}=this,{width:s,height:r}=t.canvas;this.ctx.clearRect(0,0,s,r);let i=this.getContentFrame();return this.strokeFrameForTest(i,"blue"),e.showTitle&&e.title&&(i=this.drawTitle(e.title,i)),e.showLegend&&(i=this.drawLegend(i)),this.strokeFrameForTest(i,"yellow"),i}}const r=class{static sliceOrFill(e,t,s){if(e.length===t)return e;if(e.length>t)return e.slice(0,t);if(e.length<t)for(;e.length!==t;)e.push(null!=s?s:0);return e}static mergeRight(e,t){const s=Object.keys(t);Object.entries(e).forEach((e=>{const r=e[0];if(s.includes(r)){const s=e[1];t[r]=s}}))}};class i{constructor(e){let t=e;if("string"==typeof t&&(t=document.getElementById(t.replace("/^#/",""))),t instanceof HTMLCanvasElement)this.context=t.getContext("2d");else{if(!(t instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=t}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1},this.seriesData=[],this.plot=new s(this.context)}setChartOptions(e){r.mergeRight(e,this.chartOptions)}setSerieOptions(e,t){t?t.forEach((t=>{const s=this.seriesData.find((e=>e.name==t));s?r.mergeRight(e,s.options):console.warn(`Serie with name ${t} not found.`)})):this.seriesData.forEach((t=>r.mergeRight(e,t.options)))}}class n extends i{constructor(e){super(e)}set X(e){this.dataLabels=e}set Y(e){const{length:t}=this.dataLabels;if(!t)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=e.map((e=>r.sliceOrFill(e,t)));this.seriesData=s.map(((e,t)=>this.getDefaultSerieObject(e,t)))}getDefaultSerieObject(e,t){return{values:e,name:`serie${t}`,options:{color:Math.floor(16777215*Math.random()).toString(16),showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){}}class o extends s{constructor(e){super(e.ctx)}drawPie(e,t){const{ctx:s}=this,r=this.prepareChartForDrawing(t),i=this.mapSeriesToPieDegAndColor(e),n=Math.min(r.w,r.h)/2.5,o={x:r.x+r.w/2,y:r.y+r.h/2};let a=0;i.forEach((e=>{s.fillStyle=e.color,s.beginPath(),s.moveTo(o.x,o.y),s.arc(o.x,o.y,n,a,a+=e.rad),s.lineTo(o.x,o.y),s.fill()})),a=0,i.forEach((e=>{e.thickness>0?(s.strokeStyle="black",s.lineWidth=e.thickness,s.beginPath(),s.moveTo(o.x,o.y),s.arc(o.x,o.y,n,a,a+=e.rad),s.lineTo(o.x,o.y),s.stroke()):a+=e.rad}))}mapSeriesToPieDegAndColor(e){const t=e.map((e=>e.value)).reduce(((e,t)=>e+t),0);return e.map((e=>({rad:2*e.value*Math.PI/t,color:e.options.color,thickness:e.options.edgeThickness})))}}class a extends i{constructor(e){super(e),this.plot=new o(this.plot)}set X(e){this.seriesData=e.map((e=>this.getDefaultSerieObject(e)))}set Y(e){const{length:t}=this.seriesData;if(!t)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=r.sliceOrFill(e,t);this.seriesData.map(((e,t)=>{e.value=s[t]}))}getDefaultSerieObject(e){return{value:0,name:e,options:{color:Math.floor(16777215*Math.random()).toString(16),showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.plot.drawPie(this.seriesData,this.chartOptions)}}function h(e,t){switch(e.toLowerCase().trim()){case"pie":return new a(t);case"bar":return new n(t);default:throw new Error(`${e} chart is not defined.`)}}var c=t.Z;export{c as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,