var t={744:function(t){t.exports=function(){var t="rgba(100, 100, 100, 0.7)",e="rgba(255, 255, 255, 0.8)",i="round",s=(function(){function t(t){this.value=t}function e(e){var i,s;function n(i,s){try{var r=e[i](s),a=r.value;a instanceof t?Promise.resolve(a.value).then((function(t){n("next",t)}),(function(t){n("throw",t)})):o(r.done?"return":"normal",r.value)}catch(t){o("throw",t)}}function o(t,e){switch(t){case"return":i.resolve({value:e,done:!0});break;case"throw":i.reject(e);break;default:i.resolve({value:e,done:!1})}(i=i.next)?n(i.key,i.arg):s=null}this._invoke=function(t,e){return new Promise((function(o,r){var a={key:t,arg:e,resolve:o,reject:r,next:null};s?s=s.next=a:(i=s=a,n(t,e))}))},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),n=function(){function t(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,i,s){return i&&t(e.prototype,i),s&&t(e,s),e}}(),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},h=function(){function o(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;return s(this,o),this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.width=i,this._canvas.height=i,this._context.fillStyle=n,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._size=i,this._patternColor=r,this}return n(o,[{key:"setStrokeProps",value:function(){this._context.strokeStyle=this._patternColor,this._context.lineWidth=this._size/10,this._context.lineJoin=i,this._context.lineCap=i}},{key:"setFillProps",value:function(){this._context.fillStyle=this._patternColor}}]),o}(),l=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawPlus(),this.drawPlus(t,t),this._context.stroke(),this._canvas}},{key:"drawPlus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,0+e),this._context.lineTo(n+t,s+e),this._context.moveTo(0+t,n+e),this._context.lineTo(s+t,n+e),this._context.closePath()}}]),e}(h),c=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawCross(),this.drawCross(t,t),this._context.stroke(),this._canvas}},{key:"drawCross",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,s=2;this._context.moveTo(t+s,e+s),this._context.lineTo(i-s+t,i-s+e),this._context.moveTo(t+s,i-s+e),this._context.lineTo(i-s+t,e+s),this._context.closePath()}}]),e}(h),u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDash(),this.drawDash(t,t),this._context.stroke(),this._canvas}},{key:"drawDash",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,s=2;this._context.moveTo(t+s,e+s),this._context.lineTo(i-s+t,i-s+e),this._context.closePath()}}]),e}(h),p=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new c).drawCross.call(this),(new u).drawDash.call(this,t,t),this._context.stroke(),this._canvas}}]),e}(h),x=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDot(),this.drawDot(t,t),this._context.fill(),this._canvas}},{key:"drawDot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._size/10,s=this._size/4,n=s+t,o=s+e;this._context.moveTo(n+s,o),this._context.arc(n,o,i,0,2*Math.PI),this._context.closePath()}}]),e}(h),d=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new u).drawDash.call(this,t,t),this._context.closePath(),this._context.stroke(),this.setFillProps(),(new x).drawDot.call(this),this._context.fill(),this._canvas}}]),e}(h),f=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setFillProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.fill(),this._canvas}}]),e}(x),_=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setStrokeProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.stroke(),this._canvas}}]),e}(x),g=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawLine(),this.drawLine(t,t),this._context.stroke(),this._canvas}},{key:"drawLine",value:function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=this._size/4;this._context.moveTo(0,e+t),this._context.lineTo(this._size,e+t),this._context.closePath()}}]),e}(h),w=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),g.prototype.drawTile.call(this),this._canvas}}]),e}(g),y=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawWeave(0,0),this._context.stroke(),this._canvas}},{key:"drawWeave",value:function(t,e){var i=this._size,s=i/2;this._context.moveTo(t+1,e+1),this._context.lineTo(s-1,s-1),this._context.moveTo(s+1,i-1),this._context.lineTo(i-1,s+1),this._context.closePath()}}]),e}(h),v=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawZigzag(),this.drawZigzag(this._size/2),this._context.stroke(),this._canvas}},{key:"drawZigzag",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this._size,i=e/4,s=e/2,n=e/10;this._context.moveTo(0,n+t),this._context.lineTo(i,s-n+t),this._context.lineTo(s,n+t),this._context.lineTo(e-i,s-n+t),this._context.lineTo(e,n+t)}}]),e}(h),m=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),v.prototype.drawTile.call(this),this._canvas}}]),e}(v),P=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiagonalLine(),this.drawDiagonalLine(t,t),this._context.stroke(),this._canvas}},{key:"drawDiagonalLine",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=1;this._context.moveTo(s-n-t,-1*n+e),this._context.lineTo(i+1-t,s+1+e),this._context.closePath()}}]),e}(h),T=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),P.prototype.drawTile.call(this),this._canvas}}]),e}(P),b=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawSquare(),this.drawSquare(t,t),this._context.fill(),this._canvas}},{key:"drawSquare",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/20;this._context.fillRect(t+n,e+n,s-2*n,s-2*n),this._context.closePath()}}]),e}(h),S=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawBox(),this.drawBox(t,t),this._context.stroke(),this._canvas}},{key:"drawBox",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/20;this._context.strokeRect(t+n,e+n,s-4*n,s-4*n),this._context.closePath()}}]),e}(h),O=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawTriangle(),this.drawTriangle(t,t),this._context.fill(),this._canvas}},{key:"drawTriangle",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,e),this._context.lineTo(s+t,s+e),this._context.lineTo(t,s+e),this._context.closePath()}}]),e}(h),D=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size;return this._context.translate(t,t),this._context.rotate(180*Math.PI/180),O.prototype.drawTile.call(this),this._canvas}}]),e}(O),k=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.fill(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2,n=i/4;this._context.moveTo(n+t,e),this._context.lineTo(s+t,n+e),this._context.lineTo(n+t,s+e),this._context.lineTo(t,n+e),this._context.closePath()}}]),e}(h),E=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),n(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.stroke(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,s=i/2-1,n=i/4;this._context.moveTo(n+t,e+1),this._context.lineTo(s+t,n+e),this._context.lineTo(n+t,s+e),this._context.lineTo(t+1,n+e),this._context.closePath()}}]),e}(k),L={plus:l,cross:c,dash:u,"cross-dash":p,dot:x,"dot-dash":d,disc:f,ring:_,line:g,"line-vertical":w,weave:y,zigzag:v,"zigzag-vertical":m,diagonal:P,"diagonal-right-left":T,square:b,box:S,triangle:O,"triangle-inverted":D,diamond:k,"diamond-box":E},I=[];function F(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=Object.keys(L);t.forEach((function(t){e.splice(e.indexOf(t),1)}));var i=Math.floor(Math.random()*e.length);return e[i]}function M(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"square",e=arguments[1],i=arguments[2],s=arguments[3],n=document.createElement("canvas"),o=n.getContext("2d"),r=2*s,a=new(0,I[t])(s,e,i),h=o.createPattern(a.drawTile(),"repeat");return n.width=r,n.height=r,h.shapeType=t,h}return o(I,L,{circle:L.disc,"triangle-vertical":L["triangle-inverted"],"line-horizontal":L.line,"line-diagonal-lr":L.diagonal,"line-diagonal-rl":L["diagonal-right-left"],"zigzag-horizontal":L.zigzag,"diamond-outline":L["diamond-box"]}),{draw:M,generate:function(t){var e=void 0,i=void 0;return t.map((function(t,s,n){var o=void 0;return 0===s?(o=F(),e=i=o):s===n.length-1?o=F([i,e]):(o=F([i]),i=o),M(o,t)}))}}}()}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var s={};(()=>{i.d(s,{Z:()=>v});const t=class{static sliceOrFill(t,e,i){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=i?i:0);return t}static mergeRight(t,e){const i=Object.keys(e);Object.entries(t).forEach((t=>{const s=t[0];if(i.includes(s)){const i=t[1];e[s]=i}}))}static checkIfArrayOfArrays(t){return Array.isArray(t[0])}};function e(t,e=0,i=0){const s=Math.ceil(i-e),n=s/t,o=Math.pow(10,Math.floor(Math.log10(n))),r=n/o,a=(r<10?[1,1.5,2,3,5,7,10].find((t=>t>r)):10)*o;return{tickHeight:a,tickCount:Math.ceil(s/a)}}function n(t,e){return parseFloat(t.toFixed(e))}class o{constructor(t){this.ctx=t}}class r extends o{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{options:s,name:n}=e,{boxFrame:o,textCoords:r}=t,a=o.y+o.h/2,h={x:o.x,y:a},l={x:o.x+o.w,y:a};this.setLineStyle(s),this.drawSingleLine(h,l),i.fillStyle="black",i.fillText(n,r.x,r.y,r.maxW)}drawSingleLine(t,e){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),this.ctx.setLineDash([])}setLineStyle(t){const{ctx:e}=this;let{dash:i}=t;const{color:s,dashWidth:n}=t;e.lineWidth=null!=n?n:1,"string"==typeof i&&(i=this.dashStringToArray(i).map((t=>t*e.lineWidth))),e.setLineDash(null!=i?i:[]),e.strokeStyle=null!=s?s:"black"}dashStringToArray(t){switch(t){default:return[];case"p":return[1,1];case"ls":return[10,5];case"lls":return[20,5];case"lp":return[15,3,3,3];case"lppp":return[20,3,3,3,3,3,3,3];case"lpsp":return[8,2,2]}}}var a=i(744);class h extends o{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{name:s}=e,n=e.options,{boxFrame:o,textCoords:r}=t;this.applyShapeOrColor(i,n.shape,n.color),i.strokeStyle="black",i.lineWidth=3,i.fillRect(o.x,o.y,o.w,o.h),i.strokeRect(o.x,o.y,o.w,o.h),i.fillStyle="black",i.fillText(s,r.x,r.y,r.maxW)}applyShapeOrColor(t,e,i){if(t.fillStyle=i,null!=e)try{t.fillStyle=(0,a.draw)(e,i,"black")}catch(t){console.warn(`${e} is invalid shape. See documentation.`)}}}class l extends o{performDrawSingleSerieLegend(t,e){const{ctx:i}=this,{options:s,name:n}=e,{boxFrame:o,textCoords:r}=t;this.performDrawPoint({x:o.x+o.w/2,y:o.y+o.h/2},s),i.fillText(n,r.x,r.y,r.maxW)}performDrawPoint(t,e){const{pointShape:i,pointSize:s,color:n}=e;if(null==i)return;const o={e:t.x-s/2,f:t.y-s/2};let r;try{r=(0,a.draw)(i,"rgba(0,0,0,0)",n,2*s)}catch(t){return void console.warn(`${i} is invalid shape. See documentation.`)}r.setTransform(o),this.ctx.fillStyle=r,this.ctx.fillRect(o.e,o.f,s,s),this.ctx.fillStyle="black"}}class c{constructor(t,e){this.CHART_BORDER_COLOR="#202020",this.DIVIDER_LINE_COLOR="#484848",this.HORIZONTAL_LINE_COLOR="#808080",this.TITLE_AREA_MULTIPIER=.1,this.LEGEND_AREA_MULTIPIER=.1,this.LEGEND_PADDING_MULTIPIER=1,this.SERIE_LEGEND_PER_LEVEL=5,this.SERIE_PADDING_MULTIPIER=.15,this.LABELS_AREA_MULTIPIER=.05,this.MOST_TICKS=10,this.ctx=t,this.plotType=e,this.lineTools=new r(t),this.patternTools=new h(t),this.pointTools=new l(t)}prepareChartForDrawing(t,e){const{ctx:i}=this,{width:s,height:n}=i.canvas;this.ctx.clearRect(0,0,s,n);const o=[];let r=this.getFrame(0,0,s,n,"content");if(this.strokeFrame(r,this.DIVIDER_LINE_COLOR,5),t.showTitle&&t.title){const e=this.getTitleFrame(r);o.push(e),this.drawTitle(t.title,e),r=this.cutFrames(r,e)}if(t.showLegend){const t=this.getLegendFrame(r,e.length);o.push(t),this.drawLegend(e,t),r=this.cutFrames(r,t)}return o.push(r),o}getTitleFrame(t){const{x:e,y:i,w:s,h:n}=t,o=n*this.TITLE_AREA_MULTIPIER;return this.getFrame(e,i,s,o,"title")}getLegendFrame(t,e){const{x:i,y:s,w:n,h:o}=t,r=o*(.1+(e>=10?Math.sqrt((e-10)/10):0)*this.LEGEND_AREA_MULTIPIER);return this.getFrame(i,s+o-r,n,r,"legend")}getFrame(t,e,i,s,n){return{id:n,x:t,y:e,w:i,h:s}}cutFrames(t,e){const i=t.h===e.h?t.h:t.h-e.h,s=t.y===e.y?t.y+e.h:t.y,{x:n,w:o,id:r}=t;return{x:n,y:s,w:o,h:i,id:r}}yGetAxisTextMaxWidth(t,e,i){const{tickCount:s,tickHeight:n}=t;return this.ctx.font=`${i}px sans-serif`,this.measureTickTextMaxWidth(s,n,e)}getLabelsFrameFilled(t,e,i,s,n,o){const r=Math.max(...s.map((t=>t.length))),a=s.find((t=>t.length===r));let h=t.h*this.LABELS_AREA_MULTIPIER;this.ctx.font=`${h}px sans-serif`;let l=this.ctx.measureText(a),c=1;for(;c<4&&l.width>n;c++){const t=Math.max(h-c,5);this.ctx.font=`${t}px sans-serif`,l=this.ctx.measureText(a)}let u=l.width;this.ctx.save(),4===c&&(h=l.width,u=l.actualBoundingBoxAscent,this.ctx.rotate(Math.PI/2));const p=t.x+i+(n-u)/2,x=t.y+t.h-(h-l.actualBoundingBoxAscent)/2;this.ctx.translate(p,x);for(let t=0;t<o;t++)this.ctx.fillStyle="black",this.ctx.fillText(s[t],0,0),this.ctx.translate(n,0);this.ctx.restore();const d={id:"content",x:t.x,y:t.y,w:t.w,h:t.h-h};return[d,{id:"labels",x:t.x,y:d.y+d.h,w:d.w,h}]}strokeFrame(t,e,i){this.ctx.strokeStyle=e,this.ctx.lineWidth=null!=i?i:1,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black"}measureTickTextMaxWidth(t,e,i){let s=0;for(let o=1;o<=t+1;o++){const r=this.ctx.measureText(String(n(i+(t+1-o)*e,4))).width;r>s&&(s=r)}return s}drawGridHorizontalLinesNew(t,e,i,s){const{ctx:o}=this,{tickCount:r,tickHeight:a}=e,h=t.h/(r+1);o.lineWidth=1,o.strokeStyle=this.HORIZONTAL_LINE_COLOR,o.font=`${s}px sans-serif`;const l=this.measureTickTextMaxWidth(r,a,i);for(let e=1;e<=r+1;e++){const s=t.y+h*e,c=String(n(i+(r+1-e)*a,4)),{width:u}=o.measureText(c);o.fillText(c,t.x+(l-u),s),o.beginPath(),o.moveTo(t.x+l,s),o.lineTo(t.x+t.w,s),o.stroke(),o.closePath()}return{x:t.x+l,y:t.y,w:t.w-l,h:t.h}}drawGridHorizontalLines(t,i=0,s=0){const{ctx:o}=this,{tickCount:r,tickHeight:a}=e(this.MOST_TICKS,i,s),h=t.h/(r+1);o.lineWidth=1,o.strokeStyle=this.HORIZONTAL_LINE_COLOR;const l=this.measureTickTextMaxWidth(r,a,i);for(let e=1;e<=r+1;e++){const s=t.y+h*e,c=String(n(i+(r+1-e)*a,4)),{width:u}=o.measureText(c);o.fillText(c,t.x+(l-u),s),o.beginPath(),o.moveTo(t.x+l,s),o.lineTo(t.x+t.w,s),o.stroke(),o.closePath()}return{tickCount:r,tickHeight:a,tickFrame:{x:t.x+l,y:t.y,w:t.w-l,h:t.h}}}drawTitle(t,e){const{ctx:i}=this,{x:s,y:n,w:o,h:r}=e;i.font=`${Math.floor(r/2)}px sans-serif`;let a=i.measureText(t),h=a.width;h>o&&(i.font=`${Math.floor(r/2*(o/h))}px sans-serif`,a=i.measureText(t),h=a.width);const l=s+o/2-h/2,c=n+r/2+a.actualBoundingBoxAscent/2;i.fillText(t,l,c,o),this.strokeFrame(e,this.DIVIDER_LINE_COLOR,1)}drawLegend(t,e){this.strokeFrame(e,this.DIVIDER_LINE_COLOR,1);const i=Math.ceil(t.length/this.SERIE_LEGEND_PER_LEVEL),s=e.w/Math.min(t.length,this.SERIE_LEGEND_PER_LEVEL),n=e.h/i;for(let i=0;i<t.length;i++)this.drawSingleSerieLegend({x:e.x+s*(i%this.SERIE_LEGEND_PER_LEVEL),y:e.y+n*Math.floor(i/this.SERIE_LEGEND_PER_LEVEL),w:s,h:n},t[i],t.length)}drawSingleSerieLegend(t,e,i){const s=this.prepareSingleSerieLegend(t,e,i);this.performDrawSingleSerieLegend(s,e)}prepareSingleSerieLegend(t,e,i){const{ctx:s}=this,{name:n}=e,o=Math.min(t.w,t.h),r=o*this.SERIE_PADDING_MULTIPIER,a=o-2*r,h=i>this.SERIE_LEGEND_PER_LEVEL,l=h?2:3;s.font=`${Math.floor(o/l)}px sans-serif`;const{width:c,actualBoundingBoxAscent:u}=s.measureText(n),p=c>t.w-o,x=c+o,d={x:t.x+(p||h?r:(t.w-x)/2),y:t.y+r,w:a,h:a};return{boxFrame:d,textCoords:{x:d.x+a+r,y:d.y+a/2+u/2,maxW:p||h?t.w-o:t.w-(t.w-x)/2-o}}}performDrawSingleSerieLegend(t,e){["bar","pie","area"].includes(this.plotType)&&this.patternTools.performDrawSingleSerieLegend(t,e),"points"===this.plotType&&this.pointTools.performDrawSingleSerieLegend(t,e),"line"===this.plotType&&this.lineTools.performDrawSingleSerieLegend(t,e)}}class u{constructor(t,e){this.ctx=t,this.plotKit=new c(t,e)}}class p extends u{constructor(){super(...arguments),this.PIXEL_PADDING=10}draw(t){const e=t.series,i=t.chartOptions,s=this.plotKit.prepareChartForDrawing(i,e);let n=s.find((t=>"content"===t.id));const o=s.find((t=>"labels"===t.id)),r=this.getMinMaxForSeries(e,"x"),a=this.getMinMaxForSeries(e,"y"),{tickCount:h,tickFrame:l}=this.plotKit.drawGridHorizontalLines(n,a.min,a.max);n=l;const c=n.h/(h+1),u={beginningInPixels:n.x+this.PIXEL_PADDING,widthOrHeightInPixels:n.w-2*this.PIXEL_PADDING,minValueFromSeries:r.min,maxValueFromSeries:r.max},p={beginningInPixels:n.y+c,widthOrHeightInPixels:n.h-c,minValueFromSeries:a.min,maxValueFromSeries:a.max},x=this.xGetValueToPixelMapperFunc(u),d=this.yGetValueToPixelMapperFunc(p),f={series:e,labelFrame:o,yMinForSeries:a.min,mappers:{xFunc:x,yFunc:d}};this.performDrawing(f)}performDrawing(t){const{series:e,mappers:i,labelFrame:s}=t;e.forEach((t=>{t.points.forEach((e=>{const n=this.mapSpacePointToPixelPoint(e,i.xFunc,i.yFunc);this.plotKit.pointTools.performDrawPoint(n,t.options),t.options.showValue&&this.drawValueForPoint(e.x,n.x,s)}))}))}getMinMaxForSeries(t,e){if(t.length){const i=t.findIndex((t=>t.points.length));if(i>=0){const s=t[i].points[0][e],n={x:s,y:s},o=this.minMaxReduceFuncFactory(e),r=t.map((t=>t.points.reduce(o,n))),a=r.reduce(o,r[0]);return{min:a.x,max:a.y}}}return{min:0,max:0}}minMaxReduceFuncFactory(t){return(e,i)=>({x:e.x>i[t]?i[t]:e.x,y:e.y<i[t]?i[t]:e.y})}xGetValueToPixelMapperFunc(t){return e=>t.beginningInPixels+t.widthOrHeightInPixels*((e-t.minValueFromSeries)/(t.maxValueFromSeries-t.minValueFromSeries))}yGetValueToPixelMapperFunc(t){return e=>t.beginningInPixels+t.widthOrHeightInPixels*(1-(e-t.minValueFromSeries)/(t.maxValueFromSeries-t.minValueFromSeries))}mapSpacePointToPixelPoint(t,e,i){return{x:e(t.x),y:i(t.y)}}drawValueForPoint(t,e,i){const s=String(t),{width:n,actualBoundingBoxAscent:o}=this.ctx.measureText(s);this.ctx.fillStyle="black",this.ctx.fillText(String(t),e-n/2,i.y+i.h/2+o/2)}}class x extends p{performDrawing(t){const{series:e,mappers:i,labelFrame:s}=t;for(let t=0;t<e.length;t++){const n=e[t].points.length;if(n<2)continue;const o=new Path2D,{points:r,options:a}=e[t],h=this.mapSpacePointToPixelPoint(r[0],i.xFunc,i.yFunc);o.moveTo(h.x,h.y),this.drawValueForPoint(r[0].x,h.x,s),this.plotKit.pointTools.performDrawPoint(h,a);for(let t=1;t<n;t++){const e=this.mapSpacePointToPixelPoint(r[t],i.xFunc,i.yFunc);o.lineTo(e.x,e.y),this.drawValueForPoint(r[t].x,e.x,s),this.plotKit.pointTools.performDrawPoint(e,a)}this.plotKit.lineTools.setLineStyle(a),this.ctx.stroke(o)}this.ctx.setLineDash([])}}const d={pie:class extends u{constructor(){super(...arguments),this.RADIUS_DIVIDER=2.5}draw(t){const e=t.series,i=t.chartOptions,{ctx:s}=this,n=this.plotKit.prepareChartForDrawing(i,e).find((t=>"content"===t.id)),o=this.mapSeriesToPiePartData(e,i.precentageValues),r=Math.min(n.w,n.h)/this.RADIUS_DIVIDER,a={x:n.x+n.w/2,y:n.y+n.h/2};let h=0;s.strokeStyle="black",s.font=`${Math.floor(r/5)}px sans-serif`,o.forEach((t=>{this.makePiePartPath(a.x,a.y,r,h,h+t.radians),this.plotKit.patternTools.applyShapeOrColor(s,t.shape,t.color),s.fill(),"number"==typeof t.borderWidth&&t.borderWidth>0&&this.strokeBorder(t.borderWidth),t.showValue&&this.addPieValue(t.value,a.x,a.y,r,h+t.radians/2,n,i.precentageValues),h+=t.radians}))}mapSeriesToPiePartData(t,e=!1){const i=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({radians:2*t.value*Math.PI/i,color:t.options.color,borderWidth:t.options.borderWidth,shape:t.options.shape,showValue:t.options.showValue,value:e?t.value/i:t.value})))}makePiePartPath(t,e,i,s,n){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.arc(t,e,i,s,n),this.ctx.lineTo(t,e)}strokeBorder(t){this.ctx.lineWidth=t,this.ctx.stroke()}addPieValue(t,e,i,s,n,o,r){const a=r?`${(100*t).toPrecision(4)}%`:`${t}`,{width:h,actualBoundingBoxAscent:l}=this.ctx.measureText(a),c=o.w/2-s,u=e+Math.cos(n)*s-(n>Math.PI/2&&n<1.5*Math.PI?Math.min(c,h):0),p=i+Math.sin(n)*(s+l)+l/2;this.ctx.fillStyle="black",this.ctx.fillText(a,u,p,c)}},bar:class extends u{constructor(){super(...arguments),this.COL_SPACE_SIZE=.75,this.VALUE_BOTTOM_PADDING=4}draw(t){const i=t.series,s=t.chartOptions,n=t.dataLabels,o=i.length,r=n.length;let a=this.plotKit.prepareChartForDrawing(s,i),h=a.find((t=>"content"===t.id));const l=Math.max(...i.map((t=>Math.max(...t.values)))),c=e(this.plotKit.MOST_TICKS,0,l),u=this.plotKit.yGetAxisTextMaxWidth(c,0,18),p=h.w-u,x=p/r,d=x*(1-this.COL_SPACE_SIZE),f=(x-2*d)/o;if(s.showLabels){const t=this.plotKit.getLabelsFrameFilled(h,p,u,n,x,r);a=a.filter((t=>"content"!==t.id)),a.push(...t)}const{tickCount:_,tickHeight:g}=c;h=a.find((t=>"content"===t.id)),h=this.plotKit.drawGridHorizontalLinesNew(h,c,0,18);const w=h.h/((_+1)*g);this.ctx.fillStyle="black";const y=h.y+h.h,v=Math.floor(.5*f);this.ctx.font=`${v}px sans-serif`;for(let t=0;t<r;t++){const e=h.x+t*x+d;for(let s=0;s<o;s++){const n=e+s*f,o=i[s].values[t]*w,r=y-o;this.drawBar(n,r,f,o,i[s].options,i[s].values[t])}}}drawBar(t,e,i,s,n,o){this.fillBar(t,e,i,s,n);const{showValue:r,borderWidth:a}=n;a&&this.strokeBar(t,e,i,s,a),r&&this.addBarValue(t,e,i,o)}fillBar(t,e,i,s,n){const{color:o,shape:r}=n;this.plotKit.patternTools.applyShapeOrColor(this.ctx,r,o),this.ctx.fillRect(t,e,i,s)}strokeBar(t,e,i,s,n){this.ctx.lineWidth=s?n:1,this.ctx.beginPath(),this.ctx.moveTo(t,e+s),this.ctx.lineTo(t,e),this.ctx.lineTo(t+i,e),this.ctx.lineTo(t+i,e+s),this.ctx.strokeStyle="black",this.ctx.stroke()}addBarValue(t,e,i,s){this.ctx.fillStyle="black";const n=String(s),o=t+i/2-this.ctx.measureText(n).width/2;this.ctx.fillText(n,o,e-this.VALUE_BOTTOM_PADDING,i)}},points:p,line:x,area:class extends x{performDrawing(t){const{series:e,mappers:i,labelFrame:s,yMinForSeries:n}=t,o=i.yFunc(n);for(let t=0;t<e.length;t++){const n=e[t].points.length;if(n<2)continue;const r=new Path2D,{points:a,options:h}=e[t],l=this.mapSpacePointToPixelPoint(a[0],i.xFunc,i.yFunc);r.moveTo(l.x,o),r.lineTo(l.x,l.y),this.drawValueForPoint(a[0].x,l.x,s),this.plotKit.pointTools.performDrawPoint(l,h);for(let t=1;t<n-1;t++){const e=this.mapSpacePointToPixelPoint(a[t],i.xFunc,i.yFunc);r.lineTo(e.x,e.y),this.drawValueForPoint(a[t].x,e.x,s),this.plotKit.pointTools.performDrawPoint(l,h)}const c=this.mapSpacePointToPixelPoint(a[n-1],i.xFunc,i.yFunc);r.lineTo(c.x,c.y),r.lineTo(c.x,o),this.drawValueForPoint(a[n-1].x,c.x,s),this.plotKit.pointTools.performDrawPoint(c,h),this.plotKit.lineTools.setLineStyle(h),this.plotKit.patternTools.applyShapeOrColor(this.ctx,h.shape,h.color),this.ctx.fill(r),this.ctx.strokeStyle="black",this.ctx.stroke(r)}this.ctx.setLineDash([])}}};class f{constructor(t,e){this.seriesData=[];let i=t;if("string"==typeof i&&(i=document.getElementById(i.replace("/^#/",""))),i instanceof HTMLCanvasElement)this.context=i.getContext("2d");else{if(!(i instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=i}this.setDefaultChartOptions(),this.plot=function(t,e){const i=d[e];if(i)return new i(t,e);throw new Error(`Plotter for ${e} is not defined.`)}(this.context,e)}setDefaultChartOptions(){return this.chartOptions={title:"Title",showTitle:!0,showLegend:!1},this.chartOptions}getDefaultSerieObjectBase(){return{name:"unnamed",options:{color:`#${Math.floor(16777215*Math.random()).toString(16)}`,showValue:!1,showOnLegend:!1}}}setChartOptions(e){t.mergeRight(e,this.chartOptions)}setSerieOptions(e,i){i?i.forEach((i=>{const s=this.seriesData.find((t=>t.name==i));s?t.mergeRight(e,s.options):console.warn(`Serie with name ${i} not found.`)})):this.seriesData.forEach((i=>t.mergeRight(e,i.options)))}draw(t){this.plot.draw(t)}}class _ extends f{set serieNames(t){const e=Math.min(t.length,this.seriesData.length);for(let i=0;i<e;i++)this.seriesData[i].name=t[i]}setDefaultChartOptions(){return super.setDefaultChartOptions(),Object.assign(this.chartOptions,{showLabels:!0}),this.chartOptions}}class g extends _{set points(t){const e=this.seriesData.filter((t=>t.name.startsWith("serie"))).length;this.seriesData.push(this.getDefaultSerieObject(t,e+1))}set X(t){this.seriesData=t.map(((t,e)=>this.getDefaultSerieObject(t.map((t=>({x:t,y:0}))),e)))}set Y(t){const{length:e}=this.seriesData;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const i=Math.min(t.length,e);for(let e=0;e<i;e++){const i=Math.min(t[e].length,this.seriesData[e].points.length);for(let s=0;s<i;s++)this.seriesData[e].points[s].y=t[e][s]}}getDefaultSerieObject(t,e){const i=super.getDefaultSerieObjectBase();return i.name=`serie${e}`,Object.assign(i,{points:t}),Object.assign(i.options,{pointShape:void 0,pointSize:0}),i}draw(){this.seriesData.forEach((t=>t.points.sort(((t,e)=>t.x-e.x)))),super.draw({series:this.seriesData,chartOptions:this.chartOptions})}}class w extends g{getDefaultSerieObject(t,e){const i=super.getDefaultSerieObject(t,e);return Object.assign(i.options,{dash:[],dashWidth:1}),i}}const y={pie:class extends f{set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(e){const{length:i}=this.seriesData;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=t.sliceOrFill(e,i);this.seriesData.map(((t,e)=>{if(s[e]<0)throw Error("Pie Chart cannot have negative values!");t.value=s[e]}))}setDefaultChartOptions(){const t=super.setDefaultChartOptions();return Object.assign(t,{precentageValues:!1}),t}getDefaultSerieObject(t){const e=super.getDefaultSerieObjectBase();return e.name=t,Object.assign(e,{value:0}),Object.assign(e.options,{borderWidth:1,shape:void 0}),e}draw(){super.draw({series:this.seriesData,chartOptions:this.chartOptions})}},bar:class extends _{constructor(){super(...arguments),this.dataLabels=[]}set X(t){this.dataLabels=t}set Y(e){if(!t.checkIfArrayOfArrays(e))return void(this.seriesData=e.map(((t,e)=>this.getDefaultSerieObject([t],e))));const{length:i}=this.dataLabels;if(!i)throw Error('Values on "X" axis must be specified before setting "Y" values.');const s=e.map((e=>t.sliceOrFill(e,i)));this.seriesData=s.map(((t,e)=>this.getDefaultSerieObject(t,e)))}getDefaultSerieObject(t,e){const i=super.getDefaultSerieObjectBase();return i.name=`serie${e}`,Object.assign(i,{values:t}),Object.assign(i.options,{borderWidth:0,shape:void 0}),i}draw(){super.draw({dataLabels:this.dataLabels,series:this.seriesData,chartOptions:this.chartOptions})}},points:g,line:w,area:class extends w{getDefaultSerieObject(t,e){const i=super.getDefaultSerieObject(t,e);return Object.assign(i.options,{shape:void 0}),i}}};function v(t,e){const i=y[t.toLowerCase().trim()];if(i)return new i(e,t);throw new Error(`${t} chart is not defined.`)}})();var n=s.Z;export{n as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,