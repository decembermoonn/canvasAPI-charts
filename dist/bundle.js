var t={744:function(t){t.exports=function(){var t="rgba(100, 100, 100, 0.7)",e="rgba(255, 255, 255, 0.8)",i="round",n=(function(){function t(t){this.value=t}function e(e){var i,n;function o(i,n){try{var r=e[i](n),a=r.value;a instanceof t?Promise.resolve(a.value).then((function(t){o("next",t)}),(function(t){o("throw",t)})):s(r.done?"return":"normal",r.value)}catch(t){s("throw",t)}}function s(t,e){switch(t){case"return":i.resolve({value:e,done:!0});break;case"throw":i.reject(e);break;default:i.resolve({value:e,done:!1})}(i=i.next)?o(i.key,i.arg):n=null}this._invoke=function(t,e){return new Promise((function(s,r){var a={key:t,arg:e,resolve:s,reject:r,next:null};n?n=n.next=a:(i=n=a,o(t,e))}))},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},h=function(){function s(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;return n(this,s),this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.width=i,this._canvas.height=i,this._context.fillStyle=o,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._size=i,this._patternColor=r,this}return o(s,[{key:"setStrokeProps",value:function(){this._context.strokeStyle=this._patternColor,this._context.lineWidth=this._size/10,this._context.lineJoin=i,this._context.lineCap=i}},{key:"setFillProps",value:function(){this._context.fillStyle=this._patternColor}}]),s}(),c=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawPlus(),this.drawPlus(t,t),this._context.stroke(),this._canvas}},{key:"drawPlus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/4;this._context.moveTo(o+t,0+e),this._context.lineTo(o+t,n+e),this._context.moveTo(0+t,o+e),this._context.lineTo(n+t,o+e),this._context.closePath()}}]),e}(h),l=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawCross(),this.drawCross(t,t),this._context.stroke(),this._canvas}},{key:"drawCross",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,n=2;this._context.moveTo(t+n,e+n),this._context.lineTo(i-n+t,i-n+e),this._context.moveTo(t+n,i-n+e),this._context.lineTo(i-n+t,e+n),this._context.closePath()}}]),e}(h),u=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDash(),this.drawDash(t,t),this._context.stroke(),this._canvas}},{key:"drawDash",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size/2,n=2;this._context.moveTo(t+n,e+n),this._context.lineTo(i-n+t,i-n+e),this._context.closePath()}}]),e}(h),_=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new l).drawCross.call(this),(new u).drawDash.call(this,t,t),this._context.stroke(),this._canvas}}]),e}(h),f=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDot(),this.drawDot(t,t),this._context.fill(),this._canvas}},{key:"drawDot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._size/10,n=this._size/4,o=n+t,s=n+e;this._context.moveTo(o+n,s),this._context.arc(o,s,i,0,2*Math.PI),this._context.closePath()}}]),e}(h),d=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),(new u).drawDash.call(this,t,t),this._context.closePath(),this._context.stroke(),this.setFillProps(),(new f).drawDot.call(this),this._context.fill(),this._canvas}}]),e}(h),p=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setFillProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.fill(),this._canvas}}]),e}(f),v=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2,e=this._size/5;return this._context.beginPath(),this.setStrokeProps(),this.drawDot(0,0,e),this.drawDot(t,t,e),this._context.stroke(),this._canvas}}]),e}(f),g=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawLine(),this.drawLine(t,t),this._context.stroke(),this._canvas}},{key:"drawLine",value:function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=this._size/4;this._context.moveTo(0,e+t),this._context.lineTo(this._size,e+t),this._context.closePath()}}]),e}(h),x=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),g.prototype.drawTile.call(this),this._canvas}}]),e}(g),w=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawWeave(0,0),this._context.stroke(),this._canvas}},{key:"drawWeave",value:function(t,e){var i=this._size,n=i/2;this._context.moveTo(t+1,e+1),this._context.lineTo(n-1,n-1),this._context.moveTo(n+1,i-1),this._context.lineTo(i-1,n+1),this._context.closePath()}}]),e}(h),y=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.beginPath(),this.setStrokeProps(),this.drawZigzag(),this.drawZigzag(this._size/2),this._context.stroke(),this._canvas}},{key:"drawZigzag",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this._size,i=e/4,n=e/2,o=e/10;this._context.moveTo(0,o+t),this._context.lineTo(i,n-o+t),this._context.lineTo(n,o+t),this._context.lineTo(e-i,n-o+t),this._context.lineTo(e,o+t)}}]),e}(h),k=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),y.prototype.drawTile.call(this),this._canvas}}]),e}(y),m=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiagonalLine(),this.drawDiagonalLine(t,t),this._context.stroke(),this._canvas}},{key:"drawDiagonalLine",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=1;this._context.moveTo(n-o-t,-1*o+e),this._context.lineTo(i+1-t,n+1+e),this._context.closePath()}}]),e}(h),b=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){return this._context.translate(this._size,0),this._context.rotate(90*Math.PI/180),m.prototype.drawTile.call(this),this._canvas}}]),e}(m),P=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawSquare(),this.drawSquare(t,t),this._context.fill(),this._canvas}},{key:"drawSquare",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/20;this._context.fillRect(t+o,e+o,n-2*o,n-2*o),this._context.closePath()}}]),e}(h),T=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawBox(),this.drawBox(t,t),this._context.stroke(),this._canvas}},{key:"drawBox",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/20;this._context.strokeRect(t+o,e+o,n-4*o,n-4*o),this._context.closePath()}}]),e}(h),O=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawTriangle(),this.drawTriangle(t,t),this._context.fill(),this._canvas}},{key:"drawTriangle",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/4;this._context.moveTo(o+t,e),this._context.lineTo(n+t,n+e),this._context.lineTo(t,n+e),this._context.closePath()}}]),e}(h),z=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size;return this._context.translate(t,t),this._context.rotate(180*Math.PI/180),O.prototype.drawTile.call(this),this._canvas}}]),e}(O),S=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setFillProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.fill(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2,o=i/4;this._context.moveTo(o+t,e),this._context.lineTo(n+t,o+e),this._context.lineTo(o+t,n+e),this._context.lineTo(t,o+e),this._context.closePath()}}]),e}(h),D=function(t){function e(){return n(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,t),o(e,[{key:"drawTile",value:function(){var t=this._size/2;return this._context.beginPath(),this.setStrokeProps(),this.drawDiamond(),this.drawDiamond(t,t),this._context.stroke(),this._canvas}},{key:"drawDiamond",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this._size,n=i/2-1,o=i/4;this._context.moveTo(o+t,e+1),this._context.lineTo(n+t,o+e),this._context.lineTo(o+t,n+e),this._context.lineTo(t+1,o+e),this._context.closePath()}}]),e}(S),j={plus:c,cross:l,dash:u,"cross-dash":_,dot:f,"dot-dash":d,disc:p,ring:v,line:g,"line-vertical":x,weave:w,zigzag:y,"zigzag-vertical":k,diagonal:m,"diagonal-right-left":b,square:P,box:T,triangle:O,"triangle-inverted":z,diamond:S,"diamond-box":D},F=[];function C(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=Object.keys(j);t.forEach((function(t){e.splice(e.indexOf(t),1)}));var i=Math.floor(Math.random()*e.length);return e[i]}function M(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"square",e=arguments[1],i=arguments[2],n=arguments[3],o=document.createElement("canvas"),s=o.getContext("2d"),r=2*n,a=new(0,F[t])(n,e,i),h=s.createPattern(a.drawTile(),"repeat");return o.width=r,o.height=r,h.shapeType=t,h}return s(F,j,{circle:j.disc,"triangle-vertical":j["triangle-inverted"],"line-horizontal":j.line,"line-diagonal-lr":j.diagonal,"line-diagonal-rl":j["diagonal-right-left"],"zigzag-horizontal":j.zigzag,"diamond-outline":j["diamond-box"]}),{draw:M,generate:function(t){var e=void 0,i=void 0;return t.map((function(t,n,o){var s=void 0;return 0===n?(s=C(),e=i=s):n===o.length-1?s=C([i,e]):(s=C([i]),i=s),M(s,t)}))}}}()}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{i.d(n,{Z:()=>l});var t=i(744);class e{constructor(t){this.strokeFrameForTestEnabled=!0,this.ctx=t}strokeFrameForTest(t,e){this.strokeFrameForTestEnabled&&(this.ctx.strokeStyle=e,this.ctx.strokeRect(t.x,t.y,t.w,t.h),this.ctx.strokeStyle="black")}getContentFrame(){const{width:t,height:e}=this.ctx.canvas,i=Math.floor(Math.min(t,e)/100);return{x:i,y:i,w:t-2*i,h:e-2*i}}getTitleFrame(t){const e=Math.floor(t.h/10);return{x:t.x,y:t.y,h:e,w:t.w}}getRemainingContentFrame(t,e){return{x:t.x,y:t.y<e.y?t.y:e.y+e.h,w:t.w,h:t.h-e.h}}getLegendFrame(t){const e=Math.floor(t.h/10);return{x:t.x,y:t.y+t.h-e,h:e,w:t.w}}drawTitle(t,e){const{ctx:i}=this,n=this.getTitleFrame(e),{x:o,y:s,w:r,h:a}=n;i.font=`${Math.floor(a/2)}px sans-serif`;const h=i.measureText(t),c=o+r/2-h.width/2,l=s+a/2+h.actualBoundingBoxAscent/2;return i.fillText(t,c,l,r),this.strokeFrameForTest(n,"red"),this.getRemainingContentFrame(e,n)}drawSingleSerieLegend(e,i){const{ctx:n}=this,{options:o,name:s}=i;if(n.fillStyle=o.color,null!=o.shape)try{n.fillStyle=(0,t.draw)(o.shape,o.color,"black")}catch(t){console.warn(`${o.shape} is invalid shape. See documentation.`)}n.strokeStyle="black",n.lineWidth=3,this.strokeFrameForTest(e,o.color);const r=Math.min(e.w,e.h),a=.6*r,h={x:e.x+(r-a)/2,y:e.y+(r-a)/2,w:a,h:a};n.fillRect(h.x,h.y,h.w,h.h),n.strokeRect(h.x,h.y,h.w,h.h);const c={x:e.x+r,y:e.y+r/2};n.fillStyle="black",n.font=`${Math.floor(r/4)}px sans-serif`,n.fillText(s,c.x,c.y,e.w-r)}drawLegend(t,e){const i=this.getLegendFrame(t);this.strokeFrameForTest(i,"green");const n=.75*i.w;i.x=i.x+(i.w-n)/2,i.w=n;const o=Math.ceil(e.length/5),s=i.w/Math.min(e.length,5),r=i.h/o;for(let t=0;t<e.length;t++)this.drawSingleSerieLegend({x:i.x+s*(t%5),y:i.y+r*Math.floor(t/5),w:s,h:r},e[t]);return this.getRemainingContentFrame(t,i)}prepareChartForDrawing(t,e){const{ctx:i}=this,{width:n,height:o}=i.canvas;this.ctx.clearRect(0,0,n,o);let s=this.getContentFrame();return this.strokeFrameForTest(s,"blue"),t.showTitle&&t.title&&(s=this.drawTitle(t.title,s)),t.showLegend&&(s=this.drawLegend(s,e)),this.strokeFrameForTest(s,"yellow"),s}drawGridHorizontalLines(t,e){const{ctx:i}=this,n=function(t,e){const i=t/10,n=Math.pow(10,Math.floor(Math.log10(i))),o=i/n,s=(o<10?[1,1.5,2,3,5,7,10].find((t=>t>o)):10)*n;return{tickHeight:s,tickCount:Math.ceil(t/s)}}(Math.max(...t.map((t=>Math.max(...t.values))))),o=e.h/n.tickCount+1;i.lineWidth=3,i.strokeStyle="gray";for(let t=1;t<=n.tickCount;t++){const n=e.y+o*t;i.beginPath(),i.moveTo(e.x,n),i.lineTo(e.x+e.w,n),i.stroke(),i.closePath()}return n}}const o=class{static sliceOrFill(t,e,i){if(t.length===e)return t;if(t.length>e)return t.slice(0,e);if(t.length<e)for(;t.length!==e;)t.push(null!=i?i:0);return t}static mergeRight(t,e){const i=Object.keys(e);Object.entries(t).forEach((t=>{const n=t[0];if(i.includes(n)){const i=t[1];e[n]=i}}))}};class s{constructor(t){let i=t;if("string"==typeof i&&(i=document.getElementById(i.replace("/^#/",""))),i instanceof HTMLCanvasElement)this.context=i.getContext("2d");else{if(!(i instanceof CanvasRenderingContext2D))throw Error("Argument must be valid ID, HTMLCanvasElement or CanvasRenderingContext2D");this.context=i}this.chartOptions={title:"Untitled",showTitle:!0,showLegend:!1},this.seriesData=[],this.plot=new e(this.context)}setChartOptions(t){o.mergeRight(t,this.chartOptions)}setSerieOptions(t,e){e?e.forEach((e=>{const i=this.seriesData.find((t=>t.name==e));i?o.mergeRight(t,i.options):console.warn(`Serie with name ${e} not found.`)})):this.seriesData.forEach((e=>o.mergeRight(t,e.options)))}}class r extends e{constructor(t){super(t.ctx)}drawBar(t,e,i,n,o){this.ctx.fillStyle=o,this.ctx.lineWidth=1,this.ctx.fillRect(t,e,i,n)}drawBars(t,e){const i=this.prepareChartForDrawing(e,t),n=this.drawGridHorizontalLines(t,i),o=t.length,s=i.w/o,r=.75*s,a=(s-r)/2,h=t[0].values.length,c=r/h*.75;for(let e=0;e<h;e++)for(let r=0;r<o;r++){const o=t[r].values[e]*i.h/n.tickCount+1;this.drawBar(i.x+r*s+a+e*c,i.y+i.h-o,c,o,t[e].options.color)}}}class a extends s{constructor(t){super(t),this.plot=new r(this.plot)}set X(t){this.dataLabels=t}set Y(t){const{length:e}=this.dataLabels;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const i=t.map((t=>o.sliceOrFill(t,e)));this.seriesData=i.map(((t,e)=>this.getDefaultSerieObject(t,e)))}getDefaultSerieObject(t,e){return{values:t,name:`serie${e}`,options:{color:Math.floor(16777215*Math.random()).toString(16),showLabels:!1,showOnLegend:!1,edgeThickness:0}}}draw(){this.plot.drawBars(this.seriesData,this.chartOptions)}}class h extends e{constructor(t){super(t.ctx)}drawPie(e,i){const{ctx:n}=this,o=this.prepareChartForDrawing(i,e),s=this.mapSeriesToPieDegColorShape(e),r=Math.min(o.w,o.h)/2.5,a={x:o.x+o.w/2,y:o.y+o.h/2};let h=0;n.strokeStyle="black",s.forEach((e=>{if(n.beginPath(),n.moveTo(a.x,a.y),n.arc(a.x,a.y,r,h,h+=e.rad),n.lineTo(a.x,a.y),n.fillStyle=e.color,null!=e.shape)try{n.fillStyle=(0,t.draw)(e.shape,e.color,"black")}catch(t){console.warn(`${e.shape} is invalid shape. See documentation.`)}n.fill(),e.thickness>0&&(n.lineWidth=e.thickness,n.stroke())}))}mapSeriesToPieDegColorShape(t){const e=t.map((t=>t.value)).reduce(((t,e)=>t+e),0);return t.map((t=>({rad:2*t.value*Math.PI/e,color:t.options.color,thickness:t.options.edgeThickness,shape:t.options.shape})))}}class c extends s{constructor(t){super(t),this.plot=new h(this.plot)}set X(t){this.seriesData=t.map((t=>this.getDefaultSerieObject(t)))}set Y(t){const{length:e}=this.seriesData;if(!e)throw Error('Values on "X" axis must be specified before setting "Y" values.');const i=o.sliceOrFill(t,e);this.seriesData.map(((t,e)=>{t.value=i[e]}))}getDefaultSerieObject(t){return{value:0,name:t,options:{color:Math.floor(16777215*Math.random()).toString(16),showLabels:!1,showOnLegend:!1,edgeThickness:0,shape:void 0}}}draw(){this.plot.drawPie(this.seriesData,this.chartOptions)}}function l(t,e){switch(t.toLowerCase().trim()){case"pie":return new c(e);case"bar":return new a(e);default:throw new Error(`${t} chart is not defined.`)}}})();var o=n.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,